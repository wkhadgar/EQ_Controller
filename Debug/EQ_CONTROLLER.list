
EQ_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000733c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001008  08007450  08007450  00017450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008458  08008458  00020154  2**0
                  CONTENTS
  4 .ARM          00000000  08008458  08008458  00020154  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008458  08008458  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08008460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  20000158  080085b4  00020158  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  080085b4  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db20  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002877  00000000  00000000  0002dc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00030518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00031328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019205  00000000  00000000  00032008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112aa  00000000  00000000  0004b20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bdf8  00000000  00000000  0005c4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e82af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe0  00000000  00000000  000e8300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000158 	.word	0x20000158
 800012c:	00000000 	.word	0x00000000
 8000130:	08007434 	.word	0x08007434

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000015c 	.word	0x2000015c
 800014c:	08007434 	.word	0x08007434

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_ADC1_Init+0x74>)
 8000a5e:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <MX_ADC1_Init+0x78>)
 8000a60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_ADC1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_ADC1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_ADC1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_ADC1_Init+0x74>)
 8000a76:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_ADC1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_ADC1_Init+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_ADC1_Init+0x74>)
 8000a8a:	f002 ff1f 	bl	80038cc <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f001 fa4e 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_ADC1_Init+0x74>)
 8000aaa:	f002 ffe7 	bl	8003a7c <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ab4:	f001 fa3e 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000174 	.word	0x20000174
 8000ac4:	40012400 	.word	0x40012400

08000ac8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <HAL_ADC_MspInit+0x6c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d121      	bne.n	8000b2c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_ADC_MspInit+0x70>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = V_BAT_Pin;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_BAT_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_ADC_MspInit+0x74>)
 8000b28:	f003 f9f0 	bl	8003f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40012400 	.word	0x40012400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010800 	.word	0x40010800

08000b40 <astro_targets_init>:
 * @brief Control array for easier selection of the ROM targets.
 */

static astro_target_t astro_target[_TARGET_AMOUNT]; //TODO revisar a redundancia.

void astro_targets_init(void) {
 8000b40:	b4b0      	push	{r4, r5, r7}
 8000b42:	af00      	add	r7, sp, #0
	astro_target[JUPITER] = Jupiter;
 8000b44:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <astro_targets_init+0xc0>)
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <astro_targets_init+0xc4>)
 8000b48:	4614      	mov	r4, r2
 8000b4a:	461d      	mov	r5, r3
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5c:	e884 0003 	stmia.w	r4, {r0, r1}
	astro_target[MARS] = Mars;
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <astro_targets_init+0xc0>)
 8000b62:	4a29      	ldr	r2, [pc, #164]	; (8000c08 <astro_targets_init+0xc8>)
 8000b64:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8000b68:	4615      	mov	r5, r2
 8000b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b7a:	e884 0003 	stmia.w	r4, {r0, r1}
	astro_target[RIGEL] = Rigel;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <astro_targets_init+0xc0>)
 8000b80:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <astro_targets_init+0xcc>)
 8000b82:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8000b86:	4615      	mov	r5, r2
 8000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b98:	e884 0003 	stmia.w	r4, {r0, r1}
	astro_target[SATURN] = Saturn;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <astro_targets_init+0xc0>)
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <astro_targets_init+0xd0>)
 8000ba0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bb6:	e884 0003 	stmia.w	r4, {r0, r1}
	astro_target[SIRIUS] = Sirius;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <astro_targets_init+0xc0>)
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <astro_targets_init+0xd4>)
 8000bbe:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8000bc2:	4615      	mov	r5, r2
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bd4:	e884 0003 	stmia.w	r4, {r0, r1}
	astro_target[VENUS] = Venus;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <astro_targets_init+0xc0>)
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <astro_targets_init+0xd8>)
 8000bdc:	f503 748c 	add.w	r4, r3, #280	; 0x118
 8000be0:	4615      	mov	r5, r2
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bf2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bcb0      	pop	{r4, r5, r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	200001a8 	.word	0x200001a8
 8000c04:	08007638 	.word	0x08007638
 8000c08:	08007670 	.word	0x08007670
 8000c0c:	08007718 	.word	0x08007718
 8000c10:	08007600 	.word	0x08007600
 8000c14:	080076e0 	.word	0x080076e0
 8000c18:	080076a8 	.word	0x080076a8

08000c1c <astro_target_get>:
	}
	
	astro_target[pos] = tgt;
}

astro_target_t astro_target_get(target_t pos) {
 8000c1c:	b4b0      	push	{r4, r5, r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
	if (pos >= _TARGET_AMOUNT) {
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	2b0a      	cmp	r3, #10
 8000c2c:	d90f      	bls.n	8000c4e <astro_target_get+0x32>
		return astro_target[_TARGET_AMOUNT - 1];
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <astro_target_get+0x64>)
 8000c32:	4615      	mov	r5, r2
 8000c34:	f503 740c 	add.w	r4, r3, #560	; 0x230
 8000c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c48:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c4c:	e013      	b.n	8000c76 <astro_target_get+0x5a>
	}
	return astro_target[pos];
 8000c4e:	78fa      	ldrb	r2, [r7, #3]
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	490b      	ldr	r1, [pc, #44]	; (8000c80 <astro_target_get+0x64>)
 8000c54:	4613      	mov	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	440b      	add	r3, r1
 8000c5e:	4604      	mov	r4, r0
 8000c60:	461d      	mov	r5, r3
 8000c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c72:	e884 0003 	stmia.w	r4, {r0, r1}
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bcb0      	pop	{r4, r5, r7}
 8000c7e:	4770      	bx	lr
 8000c80:	200001a8 	.word	0x200001a8

08000c84 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a48      	ldr	r2, [pc, #288]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb0:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a42      	ldr	r2, [pc, #264]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000cb6:	f043 0320 	orr.w	r3, r3, #32
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0320 	and.w	r3, r3, #32
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a36      	ldr	r2, [pc, #216]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <MX_GPIO_Init+0x13c>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CSN_GPIO_Port, SPI_CSN_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cfe:	4831      	ldr	r0, [pc, #196]	; (8000dc4 <MX_GPIO_Init+0x140>)
 8000d00:	f003 fa9f 	bl	8004242 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d04:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	482c      	ldr	r0, [pc, #176]	; (8000dc8 <MX_GPIO_Init+0x144>)
 8000d16:	f003 f8f9 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4
                           PA5 PA6 PA7 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000d1a:	f249 03fd 	movw	r3, #37117	; 0x90fd
 8000d1e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d20:	2303      	movs	r3, #3
 8000d22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4826      	ldr	r0, [pc, #152]	; (8000dc4 <MX_GPIO_Init+0x140>)
 8000d2c:	f003 f8ee 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000d30:	f241 33ff 	movw	r3, #5119	; 0x13ff
 8000d34:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d36:	2303      	movs	r3, #3
 8000d38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4822      	ldr	r0, [pc, #136]	; (8000dcc <MX_GPIO_Init+0x148>)
 8000d42:	f003 f8e3 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ROT_TRIG_Pin|ROT_BUT_Pin;
 8000d46:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <MX_GPIO_Init+0x14c>)
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <MX_GPIO_Init+0x140>)
 8000d5c:	f003 f8d6 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_CLKW_Pin;
 8000d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ROT_CLKW_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <MX_GPIO_Init+0x140>)
 8000d76:	f003 f8c9 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin;
 8000d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CSN_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_GPIO_Init+0x140>)
 8000d94:	f003 f8ba 	bl	8003f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2017      	movs	r0, #23
 8000d9e:	f003 f87e 	bl	8003e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000da2:	2017      	movs	r0, #23
 8000da4:	f003 f897 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	2028      	movs	r0, #40	; 0x28
 8000dae:	f003 f876 	bl	8003e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000db2:	2028      	movs	r0, #40	; 0x28
 8000db4:	f003 f88f 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40011000 	.word	0x40011000
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	10110000 	.word	0x10110000

08000dd4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000dda:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_I2C2_Init+0x58>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_I2C2_Init+0x50>)
 8000e12:	f003 fa51 	bl	80042b8 <HAL_I2C_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e1c:	f001 f88a 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000410 	.word	0x20000410
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	00061a80 	.word	0x00061a80

08000e30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <HAL_I2C_MspInit+0x74>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d124      	bne.n	8000e9a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_I2C_MspInit+0x78>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_I2C_MspInit+0x78>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_I2C_MspInit+0x78>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6e:	2312      	movs	r3, #18
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <HAL_I2C_MspInit+0x7c>)
 8000e7e:	f003 f845 	bl	8003f0c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_I2C_MspInit+0x78>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_I2C_MspInit+0x78>)
 8000e88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_I2C_MspInit+0x78>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40005800 	.word	0x40005800
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000eb6:	f002 fc83 	bl	80037c0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000eba:	f000 f8e5 	bl	8001088 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000ebe:	f7ff fee1 	bl	8000c84 <MX_GPIO_Init>
    MX_ADC1_Init();
 8000ec2:	f7ff fdc3 	bl	8000a4c <MX_ADC1_Init>
    MX_I2C2_Init();
 8000ec6:	f7ff ff85 	bl	8000dd4 <MX_I2C2_Init>
    MX_SPI2_Init();
 8000eca:	f001 f8a9 	bl	8002020 <MX_SPI2_Init>
    /* USER CODE BEGIN 2 */

    bool was_selected[_SCREEN_AMOUNT] = {false};
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	460a      	mov	r2, r1
 8000eda:	709a      	strb	r2, [r3, #2]
    uint8_t init_payload[PAYLOAD_LEN] = "INIT";
 8000edc:	4a62      	ldr	r2, [pc, #392]	; (8001068 <main+0x1b8>)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee4:	6018      	str	r0, [r3, #0]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	7019      	strb	r1, [r3, #0]
 8000eea:	f107 0309 	add.w	r3, r7, #9
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	711a      	strb	r2, [r3, #4]

    SH1106_cleanInit();
 8000ef4:	f001 fada 	bl	80024ac <SH1106_cleanInit>
    nRF24_TX_ESB_setup();
 8000ef8:	f000 f922 	bl	8001140 <nRF24_TX_ESB_setup>
    astro_targets_init();
 8000efc:	f7ff fe20 	bl	8000b40 <astro_targets_init>

    SH1106_drawBitmapFullscreen(eqmount_logo);
 8000f00:	485a      	ldr	r0, [pc, #360]	; (800106c <main+0x1bc>)
 8000f02:	f002 f969 	bl	80031d8 <SH1106_drawBitmapFullscreen>
    SH1106_flush();
 8000f06:	f001 fa9d 	bl	8002444 <SH1106_flush>
    HAL_Delay(2000);
 8000f0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f0e:	f002 fcb9 	bl	8003884 <HAL_Delay>

#ifdef USE_NRF24L01
    uint16_t retries = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	82fb      	strh	r3, [r7, #22]
    while (!nRF24_Check()) {
 8000f16:	e01c      	b.n	8000f52 <main+0xa2>
        retries++;
 8000f18:	8afb      	ldrh	r3, [r7, #22]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	82fb      	strh	r3, [r7, #22]
        SH1106_clear();
 8000f1e:	f001 fa6f 	bl	8002400 <SH1106_clear>
        SH1106_printStr(20, (SCR_H / 2) - 8, "ERRO - NRF24", fnt7x10);
 8000f22:	4b53      	ldr	r3, [pc, #332]	; (8001070 <main+0x1c0>)
 8000f24:	4a53      	ldr	r2, [pc, #332]	; (8001074 <main+0x1c4>)
 8000f26:	2118      	movs	r1, #24
 8000f28:	2014      	movs	r0, #20
 8000f2a:	f002 f853 	bl	8002fd4 <SH1106_printStr>
        SH1106_printStr(20, (3 * SCR_H / 4) - 8, "Retries:", fnt7x10);
 8000f2e:	4b50      	ldr	r3, [pc, #320]	; (8001070 <main+0x1c0>)
 8000f30:	4a51      	ldr	r2, [pc, #324]	; (8001078 <main+0x1c8>)
 8000f32:	2128      	movs	r1, #40	; 0x28
 8000f34:	2014      	movs	r0, #20
 8000f36:	f002 f84d 	bl	8002fd4 <SH1106_printStr>
        SH1106_printInt(85, (3 * SCR_H / 4) - 8, retries, fnt7x10);
 8000f3a:	8afa      	ldrh	r2, [r7, #22]
 8000f3c:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <main+0x1c0>)
 8000f3e:	2128      	movs	r1, #40	; 0x28
 8000f40:	2055      	movs	r0, #85	; 0x55
 8000f42:	f002 f885 	bl	8003050 <SH1106_printInt>
        SH1106_flush();
 8000f46:	f001 fa7d 	bl	8002444 <SH1106_flush>
        HAL_Delay(1000);
 8000f4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4e:	f002 fc99 	bl	8003884 <HAL_Delay>
    while (!nRF24_Check()) {
 8000f52:	f002 fa1d 	bl	8003390 <nRF24_Check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f083 0301 	eor.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1da      	bne.n	8000f18 <main+0x68>
    }

    retries = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	82fb      	strh	r3, [r7, #22]
    while (!send_data(init_payload, PAYLOAD_LEN)) {
 8000f66:	e01c      	b.n	8000fa2 <main+0xf2>
        retries++;
 8000f68:	8afb      	ldrh	r3, [r7, #22]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	82fb      	strh	r3, [r7, #22]
        SH1106_clear();
 8000f6e:	f001 fa47 	bl	8002400 <SH1106_clear>
        SH1106_printStr(3, (SCR_H / 2) - 8, "ERRO - NO MOUNT", fnt7x10);
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <main+0x1c0>)
 8000f74:	4a41      	ldr	r2, [pc, #260]	; (800107c <main+0x1cc>)
 8000f76:	2118      	movs	r1, #24
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f002 f82b 	bl	8002fd4 <SH1106_printStr>
        SH1106_printStr(20, (3 * SCR_H / 4) - 8, "Retries:", fnt7x10);
 8000f7e:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <main+0x1c0>)
 8000f80:	4a3d      	ldr	r2, [pc, #244]	; (8001078 <main+0x1c8>)
 8000f82:	2128      	movs	r1, #40	; 0x28
 8000f84:	2014      	movs	r0, #20
 8000f86:	f002 f825 	bl	8002fd4 <SH1106_printStr>
        SH1106_printInt(85, (3 * SCR_H / 4) - 8, retries, fnt7x10);
 8000f8a:	8afa      	ldrh	r2, [r7, #22]
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <main+0x1c0>)
 8000f8e:	2128      	movs	r1, #40	; 0x28
 8000f90:	2055      	movs	r0, #85	; 0x55
 8000f92:	f002 f85d 	bl	8003050 <SH1106_printInt>
        SH1106_flush();
 8000f96:	f001 fa55 	bl	8002444 <SH1106_flush>
        HAL_Delay(500);
 8000f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9e:	f002 fc71 	bl	8003884 <HAL_Delay>
    while (!send_data(init_payload, PAYLOAD_LEN)) {
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	210a      	movs	r1, #10
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f8fa 	bl	80011a0 <send_data>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1d7      	bne.n	8000f68 <main+0xb8>
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        switch (screen.curr_screen) {
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <main+0x1d0>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d01d      	beq.n	8000ffc <main+0x14c>
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	dc26      	bgt.n	8001012 <main+0x162>
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <main+0x11e>
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d01f      	beq.n	800100c <main+0x15c>
				break;
			case MONITOR_SCREEN:
				show_monitor();
				break;
			default:
				break;
 8000fcc:	e021      	b.n	8001012 <main+0x162>
                load_list_menu_changes();
 8000fce:	f000 fac1 	bl	8001554 <load_list_menu_changes>
                switch (screen.kind.menu) {
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <main+0x1d0>)
 8000fd4:	785b      	ldrb	r3, [r3, #1]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d00c      	beq.n	8000ff4 <main+0x144>
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	dc1b      	bgt.n	8001016 <main+0x166>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <main+0x138>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <main+0x13e>
                break;
 8000fe6:	e016      	b.n	8001016 <main+0x166>
                        show_main_menu();
 8000fe8:	f000 fbd6 	bl	8001798 <show_main_menu>
                        break;
 8000fec:	e005      	b.n	8000ffa <main+0x14a>
                        show_target_menu();
 8000fee:	f000 fc21 	bl	8001834 <show_target_menu>
                        break;
 8000ff2:	e002      	b.n	8000ffa <main+0x14a>
                        show_mode_menu();
 8000ff4:	f000 fc7c 	bl	80018f0 <show_mode_menu>
                        break;
 8000ff8:	bf00      	nop
                break;
 8000ffa:	e00c      	b.n	8001016 <main+0x166>
                load_settings_changes();
 8000ffc:	f000 fe48 	bl	8001c90 <load_settings_changes>
                show_settings_adjust(screen.kind.setting);
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <main+0x1d0>)
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fcc3 	bl	8001990 <show_settings_adjust>
				break;
 800100a:	e005      	b.n	8001018 <main+0x168>
				show_monitor();
 800100c:	f000 fb6e 	bl	80016ec <show_monitor>
				break;
 8001010:	e002      	b.n	8001018 <main+0x168>
				break;
 8001012:	bf00      	nop
 8001014:	e000      	b.n	8001018 <main+0x168>
                break;
 8001016:	bf00      	nop
		}
		
		was_selected[screen.curr_screen] = rotary_peek_press();
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <main+0x1d0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461c      	mov	r4, r3
 800101e:	f000 fff3 	bl	8002008 <rotary_peek_press>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	f104 0318 	add.w	r3, r4, #24
 800102a:	443b      	add	r3, r7
 800102c:	f803 2c08 	strb.w	r2, [r3, #-8]
		
		if (was_selected[MENU_SCREEN]) {
 8001030:	7c3b      	ldrb	r3, [r7, #16]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <main+0x196>
			handle_nav_menu_select(menu_data.raw.selection);
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <main+0x1d4>)
 8001038:	789b      	ldrb	r3, [r3, #2]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fa14 	bl	8001468 <handle_nav_menu_select>
			was_selected[MENU_SCREEN] = false;
 8001040:	2300      	movs	r3, #0
 8001042:	743b      	strb	r3, [r7, #16]
 8001044:	e7b8      	b.n	8000fb8 <main+0x108>
		} else if (was_selected[MONITOR_SCREEN]) {
 8001046:	7c7b      	ldrb	r3, [r7, #17]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <main+0x1a6>
			handle_monitor_select();
 800104c:	f000 fa4c 	bl	80014e8 <handle_monitor_select>
			was_selected[MONITOR_SCREEN] = false;
 8001050:	2300      	movs	r3, #0
 8001052:	747b      	strb	r3, [r7, #17]
 8001054:	e7b0      	b.n	8000fb8 <main+0x108>
		} else if (was_selected[SETTINGS_SCREEN]) {
 8001056:	7cbb      	ldrb	r3, [r7, #18]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0ad      	beq.n	8000fb8 <main+0x108>
			handle_settings_select();
 800105c:	f000 fa56 	bl	800150c <handle_settings_select>
			was_selected[SETTINGS_SCREEN] = false;
 8001060:	2300      	movs	r3, #0
 8001062:	74bb      	strb	r3, [r7, #18]
        switch (screen.curr_screen) {
 8001064:	e7a8      	b.n	8000fb8 <main+0x108>
 8001066:	bf00      	nop
 8001068:	0800757c 	.word	0x0800757c
 800106c:	08007cf4 	.word	0x08007cf4
 8001070:	08007750 	.word	0x08007750
 8001074:	08007550 	.word	0x08007550
 8001078:	08007560 	.word	0x08007560
 800107c:	0800756c 	.word	0x0800756c
 8001080:	20000490 	.word	0x20000490
 8001084:	20000048 	.word	0x20000048

08001088 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	; 0x50
 800108c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001092:	2228      	movs	r2, #40	; 0x28
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f004 fd18 	bl	8005acc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c6:	2301      	movs	r3, #1
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fd34 	bl	8004b4c <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x66>
        Error_Handler();
 80010ea:	f000 ff23 	bl	8001f34 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010ee:	230f      	movs	r3, #15
 80010f0:	617b      	str	r3, [r7, #20]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fe:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2102      	movs	r1, #2
 800110a:	4618      	mov	r0, r3
 800110c:	f003 ffa0 	bl	8005050 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x92>
        Error_Handler();
 8001116:	f000 ff0d 	bl	8001f34 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800111a:	2302      	movs	r3, #2
 800111c:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800111e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001122:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f004 f916 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xae>
        Error_Handler();
 8001132:	f000 feff 	bl	8001f34 <Error_Handler>
    }
}
 8001136:	bf00      	nop
 8001138:	3750      	adds	r7, #80	; 0x50
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <nRF24_TX_ESB_setup>:

/* USER CODE BEGIN 4 */
void nRF24_TX_ESB_setup(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	//   - CRC scheme: 2 byte
	
	// The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)
	
	// Set RF channel9
	nRF24_SetRFChannel(40);
 8001144:	2028      	movs	r0, #40	; 0x28
 8001146:	f002 f9dc 	bl	8003502 <nRF24_SetRFChannel>
	
	// Set data rate
	nRF24_SetDataRate(nRF24_DR_2Mbps);
 800114a:	2008      	movs	r0, #8
 800114c:	f002 fa75 	bl	800363a <nRF24_SetDataRate>
	
	// Set CRC scheme
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8001150:	200c      	movs	r0, #12
 8001152:	f002 f9b5 	bl	80034c0 <nRF24_SetCRCScheme>
	
	// Set address width, its common for all pipes (RX and TX)
	nRF24_SetAddrWidth(3);
 8001156:	2003      	movs	r0, #3
 8001158:	f002 f9fc 	bl	8003554 <nRF24_SetAddrWidth>
	
	// Configure TX PIPE
	static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
	nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR); // program TX address
 800115c:	490f      	ldr	r1, [pc, #60]	; (800119c <nRF24_TX_ESB_setup+0x5c>)
 800115e:	2006      	movs	r0, #6
 8001160:	f002 fa06 	bl	8003570 <nRF24_SetAddr>
	nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR); // program address for pipe#0, must be same as TX (for Auto-ACK)
 8001164:	490d      	ldr	r1, [pc, #52]	; (800119c <nRF24_TX_ESB_setup+0x5c>)
 8001166:	2000      	movs	r0, #0
 8001168:	f002 fa02 	bl	8003570 <nRF24_SetAddr>
	
	// Set TX power (maximum)
	nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 800116c:	2006      	movs	r0, #6
 800116e:	f002 fa49 	bl	8003604 <nRF24_SetTXPower>
	
	// Configure auto retransmit: 10 retransmissions with pause of 2500s in between
	nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8001172:	210a      	movs	r1, #10
 8001174:	2009      	movs	r0, #9
 8001176:	f002 f9d2 	bl	800351e <nRF24_SetAutoRetr>
	
	// Enable Auto-ACK for pipe#0 (for ACK packets)
	nRF24_EnableAA(nRF24_PIPE0);
 800117a:	2000      	movs	r0, #0
 800117c:	f002 fa78 	bl	8003670 <nRF24_EnableAA>
	
	// Set operational mode (PTX == transmitter)
	nRF24_SetOperationalMode(nRF24_MODE_TX);
 8001180:	2000      	movs	r0, #0
 8001182:	f002 f952 	bl	800342a <nRF24_SetOperationalMode>
	
	// Clear any pending IRQ flags
	nRF24_ClearIRQFlags();
 8001186:	f002 fab9 	bl	80036fc <nRF24_ClearIRQFlags>
	
	// Enable DPL
	nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 800118a:	2001      	movs	r0, #1
 800118c:	f002 f96e 	bl	800346c <nRF24_SetDynamicPayloadLength>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 8001190:	2002      	movs	r0, #2
 8001192:	f002 f92b 	bl	80033ec <nRF24_SetPowerMode>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	0800820c 	.word	0x0800820c

080011a0 <send_data>:

bool send_data(uint8_t* nRF24_payload, uint8_t payload_length) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	
	nRF24_TXResult tx_res = nRF24_TX_ERROR;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
	uint8_t otx = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73bb      	strb	r3, [r7, #14]
	uint8_t otx_plos_cnt = 0; // lost packet count
 80011b4:	2300      	movs	r3, #0
 80011b6:	737b      	strb	r3, [r7, #13]
	uint8_t otx_arc_cnt = 0; // retransmit count
 80011b8:	2300      	movs	r3, #0
 80011ba:	733b      	strb	r3, [r7, #12]
	
	if (payload_length > 32) {
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	2b20      	cmp	r3, #32
 80011c0:	d901      	bls.n	80011c6 <send_data+0x26>
		return false;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e026      	b.n	8001214 <send_data+0x74>
	}
	
	
	// Transmit a packet
	tx_res = nRF24_TransmitPacket(nRF24_payload, payload_length);
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f002 fabc 	bl	8003748 <nRF24_TransmitPacket>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
	otx = nRF24_GetRetransmitCounters();
 80011d4:	f002 fa71 	bl	80036ba <nRF24_GetRetransmitCounters>
 80011d8:	4603      	mov	r3, r0
 80011da:	73bb      	strb	r3, [r7, #14]
	otx_plos_cnt = (otx & nRF24_MASK_PLOS_CNT) >> 4; // packets lost counter
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	737b      	strb	r3, [r7, #13]
	otx_arc_cnt = (otx & nRF24_MASK_ARC_CNT); // auto retransmissions counter
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	733b      	strb	r3, [r7, #12]
	
	HAL_Delay(10);
 80011ea:	200a      	movs	r0, #10
 80011ec:	f002 fb4a 	bl	8003884 <HAL_Delay>
	switch (tx_res) {
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d002      	beq.n	80011fc <send_data+0x5c>
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d002      	beq.n	8001200 <send_data+0x60>
			packets_lost += otx_plos_cnt;
			nRF24_ResetPLOS();
			break;
		case nRF24_TX_TIMEOUT:
		default:
			break;
 80011fa:	e00a      	b.n	8001212 <send_data+0x72>
			return true;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e009      	b.n	8001214 <send_data+0x74>
			packets_lost += otx_plos_cnt;
 8001200:	7b7a      	ldrb	r2, [r7, #13]
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <send_data+0x7c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <send_data+0x7c>)
 800120a:	6013      	str	r3, [r2, #0]
			nRF24_ResetPLOS();
 800120c:	f002 fa5d 	bl	80036ca <nRF24_ResetPLOS>
			break;
 8001210:	bf00      	nop
	}
	
	return false;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000464 	.word	0x20000464

08001220 <handle_list_menu_changes>:

static void handle_list_menu_changes(uint8_t max_index, void* current_selection, void* current_head) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	73fb      	strb	r3, [r7, #15]
	int8_t tmp_sel;
	
	tmp_sel = *(uint8_t*) current_selection;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	75fb      	strb	r3, [r7, #23]
	tmp_sel += rotary_pop_dir() == CCW ? -1 : 1;
 8001234:	f000 fea6 	bl	8001f84 <rotary_pop_dir>
 8001238:	4603      	mov	r3, r0
 800123a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123e:	d102      	bne.n	8001246 <handle_list_menu_changes+0x26>
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	e000      	b.n	8001248 <handle_list_menu_changes+0x28>
 8001246:	2301      	movs	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	4413      	add	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	75fb      	strb	r3, [r7, #23]
	if (tmp_sel >= max_index) {
 8001252:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	429a      	cmp	r2, r3
 800125a:	db04      	blt.n	8001266 <handle_list_menu_changes+0x46>
		tmp_sel = max_index - 1;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	3b01      	subs	r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	75fb      	strb	r3, [r7, #23]
 8001264:	e005      	b.n	8001272 <handle_list_menu_changes+0x52>
	} else if (tmp_sel < 0) {
 8001266:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800126a:	2b00      	cmp	r3, #0
 800126c:	da01      	bge.n	8001272 <handle_list_menu_changes+0x52>
		tmp_sel = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]
	}
	*(uint8_t*) current_selection = (uint8_t) tmp_sel;
 8001272:	7dfa      	ldrb	r2, [r7, #23]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	701a      	strb	r2, [r3, #0]
	
	if (tmp_sel >= (*(uint8_t*) current_head + MENU_SCREEN_ROWS)) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	1d5a      	adds	r2, r3, #5
 800127e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001282:	429a      	cmp	r2, r3
 8001284:	da06      	bge.n	8001294 <handle_list_menu_changes+0x74>
		(*(uint8_t*) current_head)++;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	701a      	strb	r2, [r3, #0]
	} else if (tmp_sel < *(uint8_t*) current_head) {
		(*(uint8_t*) current_head)--;
	}
}
 8001292:	e00b      	b.n	80012ac <handle_list_menu_changes+0x8c>
	} else if (tmp_sel < *(uint8_t*) current_head) {
 8001294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	4293      	cmp	r3, r2
 800129e:	da05      	bge.n	80012ac <handle_list_menu_changes+0x8c>
		(*(uint8_t*) current_head)--;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	701a      	strb	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <handle_settings_menu_changes>:

static void
handle_settings_menu_changes(void* settings_value, int32_t min_value, int32_t max_value, uint8_t decrement) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	70fb      	strb	r3, [r7, #3]
	int32_t tmp_val;
	
	tmp_val = *(int32_t*) settings_value;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	617b      	str	r3, [r7, #20]
	tmp_val += rotary_pop_dir() == CCW ? -decrement : decrement * 10;
 80012c8:	f000 fe5c 	bl	8001f84 <rotary_pop_dir>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d2:	d102      	bne.n	80012da <handle_settings_menu_changes+0x26>
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	425b      	negs	r3, r3
 80012d8:	e004      	b.n	80012e4 <handle_settings_menu_changes+0x30>
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	4413      	add	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]
	if (tmp_val > max_value) {
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd02      	ble.n	80012f8 <handle_settings_menu_changes+0x44>
		tmp_val = max_value;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e005      	b.n	8001304 <handle_settings_menu_changes+0x50>
	} else if (tmp_val < min_value) {
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	da01      	bge.n	8001304 <handle_settings_menu_changes+0x50>
		tmp_val = min_value;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	617b      	str	r3, [r7, #20]
	}
	*(int32_t*) settings_value = tmp_val;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <handle_menu_list_arrow>:

static void handle_menu_list_arrow(bool is_pressed, void* current_selection, void* current_head) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af02      	add	r7, sp, #8
 800131a:	4603      	mov	r3, r0
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	73fb      	strb	r3, [r7, #15]
	
	SH1106_drawBitmap(2 + (is_pressed * 4),
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	b2db      	uxtb	r3, r3
 8001328:	3302      	adds	r3, #2
 800132a:	b2d8      	uxtb	r0, r3
					  2 + (((*(uint8_t*) current_selection) - (*(uint8_t*) current_head)) * ROW_SPACE_PX),
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	781b      	ldrb	r3, [r3, #0]
	SH1106_drawBitmap(2 + (is_pressed * 4),
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4413      	add	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	3302      	adds	r3, #2
 8001344:	b2d9      	uxtb	r1, r3
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <handle_menu_list_arrow+0x48>)
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2307      	movs	r3, #7
 800134c:	2208      	movs	r2, #8
 800134e:	f001 fee9 	bl	8003124 <SH1106_drawBitmap>
					  CUSTOM_CHAR_W,
					  CUSTOM_CHAR_H, arrow);
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	080080f4 	.word	0x080080f4

08001360 <main_menu_select_handler>:

static void main_menu_select_handler(main_menu_selection_t selected) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	switch (selected) {
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	3b01      	subs	r3, #1
 800136e:	2b06      	cmp	r3, #6
 8001370:	d832      	bhi.n	80013d8 <main_menu_select_handler+0x78>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <main_menu_select_handler+0x18>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	08001395 	.word	0x08001395
 800137c:	0800139d 	.word	0x0800139d
 8001380:	080013bd 	.word	0x080013bd
 8001384:	080013a5 	.word	0x080013a5
 8001388:	080013ad 	.word	0x080013ad
 800138c:	080013b5 	.word	0x080013b5
 8001390:	080013cb 	.word	0x080013cb
		case DECLINATION:
			screen.kind.setting = DEC_SETTINGS;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <main_menu_select_handler+0x90>)
 8001396:	2201      	movs	r2, #1
 8001398:	705a      	strb	r2, [r3, #1]
			break;
 800139a:	e024      	b.n	80013e6 <main_menu_select_handler+0x86>
		case RIGHT_ASCENSION:
			screen.kind.setting = RA_SETTINGS;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <main_menu_select_handler+0x90>)
 800139e:	2202      	movs	r2, #2
 80013a0:	705a      	strb	r2, [r3, #1]
			break;
 80013a2:	e020      	b.n	80013e6 <main_menu_select_handler+0x86>
		case CONTRAST:
			screen.kind.setting = CONTRAST_SETTINGS;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <main_menu_select_handler+0x90>)
 80013a6:	2203      	movs	r2, #3
 80013a8:	705a      	strb	r2, [r3, #1]
			break;
 80013aa:	e01c      	b.n	80013e6 <main_menu_select_handler+0x86>
		case CONTRAST_TIME:
			screen.kind.setting = CONTRAST_TIME_SETTINGS;
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <main_menu_select_handler+0x90>)
 80013ae:	2204      	movs	r2, #4
 80013b0:	705a      	strb	r2, [r3, #1]
			break;
 80013b2:	e018      	b.n	80013e6 <main_menu_select_handler+0x86>
		case HEMISPHERE:
			screen.kind.setting = HEMISPHERE_SETTINGS;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <main_menu_select_handler+0x90>)
 80013b6:	2205      	movs	r2, #5
 80013b8:	705a      	strb	r2, [r3, #1]
			break;
 80013ba:	e014      	b.n	80013e6 <main_menu_select_handler+0x86>
		case TGT_SELECTION:
			screen.curr_screen = MENU_SCREEN;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <main_menu_select_handler+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
			screen.kind.menu = TARGET_MENU;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <main_menu_select_handler+0x90>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	705a      	strb	r2, [r3, #1]
			break;
 80013c8:	e00d      	b.n	80013e6 <main_menu_select_handler+0x86>
		case EQM_MODE:
			screen.curr_screen = MENU_SCREEN;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <main_menu_select_handler+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
			screen.kind.menu = EQM_MODE_MENU;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <main_menu_select_handler+0x90>)
 80013d2:	2202      	movs	r2, #2
 80013d4:	705a      	strb	r2, [r3, #1]
			break;
 80013d6:	e006      	b.n	80013e6 <main_menu_select_handler+0x86>
		case MONITOR:
		default:
			screen.curr_screen = MONITOR_SCREEN;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <main_menu_select_handler+0x90>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
			screen.kind.setting = NONE;
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <main_menu_select_handler+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	705a      	strb	r2, [r3, #1]
			break;
 80013e4:	bf00      	nop
	}
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	20000490 	.word	0x20000490

080013f4 <target_menu_select_handler>:

static void target_menu_select_handler(target_t selected) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b091      	sub	sp, #68	; 0x44
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	astro_target_t tgt;
	
	if (selected > _TARGET_AMOUNT) {
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b0b      	cmp	r3, #11
 8001402:	d816      	bhi.n	8001432 <target_menu_select_handler+0x3e>
		return;
	}
	
	tgt = astro_target_get(selected);
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fc05 	bl	8000c1c <astro_target_get>
	settings_values.RA = tgt.position.right_ascension;
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <target_menu_select_handler+0x48>)
 8001414:	f103 0410 	add.w	r4, r3, #16
 8001418:	f107 0320 	add.w	r3, r7, #32
 800141c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800141e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	settings_values.DEC = tgt.position.declination;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <target_menu_select_handler+0x48>)
 8001424:	461c      	mov	r4, r3
 8001426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800142a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001430:	e000      	b.n	8001434 <target_menu_select_handler+0x40>
		return;
 8001432:	bf00      	nop
}
 8001434:	3744      	adds	r7, #68	; 0x44
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	20000468 	.word	0x20000468

08001440 <mode_menu_select_handler>:

static void mode_menu_select_handler(eqm_mode_t select) {
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	
	if (select > _EQM_MODES_AMOUNT) {
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d804      	bhi.n	800145a <mode_menu_select_handler+0x1a>
		return;
	}
	
	settings_values.mode = select;
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <mode_menu_select_handler+0x24>)
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
 8001458:	e000      	b.n	800145c <mode_menu_select_handler+0x1c>
		return;
 800145a:	bf00      	nop
}
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000468 	.word	0x20000468

08001468 <handle_nav_menu_select>:

void handle_nav_menu_select(uint8_t current_selection) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	menu_data.raw.selection = 0;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <handle_nav_menu_select+0x78>)
 8001474:	2200      	movs	r2, #0
 8001476:	709a      	strb	r2, [r3, #2]
	menu_data.raw.head = 0;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <handle_nav_menu_select+0x78>)
 800147a:	2200      	movs	r2, #0
 800147c:	705a      	strb	r2, [r3, #1]
	
	switch (screen.kind.menu) {
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <handle_nav_menu_select+0x7c>)
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d019      	beq.n	80014ba <handle_nav_menu_select+0x52>
 8001486:	2b02      	cmp	r3, #2
 8001488:	dc22      	bgt.n	80014d0 <handle_nav_menu_select+0x68>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <handle_nav_menu_select+0x2c>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d008      	beq.n	80014a4 <handle_nav_menu_select+0x3c>
			screen.curr_screen = MONITOR_SCREEN;
			screen.kind.setting = NONE;
			mode_menu_select_handler((eqm_mode_t) current_selection);
			break;
		default:
			break;
 8001492:	e01d      	b.n	80014d0 <handle_nav_menu_select+0x68>
			screen.curr_screen = SETTINGS_SCREEN;
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <handle_nav_menu_select+0x7c>)
 8001496:	2202      	movs	r2, #2
 8001498:	701a      	strb	r2, [r3, #0]
			main_menu_select_handler((main_menu_selection_t) current_selection);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5f 	bl	8001360 <main_menu_select_handler>
			break;
 80014a2:	e016      	b.n	80014d2 <handle_nav_menu_select+0x6a>
			screen.curr_screen = MONITOR_SCREEN;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <handle_nav_menu_select+0x7c>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
			screen.kind.setting = NONE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <handle_nav_menu_select+0x7c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	705a      	strb	r2, [r3, #1]
			target_menu_select_handler((target_t) current_selection);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff9e 	bl	80013f4 <target_menu_select_handler>
			break;
 80014b8:	e00b      	b.n	80014d2 <handle_nav_menu_select+0x6a>
			screen.curr_screen = MONITOR_SCREEN;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <handle_nav_menu_select+0x7c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
			screen.kind.setting = NONE;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <handle_nav_menu_select+0x7c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	705a      	strb	r2, [r3, #1]
			mode_menu_select_handler((eqm_mode_t) current_selection);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ffb9 	bl	8001440 <mode_menu_select_handler>
			break;
 80014ce:	e000      	b.n	80014d2 <handle_nav_menu_select+0x6a>
			break;
 80014d0:	bf00      	nop
	}
	
	rotary_pop_press();
 80014d2:	f000 fd73 	bl	8001fbc <rotary_pop_press>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000048 	.word	0x20000048
 80014e4:	20000490 	.word	0x20000490

080014e8 <handle_monitor_select>:

void handle_monitor_select(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	if (rotary_pop_press()) {
 80014ec:	f000 fd66 	bl	8001fbc <rotary_pop_press>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <handle_monitor_select+0x1a>
		screen.curr_screen = MENU_SCREEN;
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <handle_monitor_select+0x20>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
		screen.kind.menu = MAIN_MENU;
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <handle_monitor_select+0x20>)
 80014fe:	2200      	movs	r2, #0
 8001500:	705a      	strb	r2, [r3, #1]
	}
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000490 	.word	0x20000490

0800150c <handle_settings_select>:

void handle_settings_select(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	switch (screen.kind.setting) {
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <handle_settings_select+0x44>)
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	3b01      	subs	r3, #1
 8001516:	2b04      	cmp	r3, #4
 8001518:	d80c      	bhi.n	8001534 <handle_settings_select+0x28>
 800151a:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <handle_settings_select+0x14>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	08001535 	.word	0x08001535
 8001524:	08001535 	.word	0x08001535
 8001528:	08001535 	.word	0x08001535
 800152c:	08001535 	.word	0x08001535
 8001530:	08001535 	.word	0x08001535
			break;
		case HEMISPHERE_SETTINGS:
			break;
		case NONE:
		default:
			break;
 8001534:	bf00      	nop
	}
	
	if (rotary_pop_press()) {
 8001536:	f000 fd41 	bl	8001fbc <rotary_pop_press>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <handle_settings_select+0x40>
		screen.curr_screen = MENU_SCREEN;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <handle_settings_select+0x44>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
		screen.kind.menu = MAIN_MENU;
 8001546:	4b02      	ldr	r3, [pc, #8]	; (8001550 <handle_settings_select+0x44>)
 8001548:	2200      	movs	r2, #0
 800154a:	705a      	strb	r2, [r3, #1]
	}
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000490 	.word	0x20000490

08001554 <load_list_menu_changes>:

void load_list_menu_changes(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
	uint8_t menu_size = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
	uint8_t* menu_selection = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
	uint8_t* menu_head = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
	
	switch (screen.kind.menu) {
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <load_list_menu_changes+0x74>)
 8001568:	785b      	ldrb	r3, [r3, #1]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d014      	beq.n	8001598 <load_list_menu_changes+0x44>
 800156e:	2b02      	cmp	r3, #2
 8001570:	dc19      	bgt.n	80015a6 <load_list_menu_changes+0x52>
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <load_list_menu_changes+0x28>
 8001576:	2b01      	cmp	r3, #1
 8001578:	d007      	beq.n	800158a <load_list_menu_changes+0x36>
			menu_size = _EQM_MODES_AMOUNT;
			menu_selection = (uint8_t*) &menu_data.mode_menu.selection;
			menu_head = (uint8_t*) &menu_data.mode_menu.head;
			break;
		default:
			break;
 800157a:	e014      	b.n	80015a6 <load_list_menu_changes+0x52>
			menu_size = _MAIN_MENU_AMOUNT;
 800157c:	2308      	movs	r3, #8
 800157e:	73fb      	strb	r3, [r7, #15]
			menu_selection = (uint8_t*) &menu_data.main_menu.selection;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <load_list_menu_changes+0x78>)
 8001582:	60bb      	str	r3, [r7, #8]
			menu_head = (uint8_t*) &menu_data.main_menu.head;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <load_list_menu_changes+0x7c>)
 8001586:	607b      	str	r3, [r7, #4]
			break;
 8001588:	e00e      	b.n	80015a8 <load_list_menu_changes+0x54>
			menu_size = _TARGET_AMOUNT;
 800158a:	230b      	movs	r3, #11
 800158c:	73fb      	strb	r3, [r7, #15]
			menu_selection = (uint8_t*) &menu_data.target_menu.selection;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <load_list_menu_changes+0x78>)
 8001590:	60bb      	str	r3, [r7, #8]
			menu_head = (uint8_t*) &menu_data.target_menu.head;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <load_list_menu_changes+0x7c>)
 8001594:	607b      	str	r3, [r7, #4]
			break;
 8001596:	e007      	b.n	80015a8 <load_list_menu_changes+0x54>
			menu_size = _EQM_MODES_AMOUNT;
 8001598:	2304      	movs	r3, #4
 800159a:	73fb      	strb	r3, [r7, #15]
			menu_selection = (uint8_t*) &menu_data.mode_menu.selection;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <load_list_menu_changes+0x78>)
 800159e:	60bb      	str	r3, [r7, #8]
			menu_head = (uint8_t*) &menu_data.mode_menu.head;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <load_list_menu_changes+0x7c>)
 80015a2:	607b      	str	r3, [r7, #4]
			break;
 80015a4:	e000      	b.n	80015a8 <load_list_menu_changes+0x54>
			break;
 80015a6:	bf00      	nop
	}
	
	if (rotary_peek_dir() != NOT_MOVING) {
 80015a8:	f000 fd22 	bl	8001ff0 <rotary_peek_dir>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <load_list_menu_changes+0x6a>
		handle_list_menu_changes(menu_size, menu_selection, menu_head);
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fe31 	bl	8001220 <handle_list_menu_changes>
	}
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000490 	.word	0x20000490
 80015cc:	2000004a 	.word	0x2000004a
 80015d0:	20000049 	.word	0x20000049

080015d4 <show_declination>:

static void show_declination(char* buffer, uint8_t x_offset, uint8_t y_offset) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
 80015e0:	4613      	mov	r3, r2
 80015e2:	70bb      	strb	r3, [r7, #2]
	uint8_t x_shift = x_offset;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	73fb      	strb	r3, [r7, #15]
	
	sprintf(buffer, "%c", (settings_values.DEC.decimal_degrees > 0) ? 'N' : 'S');
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <show_declination+0xb4>)
 80015ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	f7ff f9f7 	bl	80009e8 <__aeabi_dcmpgt>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <show_declination+0x30>
 8001600:	234e      	movs	r3, #78	; 0x4e
 8001602:	e000      	b.n	8001606 <show_declination+0x32>
 8001604:	2353      	movs	r3, #83	; 0x53
 8001606:	461a      	mov	r2, r3
 8001608:	4920      	ldr	r1, [pc, #128]	; (800168c <show_declination+0xb8>)
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f004 fa66 	bl	8005adc <siprintf>
	SH1106_printStr(SCR_W - 30, y_offset, buffer, fnt7x10);
 8001610:	78b9      	ldrb	r1, [r7, #2]
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <show_declination+0xbc>)
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	2062      	movs	r0, #98	; 0x62
 8001618:	f001 fcdc 	bl	8002fd4 <SH1106_printStr>
	sprintf(buffer, "%02d", settings_values.DEC.degrees);
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <show_declination+0xb4>)
 800161e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001622:	461a      	mov	r2, r3
 8001624:	491b      	ldr	r1, [pc, #108]	; (8001694 <show_declination+0xc0>)
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f004 fa58 	bl	8005adc <siprintf>
	x_shift += SH1106_printStr(x_offset, y_offset, buffer, fnt7x10);
 800162c:	78b9      	ldrb	r1, [r7, #2]
 800162e:	78f8      	ldrb	r0, [r7, #3]
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <show_declination+0xbc>)
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	f001 fcce 	bl	8002fd4 <SH1106_printStr>
 8001638:	4603      	mov	r3, r0
 800163a:	b2da      	uxtb	r2, r3
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	4413      	add	r3, r2
 8001640:	73fb      	strb	r3, [r7, #15]
	x_shift += SH1106_printStr(x_shift, y_offset - 3, "o", fnt7x10);
 8001642:	78bb      	ldrb	r3, [r7, #2]
 8001644:	3b03      	subs	r3, #3
 8001646:	b2d9      	uxtb	r1, r3
 8001648:	7bf8      	ldrb	r0, [r7, #15]
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <show_declination+0xbc>)
 800164c:	4a12      	ldr	r2, [pc, #72]	; (8001698 <show_declination+0xc4>)
 800164e:	f001 fcc1 	bl	8002fd4 <SH1106_printStr>
 8001652:	4603      	mov	r3, r0
 8001654:	b2da      	uxtb	r2, r3
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	4413      	add	r3, r2
 800165a:	73fb      	strb	r3, [r7, #15]
	sprintf(buffer, "%02d'%02d\"", settings_values.DEC.arc_minutes, settings_values.DEC.arc_seconds);
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <show_declination+0xb4>)
 800165e:	7a9b      	ldrb	r3, [r3, #10]
 8001660:	461a      	mov	r2, r3
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <show_declination+0xb4>)
 8001664:	7adb      	ldrb	r3, [r3, #11]
 8001666:	490d      	ldr	r1, [pc, #52]	; (800169c <show_declination+0xc8>)
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f004 fa37 	bl	8005adc <siprintf>
	SH1106_printStr(x_shift + 2, y_offset, buffer, fnt7x10);
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	3302      	adds	r3, #2
 8001672:	b2d8      	uxtb	r0, r3
 8001674:	78b9      	ldrb	r1, [r7, #2]
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <show_declination+0xbc>)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	f001 fcab 	bl	8002fd4 <SH1106_printStr>
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000468 	.word	0x20000468
 800168c:	08007588 	.word	0x08007588
 8001690:	08007750 	.word	0x08007750
 8001694:	0800758c 	.word	0x0800758c
 8001698:	08007594 	.word	0x08007594
 800169c:	08007598 	.word	0x08007598

080016a0 <show_right_ascension>:

static void show_right_ascension(char* buffer, uint8_t x_offset, uint8_t y_offset) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
 80016ac:	4613      	mov	r3, r2
 80016ae:	70bb      	strb	r3, [r7, #2]
	
	sprintf(buffer, "%02dh%02dm%02ds", settings_values.RA.hours, settings_values.RA.minutes,
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <show_right_ascension+0x40>)
 80016b2:	7e1b      	ldrb	r3, [r3, #24]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <show_right_ascension+0x40>)
 80016b8:	7e5b      	ldrb	r3, [r3, #25]
 80016ba:	4619      	mov	r1, r3
			settings_values.RA.seconds);
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <show_right_ascension+0x40>)
 80016be:	7e9b      	ldrb	r3, [r3, #26]
	sprintf(buffer, "%02dh%02dm%02ds", settings_values.RA.hours, settings_values.RA.minutes,
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	460b      	mov	r3, r1
 80016c4:	4907      	ldr	r1, [pc, #28]	; (80016e4 <show_right_ascension+0x44>)
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f004 fa08 	bl	8005adc <siprintf>
	SH1106_printStr(x_offset, y_offset, buffer, fnt7x10);
 80016cc:	78b9      	ldrb	r1, [r7, #2]
 80016ce:	78f8      	ldrb	r0, [r7, #3]
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <show_right_ascension+0x48>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	f001 fc7e 	bl	8002fd4 <SH1106_printStr>
	
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000468 	.word	0x20000468
 80016e4:	080075a4 	.word	0x080075a4
 80016e8:	08007750 	.word	0x08007750

080016ec <show_monitor>:
		[TRACKING_MODE] = mode_tracking,
		[GOTO_MODE]     = mode_go_to,
		[OFF_MODE]      = mode_off,
};

void show_monitor() {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af02      	add	r7, sp, #8
	static const uint8_t X_OFFSET = 20;
	static const uint8_t Y_OFFSET = 16;
	char buffer[11];
	
	SH1106_clear();
 80016f2:	f000 fe85 	bl	8002400 <SH1106_clear>
	
	SH1106_drawLine(18, 33, 108, 33);
 80016f6:	2321      	movs	r3, #33	; 0x21
 80016f8:	226c      	movs	r2, #108	; 0x6c
 80016fa:	2121      	movs	r1, #33	; 0x21
 80016fc:	2012      	movs	r0, #18
 80016fe:	f001 f8e5 	bl	80028cc <SH1106_drawLine>
	
	SH1106_printStr(X_OFFSET + 26, 4, "DEC.:", fnt5x7);
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <show_monitor+0x90>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	331a      	adds	r3, #26
 8001708:	b2d8      	uxtb	r0, r3
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <show_monitor+0x94>)
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <show_monitor+0x98>)
 800170e:	2104      	movs	r1, #4
 8001710:	f001 fc60 	bl	8002fd4 <SH1106_printStr>
	show_declination(buffer, X_OFFSET, Y_OFFSET);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <show_monitor+0x90>)
 8001716:	7819      	ldrb	r1, [r3, #0]
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <show_monitor+0x9c>)
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff58 	bl	80015d4 <show_declination>
	
	SH1106_printStr(X_OFFSET + 26, Y_OFFSET + 20, "R.A.:", fnt5x7);
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <show_monitor+0x90>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	331a      	adds	r3, #26
 800172a:	b2d8      	uxtb	r0, r3
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <show_monitor+0x9c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	3314      	adds	r3, #20
 8001732:	b2d9      	uxtb	r1, r3
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <show_monitor+0x94>)
 8001736:	4a15      	ldr	r2, [pc, #84]	; (800178c <show_monitor+0xa0>)
 8001738:	f001 fc4c 	bl	8002fd4 <SH1106_printStr>
	show_right_ascension(buffer, X_OFFSET + 5, Y_OFFSET + 32);
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <show_monitor+0x90>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3305      	adds	r3, #5
 8001742:	b2d9      	uxtb	r1, r3
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <show_monitor+0x9c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	3320      	adds	r3, #32
 800174a:	b2da      	uxtb	r2, r3
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ffa6 	bl	80016a0 <show_right_ascension>
	
	SH1106_drawBitmap(SCR_W - MODE_BITMAP_W - 1, 26, MODE_BITMAP_W, MODE_BITMAP_H,
					  mode_bitmaps[settings_values.mode]);
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <show_monitor+0xa4>)
 8001756:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800175a:	461a      	mov	r2, r3
	SH1106_drawBitmap(SCR_W - MODE_BITMAP_W - 1, 26, MODE_BITMAP_W, MODE_BITMAP_H,
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <show_monitor+0xa8>)
 800175e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2310      	movs	r3, #16
 8001766:	2210      	movs	r2, #16
 8001768:	211a      	movs	r1, #26
 800176a:	206f      	movs	r0, #111	; 0x6f
 800176c:	f001 fcda 	bl	8003124 <SH1106_drawBitmap>
	
	SH1106_flush();
 8001770:	f000 fe68 	bl	8002444 <SH1106_flush>
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	0800820f 	.word	0x0800820f
 8001780:	08007b10 	.word	0x08007b10
 8001784:	080075b4 	.word	0x080075b4
 8001788:	08008210 	.word	0x08008210
 800178c:	080075bc 	.word	0x080075bc
 8001790:	20000468 	.word	0x20000468
 8001794:	2000004c 	.word	0x2000004c

08001798 <show_main_menu>:

void show_main_menu() {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	uint8_t str_sel = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]
	bool is_pressed = rotary_peek_press();
 80017a2:	f000 fc31 	bl	8002008 <rotary_peek_press>
 80017a6:	4603      	mov	r3, r0
 80017a8:	717b      	strb	r3, [r7, #5]
	
	SH1106_clear();
 80017aa:	f000 fe29 	bl	8002400 <SH1106_clear>
	
	for (uint8_t current_str_y = 0; current_str_y < MENU_SCREEN_ROWS; current_str_y++) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	71bb      	strb	r3, [r7, #6]
 80017b2:	e01e      	b.n	80017f2 <show_main_menu+0x5a>
		if (str_sel + menu_data.main_menu.head == _MAIN_MENU_AMOUNT) {
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <show_main_menu+0x88>)
 80017b8:	7852      	ldrb	r2, [r2, #1]
 80017ba:	4413      	add	r3, r2
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d01c      	beq.n	80017fa <show_main_menu+0x62>
			break;
		}
		SH1106_printStr(4 + CUSTOM_CHAR_W, 2 + current_str_y * ROW_SPACE_PX,
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	461a      	mov	r2, r3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3302      	adds	r3, #2
 80017ce:	b2d9      	uxtb	r1, r3
						main_menu_strings[str_sel + menu_data.main_menu.head],
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <show_main_menu+0x88>)
 80017d4:	7852      	ldrb	r2, [r2, #1]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <show_main_menu+0x8c>)
 80017da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
		SH1106_printStr(4 + CUSTOM_CHAR_W, 2 + current_str_y * ROW_SPACE_PX,
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <show_main_menu+0x90>)
 80017e0:	200c      	movs	r0, #12
 80017e2:	f001 fbf7 	bl	8002fd4 <SH1106_printStr>
						fnt5x7);
		str_sel++;
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	3301      	adds	r3, #1
 80017ea:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_str_y = 0; current_str_y < MENU_SCREEN_ROWS; current_str_y++) {
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	3301      	adds	r3, #1
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d9dd      	bls.n	80017b4 <show_main_menu+0x1c>
 80017f8:	e000      	b.n	80017fc <show_main_menu+0x64>
			break;
 80017fa:	bf00      	nop
	}
	
	handle_menu_list_arrow(is_pressed, &menu_data.main_menu.selection,
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <show_main_menu+0x94>)
 8001800:	490b      	ldr	r1, [pc, #44]	; (8001830 <show_main_menu+0x98>)
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fd86 	bl	8001314 <handle_menu_list_arrow>
						   &menu_data.main_menu.head);
	
	SH1106_flush();
 8001808:	f000 fe1c 	bl	8002444 <SH1106_flush>
	if (is_pressed) {
 800180c:	797b      	ldrb	r3, [r7, #5]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <show_main_menu+0x80>
		HAL_Delay(SELECTION_ARROW_DELAY);
 8001812:	2014      	movs	r0, #20
 8001814:	f002 f836 	bl	8003884 <HAL_Delay>
	}
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000048 	.word	0x20000048
 8001824:	20000000 	.word	0x20000000
 8001828:	08007b10 	.word	0x08007b10
 800182c:	20000049 	.word	0x20000049
 8001830:	2000004a 	.word	0x2000004a

08001834 <show_target_menu>:

void show_target_menu() {
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b091      	sub	sp, #68	; 0x44
 8001838:	af00      	add	r7, sp, #0
	uint8_t str_sel = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bool is_pressed = rotary_peek_press();
 8001840:	f000 fbe2 	bl	8002008 <rotary_peek_press>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	
	SH1106_clear();
 800184a:	f000 fdd9 	bl	8002400 <SH1106_clear>
	
	for (uint8_t current_str_y = 0; current_str_y < MENU_SCREEN_ROWS; current_str_y++) {
 800184e:	2300      	movs	r3, #0
 8001850:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001854:	e02a      	b.n	80018ac <show_target_menu+0x78>
		if (str_sel + menu_data.target_menu.head == _TARGET_AMOUNT) {
 8001856:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800185a:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <show_target_menu+0xac>)
 800185c:	7852      	ldrb	r2, [r2, #1]
 800185e:	4413      	add	r3, r2
 8001860:	2b0b      	cmp	r3, #11
 8001862:	d028      	beq.n	80018b6 <show_target_menu+0x82>
			break;
		}
		SH1106_printStr(4 + CUSTOM_CHAR_W, 2 + current_str_y * ROW_SPACE_PX,
 8001864:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001868:	461a      	mov	r2, r3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4413      	add	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3302      	adds	r3, #2
 8001874:	b2dc      	uxtb	r4, r3
						astro_target_get(str_sel + menu_data.target_menu.head).name,
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <show_target_menu+0xac>)
 8001878:	785a      	ldrb	r2, [r3, #1]
 800187a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800187e:	4413      	add	r3, r2
 8001880:	b2da      	uxtb	r2, r3
 8001882:	463b      	mov	r3, r7
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f9c8 	bl	8000c1c <astro_target_get>
		SH1106_printStr(4 + CUSTOM_CHAR_W, 2 + current_str_y * ROW_SPACE_PX,
 800188c:	463a      	mov	r2, r7
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <show_target_menu+0xb0>)
 8001890:	4621      	mov	r1, r4
 8001892:	200c      	movs	r0, #12
 8001894:	f001 fb9e 	bl	8002fd4 <SH1106_printStr>
						fnt5x7);
		str_sel++;
 8001898:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800189c:	3301      	adds	r3, #1
 800189e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for (uint8_t current_str_y = 0; current_str_y < MENU_SCREEN_ROWS; current_str_y++) {
 80018a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018a6:	3301      	adds	r3, #1
 80018a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80018ac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d9d0      	bls.n	8001856 <show_target_menu+0x22>
 80018b4:	e000      	b.n	80018b8 <show_target_menu+0x84>
			break;
 80018b6:	bf00      	nop
	}
	
	handle_menu_list_arrow(is_pressed, &menu_data.target_menu.selection,
 80018b8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <show_target_menu+0xb4>)
 80018be:	490b      	ldr	r1, [pc, #44]	; (80018ec <show_target_menu+0xb8>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fd27 	bl	8001314 <handle_menu_list_arrow>
						   &menu_data.target_menu.head);
	
	SH1106_flush();
 80018c6:	f000 fdbd 	bl	8002444 <SH1106_flush>
	if (is_pressed) {
 80018ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <show_target_menu+0xa4>
		HAL_Delay(SELECTION_ARROW_DELAY);
 80018d2:	2014      	movs	r0, #20
 80018d4:	f001 ffd6 	bl	8003884 <HAL_Delay>
	}
}
 80018d8:	bf00      	nop
 80018da:	3744      	adds	r7, #68	; 0x44
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	20000048 	.word	0x20000048
 80018e4:	08007b10 	.word	0x08007b10
 80018e8:	20000049 	.word	0x20000049
 80018ec:	2000004a 	.word	0x2000004a

080018f0 <show_mode_menu>:

void show_mode_menu() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	uint8_t str_sel = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	71fb      	strb	r3, [r7, #7]
	bool is_pressed = rotary_peek_press();
 80018fa:	f000 fb85 	bl	8002008 <rotary_peek_press>
 80018fe:	4603      	mov	r3, r0
 8001900:	717b      	strb	r3, [r7, #5]
	
	SH1106_clear();
 8001902:	f000 fd7d 	bl	8002400 <SH1106_clear>
	
	for (uint8_t current_str_y = 0; current_str_y < MENU_SCREEN_ROWS; current_str_y++) {
 8001906:	2300      	movs	r3, #0
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	e01e      	b.n	800194a <show_mode_menu+0x5a>
		if (str_sel + menu_data.mode_menu.head == _EQM_MODES_AMOUNT) {
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <show_mode_menu+0x88>)
 8001910:	7852      	ldrb	r2, [r2, #1]
 8001912:	4413      	add	r3, r2
 8001914:	2b04      	cmp	r3, #4
 8001916:	d01c      	beq.n	8001952 <show_mode_menu+0x62>
			break;
		}
		SH1106_printStr(4 + CUSTOM_CHAR_W, 2 + current_str_y * ROW_SPACE_PX,
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	461a      	mov	r2, r3
 800191c:	0092      	lsls	r2, r2, #2
 800191e:	4413      	add	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3302      	adds	r3, #2
 8001926:	b2d9      	uxtb	r1, r3
						mode_menu_strings[str_sel + menu_data.mode_menu.head],
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <show_mode_menu+0x88>)
 800192c:	7852      	ldrb	r2, [r2, #1]
 800192e:	4413      	add	r3, r2
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <show_mode_menu+0x8c>)
 8001932:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
		SH1106_printStr(4 + CUSTOM_CHAR_W, 2 + current_str_y * ROW_SPACE_PX,
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <show_mode_menu+0x90>)
 8001938:	200c      	movs	r0, #12
 800193a:	f001 fb4b 	bl	8002fd4 <SH1106_printStr>
						fnt5x7);
		str_sel++;
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	3301      	adds	r3, #1
 8001942:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_str_y = 0; current_str_y < MENU_SCREEN_ROWS; current_str_y++) {
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	3301      	adds	r3, #1
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	2b05      	cmp	r3, #5
 800194e:	d9dd      	bls.n	800190c <show_mode_menu+0x1c>
 8001950:	e000      	b.n	8001954 <show_mode_menu+0x64>
			break;
 8001952:	bf00      	nop
	}
	
	handle_menu_list_arrow(is_pressed, &menu_data.mode_menu.selection,
 8001954:	797b      	ldrb	r3, [r7, #5]
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <show_mode_menu+0x94>)
 8001958:	490b      	ldr	r1, [pc, #44]	; (8001988 <show_mode_menu+0x98>)
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fcda 	bl	8001314 <handle_menu_list_arrow>
						   &menu_data.mode_menu.head);
	
	SH1106_flush();
 8001960:	f000 fd70 	bl	8002444 <SH1106_flush>
	if (is_pressed) {
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <show_mode_menu+0x80>
		HAL_Delay(SELECTION_ARROW_DELAY);
 800196a:	2014      	movs	r0, #20
 800196c:	f001 ff8a 	bl	8003884 <HAL_Delay>
	}
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000048 	.word	0x20000048
 800197c:	20000038 	.word	0x20000038
 8001980:	08007b10 	.word	0x08007b10
 8001984:	20000049 	.word	0x20000049
 8001988:	2000004a 	.word	0x2000004a
 800198c:	00000000 	.word	0x00000000

08001990 <show_settings_adjust>:

void show_settings_adjust(settings_t setting) {
 8001990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001994:	b08f      	sub	sp, #60	; 0x3c
 8001996:	af02      	add	r7, sp, #8
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
	static const uint8_t CENTER_X = 64;
	static const uint8_t CENTER_Y = 44;
	static const uint8_t RADIUS = 10;
	static const uint8_t INNER_RADIUS = RADIUS - 3;
	static const uint8_t OUTER_RADIUS = RADIUS + 4;
	const double dec_in_radians = settings_values.DEC.decimal_degrees * DEG_TO_RAD_CONST;
 800199c:	4baa      	ldr	r3, [pc, #680]	; (8001c48 <show_settings_adjust+0x2b8>)
 800199e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a2:	a3a7      	add	r3, pc, #668	; (adr r3, 8001c40 <show_settings_adjust+0x2b0>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fd8e 	bl	80004c8 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double curr_cos;
	double curr_sin;
	char buffer[11] = {0};
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	f8c3 2003 	str.w	r2, [r3, #3]
	
	SH1106_clear();
 80019c4:	f000 fd1c 	bl	8002400 <SH1106_clear>
	
	SH1106_printStr(2, 2, setting_strings[setting], fnt5x7);
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4aa0      	ldr	r2, [pc, #640]	; (8001c4c <show_settings_adjust+0x2bc>)
 80019cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019d0:	4b9f      	ldr	r3, [pc, #636]	; (8001c50 <show_settings_adjust+0x2c0>)
 80019d2:	2102      	movs	r1, #2
 80019d4:	2002      	movs	r0, #2
 80019d6:	f001 fafd 	bl	8002fd4 <SH1106_printStr>
	SH1106_drawHLine(0, SCR_W - 20, 11);
 80019da:	220b      	movs	r2, #11
 80019dc:	216c      	movs	r1, #108	; 0x6c
 80019de:	2000      	movs	r0, #0
 80019e0:	f000 ff00 	bl	80027e4 <SH1106_drawHLine>
	
	switch (setting) {
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	f200 8120 	bhi.w	8001c2e <show_settings_adjust+0x29e>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <show_settings_adjust+0x64>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a09 	.word	0x08001a09
 80019f8:	08001b4d 	.word	0x08001b4d
 80019fc:	08001b7f 	.word	0x08001b7f
 8001a00:	08001bab 	.word	0x08001bab
 8001a04:	08001bd7 	.word	0x08001bd7
		
		case DEC_SETTINGS:
			show_declination(buffer, X_OFFSET, Y_OFFSET - 10);
 8001a08:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <show_settings_adjust+0x2c4>)
 8001a0a:	7819      	ldrb	r1, [r3, #0]
 8001a0c:	4b92      	ldr	r3, [pc, #584]	; (8001c58 <show_settings_adjust+0x2c8>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3b0a      	subs	r3, #10
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fddb 	bl	80015d4 <show_declination>
			
			SH1106_drawCircle(CENTER_X, CENTER_Y, RADIUS);
 8001a1e:	4b8f      	ldr	r3, [pc, #572]	; (8001c5c <show_settings_adjust+0x2cc>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	4a8e      	ldr	r2, [pc, #568]	; (8001c60 <show_settings_adjust+0x2d0>)
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	b211      	sxth	r1, r2
 8001a2a:	4a8e      	ldr	r2, [pc, #568]	; (8001c64 <show_settings_adjust+0x2d4>)
 8001a2c:	7812      	ldrb	r2, [r2, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 f81e 	bl	8002a70 <SH1106_drawCircle>
			curr_cos = cos(dec_in_radians);
 8001a34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a38:	f004 fcbc 	bl	80063b4 <cos>
 8001a3c:	e9c7 0108 	strd	r0, r1, [r7, #32]
			curr_sin = sin(dec_in_radians);
 8001a40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a44:	f004 fcfc 	bl	8006440 <sin>
 8001a48:	e9c7 0106 	strd	r0, r1, [r7, #24]
			SH1106_drawLine(CENTER_X + (curr_cos * INNER_RADIUS), CENTER_Y + (curr_sin * INNER_RADIUS),
 8001a4c:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <show_settings_adjust+0x2cc>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fccf 	bl	80003f4 <__aeabi_i2d>
 8001a56:	4604      	mov	r4, r0
 8001a58:	460d      	mov	r5, r1
 8001a5a:	4b83      	ldr	r3, [pc, #524]	; (8001c68 <show_settings_adjust+0x2d8>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fcc8 	bl	80003f4 <__aeabi_i2d>
 8001a64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a68:	f7fe fd2e 	bl	80004c8 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fb72 	bl	800015c <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7fe ffbc 	bl	80009fc <__aeabi_d2iz>
 8001a84:	4603      	mov	r3, r0
 8001a86:	b21e      	sxth	r6, r3
 8001a88:	4b75      	ldr	r3, [pc, #468]	; (8001c60 <show_settings_adjust+0x2d0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fcb1 	bl	80003f4 <__aeabi_i2d>
 8001a92:	4604      	mov	r4, r0
 8001a94:	460d      	mov	r5, r1
 8001a96:	4b74      	ldr	r3, [pc, #464]	; (8001c68 <show_settings_adjust+0x2d8>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fcaa 	bl	80003f4 <__aeabi_i2d>
 8001aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa4:	f7fe fd10 	bl	80004c8 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7fe fb54 	bl	800015c <__adddf3>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7fe ff9e 	bl	80009fc <__aeabi_d2iz>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	fa0f f883 	sxth.w	r8, r3
							CENTER_X + (curr_cos * OUTER_RADIUS), CENTER_Y + (curr_sin * OUTER_RADIUS));
 8001ac6:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <show_settings_adjust+0x2cc>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fc92 	bl	80003f4 <__aeabi_i2d>
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	460d      	mov	r5, r1
 8001ad4:	4b65      	ldr	r3, [pc, #404]	; (8001c6c <show_settings_adjust+0x2dc>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fc8b 	bl	80003f4 <__aeabi_i2d>
 8001ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ae2:	f7fe fcf1 	bl	80004c8 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4620      	mov	r0, r4
 8001aec:	4629      	mov	r1, r5
 8001aee:	f7fe fb35 	bl	800015c <__adddf3>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
			SH1106_drawLine(CENTER_X + (curr_cos * INNER_RADIUS), CENTER_Y + (curr_sin * INNER_RADIUS),
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7fe ff7f 	bl	80009fc <__aeabi_d2iz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	fa0f f983 	sxth.w	r9, r3
							CENTER_X + (curr_cos * OUTER_RADIUS), CENTER_Y + (curr_sin * OUTER_RADIUS));
 8001b04:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <show_settings_adjust+0x2d0>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fc73 	bl	80003f4 <__aeabi_i2d>
 8001b0e:	4604      	mov	r4, r0
 8001b10:	460d      	mov	r5, r1
 8001b12:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <show_settings_adjust+0x2dc>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fc6c 	bl	80003f4 <__aeabi_i2d>
 8001b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b20:	f7fe fcd2 	bl	80004c8 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	f7fe fb16 	bl	800015c <__adddf3>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
			SH1106_drawLine(CENTER_X + (curr_cos * INNER_RADIUS), CENTER_Y + (curr_sin * INNER_RADIUS),
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7fe ff60 	bl	80009fc <__aeabi_d2iz>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	464a      	mov	r2, r9
 8001b42:	4641      	mov	r1, r8
 8001b44:	4630      	mov	r0, r6
 8001b46:	f000 fec1 	bl	80028cc <SH1106_drawLine>
			break;
 8001b4a:	e071      	b.n	8001c30 <show_settings_adjust+0x2a0>
		case RA_SETTINGS:
			show_right_ascension(buffer, X_OFFSET + 6, Y_OFFSET - 10);
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <show_settings_adjust+0x2c4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3306      	adds	r3, #6
 8001b52:	b2d9      	uxtb	r1, r3
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <show_settings_adjust+0x2c8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3b0a      	subs	r3, #10
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fd9d 	bl	80016a0 <show_right_ascension>
			SH1106_drawCircle(CENTER_X, CENTER_Y, RADIUS); //TODO: colocar indicador de visibilidade
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <show_settings_adjust+0x2cc>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <show_settings_adjust+0x2d0>)
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	b211      	sxth	r1, r2
 8001b72:	4a3c      	ldr	r2, [pc, #240]	; (8001c64 <show_settings_adjust+0x2d4>)
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 ff7a 	bl	8002a70 <SH1106_drawCircle>
			break;
 8001b7c:	e058      	b.n	8001c30 <show_settings_adjust+0x2a0>
		case CONTRAST_SETTINGS:
			sprintf(buffer, "%d%%", settings_values.screen_contrast);
 8001b7e:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <show_settings_adjust+0x2b8>)
 8001b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b84:	461a      	mov	r2, r3
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4939      	ldr	r1, [pc, #228]	; (8001c70 <show_settings_adjust+0x2e0>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 ffa5 	bl	8005adc <siprintf>
			SH1106_printStr(X_OFFSET + 26, Y_OFFSET, buffer, fnt7x10);
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <show_settings_adjust+0x2c4>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	331a      	adds	r3, #26
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <show_settings_adjust+0x2c8>)
 8001b9c:	7819      	ldrb	r1, [r3, #0]
 8001b9e:	f107 020c 	add.w	r2, r7, #12
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <show_settings_adjust+0x2e4>)
 8001ba4:	f001 fa16 	bl	8002fd4 <SH1106_printStr>
			break;
 8001ba8:	e042      	b.n	8001c30 <show_settings_adjust+0x2a0>
		case CONTRAST_TIME_SETTINGS:
			sprintf(buffer, "%ds", settings_values.screen_contrast_time);
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <show_settings_adjust+0x2b8>)
 8001bac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	4930      	ldr	r1, [pc, #192]	; (8001c78 <show_settings_adjust+0x2e8>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 ff8f 	bl	8005adc <siprintf>
			SH1106_printStr(X_OFFSET + 26, Y_OFFSET, buffer, fnt7x10);
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <show_settings_adjust+0x2c4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	331a      	adds	r3, #26
 8001bc4:	b2d8      	uxtb	r0, r3
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <show_settings_adjust+0x2c8>)
 8001bc8:	7819      	ldrb	r1, [r3, #0]
 8001bca:	f107 020c 	add.w	r2, r7, #12
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <show_settings_adjust+0x2e4>)
 8001bd0:	f001 fa00 	bl	8002fd4 <SH1106_printStr>
			break;
 8001bd4:	e02c      	b.n	8001c30 <show_settings_adjust+0x2a0>
		case HEMISPHERE_SETTINGS:
			sprintf(buffer, "%s", (settings_values.hemisphere == NORTH) ? "North" : "South");
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <show_settings_adjust+0x2b8>)
 8001bd8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <show_settings_adjust+0x254>
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <show_settings_adjust+0x2ec>)
 8001be2:	e000      	b.n	8001be6 <show_settings_adjust+0x256>
 8001be4:	4a26      	ldr	r2, [pc, #152]	; (8001c80 <show_settings_adjust+0x2f0>)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4926      	ldr	r1, [pc, #152]	; (8001c84 <show_settings_adjust+0x2f4>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 ff75 	bl	8005adc <siprintf>
			SH1106_printStr(X_OFFSET + 6, Y_OFFSET, buffer, fnt7x10);
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <show_settings_adjust+0x2c4>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	b2d8      	uxtb	r0, r3
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <show_settings_adjust+0x2c8>)
 8001bfc:	7819      	ldrb	r1, [r3, #0]
 8001bfe:	f107 020c 	add.w	r2, r7, #12
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <show_settings_adjust+0x2e4>)
 8001c04:	f001 f9e6 	bl	8002fd4 <SH1106_printStr>
			SH1106_drawBitmap(80, Y_OFFSET - 6, SETTINGS_BITMAP_W, SETTINGS_BITMAP_H,
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <show_settings_adjust+0x2c8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	3b06      	subs	r3, #6
 8001c0e:	b2d9      	uxtb	r1, r3
							  settings_values.hemisphere == NORTH ? north_hemisphere : south_hemisphere);
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <show_settings_adjust+0x2b8>)
 8001c12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
			SH1106_drawBitmap(80, Y_OFFSET - 6, SETTINGS_BITMAP_W, SETTINGS_BITMAP_H,
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <show_settings_adjust+0x28e>
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <show_settings_adjust+0x2f8>)
 8001c1c:	e000      	b.n	8001c20 <show_settings_adjust+0x290>
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <show_settings_adjust+0x2fc>)
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2318      	movs	r3, #24
 8001c24:	2218      	movs	r2, #24
 8001c26:	2050      	movs	r0, #80	; 0x50
 8001c28:	f001 fa7c 	bl	8003124 <SH1106_drawBitmap>
			break;
 8001c2c:	e000      	b.n	8001c30 <show_settings_adjust+0x2a0>
		case NONE:
		default:
			break;
 8001c2e:	bf00      	nop
	}
	
	SH1106_flush();
 8001c30:	f000 fc08 	bl	8002444 <SH1106_flush>
}
 8001c34:	bf00      	nop
 8001c36:	3734      	adds	r7, #52	; 0x34
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c3e:	bf00      	nop
 8001c40:	a2529d39 	.word	0xa2529d39
 8001c44:	3f91df46 	.word	0x3f91df46
 8001c48:	20000468 	.word	0x20000468
 8001c4c:	20000020 	.word	0x20000020
 8001c50:	08007b10 	.word	0x08007b10
 8001c54:	08008211 	.word	0x08008211
 8001c58:	08008212 	.word	0x08008212
 8001c5c:	08008213 	.word	0x08008213
 8001c60:	08008214 	.word	0x08008214
 8001c64:	08008215 	.word	0x08008215
 8001c68:	08008216 	.word	0x08008216
 8001c6c:	08008217 	.word	0x08008217
 8001c70:	080075c4 	.word	0x080075c4
 8001c74:	08007750 	.word	0x08007750
 8001c78:	080075cc 	.word	0x080075cc
 8001c7c:	080075d0 	.word	0x080075d0
 8001c80:	080075d8 	.word	0x080075d8
 8001c84:	080075e0 	.word	0x080075e0
 8001c88:	08008144 	.word	0x08008144
 8001c8c:	080080fc 	.word	0x080080fc

08001c90 <load_settings_changes>:

void load_settings_changes(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
	int32_t min;
	int32_t max;
	uint8_t decrement;
	int32_t tmp_value;
	void* setting = NULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
	
	
	switch (screen.kind.setting) {
 8001c9a:	4b99      	ldr	r3, [pc, #612]	; (8001f00 <load_settings_changes+0x270>)
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	f200 8120 	bhi.w	8001ee6 <load_settings_changes+0x256>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <load_settings_changes+0x1c>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001cc1 	.word	0x08001cc1
 8001cb0:	08001cf3 	.word	0x08001cf3
 8001cb4:	08001d25 	.word	0x08001d25
 8001cb8:	08001d3f 	.word	0x08001d3f
 8001cbc:	08001d59 	.word	0x08001d59
		
		case DEC_SETTINGS:
			setting = &settings_values.DEC;
 8001cc0:	4b90      	ldr	r3, [pc, #576]	; (8001f04 <load_settings_changes+0x274>)
 8001cc2:	60bb      	str	r3, [r7, #8]
			min = -90 * 3600;
 8001cc4:	4b90      	ldr	r3, [pc, #576]	; (8001f08 <load_settings_changes+0x278>)
 8001cc6:	617b      	str	r3, [r7, #20]
			max = 90 * 3600;
 8001cc8:	4b90      	ldr	r3, [pc, #576]	; (8001f0c <load_settings_changes+0x27c>)
 8001cca:	613b      	str	r3, [r7, #16]
			decrement = 10;
 8001ccc:	230a      	movs	r3, #10
 8001cce:	73fb      	strb	r3, [r7, #15]
			tmp_value = settings_values.DEC.decimal_degrees * 3600;
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <load_settings_changes+0x274>)
 8001cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd6:	a388      	add	r3, pc, #544	; (adr r3, 8001ef8 <load_settings_changes+0x268>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fbf4 	bl	80004c8 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7fe fe88 	bl	80009fc <__aeabi_d2iz>
 8001cec:	4603      	mov	r3, r0
 8001cee:	607b      	str	r3, [r7, #4]
			break;
 8001cf0:	e03f      	b.n	8001d72 <load_settings_changes+0xe2>
		case RA_SETTINGS:
			setting = &settings_values.RA;
 8001cf2:	4b87      	ldr	r3, [pc, #540]	; (8001f10 <load_settings_changes+0x280>)
 8001cf4:	60bb      	str	r3, [r7, #8]
			min = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
			max = (24 * 3600) - 1;
 8001cfa:	4b86      	ldr	r3, [pc, #536]	; (8001f14 <load_settings_changes+0x284>)
 8001cfc:	613b      	str	r3, [r7, #16]
			decrement = 10;
 8001cfe:	230a      	movs	r3, #10
 8001d00:	73fb      	strb	r3, [r7, #15]
			tmp_value = settings_values.RA.decimal_hours * 3600;
 8001d02:	4b80      	ldr	r3, [pc, #512]	; (8001f04 <load_settings_changes+0x274>)
 8001d04:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d08:	a37b      	add	r3, pc, #492	; (adr r3, 8001ef8 <load_settings_changes+0x268>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fbdb 	bl	80004c8 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe fe6f 	bl	80009fc <__aeabi_d2iz>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	607b      	str	r3, [r7, #4]
			break;
 8001d22:	e026      	b.n	8001d72 <load_settings_changes+0xe2>
		case CONTRAST_SETTINGS:
			setting = &settings_values.screen_contrast;
 8001d24:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <load_settings_changes+0x288>)
 8001d26:	60bb      	str	r3, [r7, #8]
			min = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
			max = 100;
 8001d2c:	2364      	movs	r3, #100	; 0x64
 8001d2e:	613b      	str	r3, [r7, #16]
			decrement = 5;
 8001d30:	2305      	movs	r3, #5
 8001d32:	73fb      	strb	r3, [r7, #15]
			tmp_value = settings_values.screen_contrast;
 8001d34:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <load_settings_changes+0x274>)
 8001d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d3a:	607b      	str	r3, [r7, #4]
			break;
 8001d3c:	e019      	b.n	8001d72 <load_settings_changes+0xe2>
		case CONTRAST_TIME_SETTINGS:
			setting = &settings_values.screen_contrast_time;
 8001d3e:	4b77      	ldr	r3, [pc, #476]	; (8001f1c <load_settings_changes+0x28c>)
 8001d40:	60bb      	str	r3, [r7, #8]
			min = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
			max = 255;
 8001d46:	23ff      	movs	r3, #255	; 0xff
 8001d48:	613b      	str	r3, [r7, #16]
			decrement = 5;
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	73fb      	strb	r3, [r7, #15]
			tmp_value = settings_values.screen_contrast_time;
 8001d4e:	4b6d      	ldr	r3, [pc, #436]	; (8001f04 <load_settings_changes+0x274>)
 8001d50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d54:	607b      	str	r3, [r7, #4]
			break;
 8001d56:	e00c      	b.n	8001d72 <load_settings_changes+0xe2>
		case HEMISPHERE_SETTINGS:
			setting = &settings_values.hemisphere;
 8001d58:	4b71      	ldr	r3, [pc, #452]	; (8001f20 <load_settings_changes+0x290>)
 8001d5a:	60bb      	str	r3, [r7, #8]
			min = NORTH;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
			max = SOUTH;
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
			decrement = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
			tmp_value = settings_values.hemisphere;
 8001d68:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <load_settings_changes+0x274>)
 8001d6a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d6e:	607b      	str	r3, [r7, #4]
			break;
 8001d70:	bf00      	nop
		case NONE:
		default:
			return;
	}
	
	if (rotary_peek_dir() != NOT_MOVING) {
 8001d72:	f000 f93d 	bl	8001ff0 <rotary_peek_dir>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80b6 	beq.w	8001eea <load_settings_changes+0x25a>
		handle_settings_menu_changes(&tmp_value, min, max, decrement);
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	1d38      	adds	r0, r7, #4
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	6979      	ldr	r1, [r7, #20]
 8001d86:	f7ff fa95 	bl	80012b4 <handle_settings_menu_changes>
		switch (screen.kind.setting) {
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <load_settings_changes+0x270>)
 8001d8c:	785b      	ldrb	r3, [r3, #1]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d002      	beq.n	8001d98 <load_settings_changes+0x108>
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d052      	beq.n	8001e3c <load_settings_changes+0x1ac>
 8001d96:	e0a2      	b.n	8001ede <load_settings_changes+0x24e>
			case DEC_SETTINGS:
				((angle_t*) setting)->decimal_degrees = tmp_value / 3600.0;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb2a 	bl	80003f4 <__aeabi_i2d>
 8001da0:	a355      	add	r3, pc, #340	; (adr r3, 8001ef8 <load_settings_changes+0x268>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fcb9 	bl	800071c <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	e9c1 2300 	strd	r2, r3, [r1]
				tmp_value = tmp_value >= 0 ? tmp_value : -tmp_value; //Correcting signedness;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bfb8      	it	lt
 8001dba:	425b      	neglt	r3, r3
 8001dbc:	607b      	str	r3, [r7, #4]
				((angle_t*) setting)->degrees = (int16_t) ((tmp_value / 3600) % 360);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a58      	ldr	r2, [pc, #352]	; (8001f24 <load_settings_changes+0x294>)
 8001dc2:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc6:	441a      	add	r2, r3
 8001dc8:	12d2      	asrs	r2, r2, #11
 8001dca:	17db      	asrs	r3, r3, #31
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <load_settings_changes+0x298>)
 8001dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd4:	441a      	add	r2, r3
 8001dd6:	1211      	asrs	r1, r2, #8
 8001dd8:	17da      	asrs	r2, r3, #31
 8001dda:	1a8a      	subs	r2, r1, r2
 8001ddc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001de0:	fb01 f202 	mul.w	r2, r1, r2
 8001de4:	1a9a      	subs	r2, r3, r2
 8001de6:	b212      	sxth	r2, r2
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	811a      	strh	r2, [r3, #8]
				((angle_t*) setting)->arc_minutes = (tmp_value / 60) % 60;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <load_settings_changes+0x29c>)
 8001df0:	fb82 1203 	smull	r1, r2, r2, r3
 8001df4:	441a      	add	r2, r3
 8001df6:	1152      	asrs	r2, r2, #5
 8001df8:	17db      	asrs	r3, r3, #31
 8001dfa:	1ad2      	subs	r2, r2, r3
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <load_settings_changes+0x29c>)
 8001dfe:	fb83 1302 	smull	r1, r3, r3, r2
 8001e02:	4413      	add	r3, r2
 8001e04:	1159      	asrs	r1, r3, #5
 8001e06:	17d3      	asrs	r3, r2, #31
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a5b      	subs	r3, r3, r1
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	1ad1      	subs	r1, r2, r3
 8001e14:	b2ca      	uxtb	r2, r1
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	729a      	strb	r2, [r3, #10]
				((angle_t*) setting)->arc_seconds = tmp_value % 60;
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <load_settings_changes+0x29c>)
 8001e1e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e22:	4413      	add	r3, r2
 8001e24:	1159      	asrs	r1, r3, #5
 8001e26:	17d3      	asrs	r3, r2, #31
 8001e28:	1ac9      	subs	r1, r1, r3
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	1a5b      	subs	r3, r3, r1
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	1ad1      	subs	r1, r2, r3
 8001e34:	b2ca      	uxtb	r2, r1
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	72da      	strb	r2, [r3, #11]
				break;
 8001e3a:	e057      	b.n	8001eec <load_settings_changes+0x25c>
			case RA_SETTINGS:
				((time__t*) setting)->decimal_hours = tmp_value / 3600.0;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fad8 	bl	80003f4 <__aeabi_i2d>
 8001e44:	a32c      	add	r3, pc, #176	; (adr r3, 8001ef8 <load_settings_changes+0x268>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fc67 	bl	800071c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	e9c1 2300 	strd	r2, r3, [r1]
				tmp_value = tmp_value >= 0 ? tmp_value : -tmp_value; //Correcting signedness;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bfb8      	it	lt
 8001e5e:	425b      	neglt	r3, r3
 8001e60:	607b      	str	r3, [r7, #4]
				((time__t*) setting)->hours = (tmp_value / 3600) % 24;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2f      	ldr	r2, [pc, #188]	; (8001f24 <load_settings_changes+0x294>)
 8001e66:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6a:	441a      	add	r2, r3
 8001e6c:	12d2      	asrs	r2, r2, #11
 8001e6e:	17db      	asrs	r3, r3, #31
 8001e70:	1ad2      	subs	r2, r2, r3
 8001e72:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <load_settings_changes+0x2a0>)
 8001e74:	fb83 1302 	smull	r1, r3, r3, r2
 8001e78:	1099      	asrs	r1, r3, #2
 8001e7a:	17d3      	asrs	r3, r2, #31
 8001e7c:	1ac9      	subs	r1, r1, r3
 8001e7e:	460b      	mov	r3, r1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	440b      	add	r3, r1
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1ad1      	subs	r1, r2, r3
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	721a      	strb	r2, [r3, #8]
				((time__t*) setting)->minutes = (tmp_value / 60) % 60;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <load_settings_changes+0x29c>)
 8001e92:	fb82 1203 	smull	r1, r2, r2, r3
 8001e96:	441a      	add	r2, r3
 8001e98:	1152      	asrs	r2, r2, #5
 8001e9a:	17db      	asrs	r3, r3, #31
 8001e9c:	1ad2      	subs	r2, r2, r3
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <load_settings_changes+0x29c>)
 8001ea0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	1159      	asrs	r1, r3, #5
 8001ea8:	17d3      	asrs	r3, r2, #31
 8001eaa:	1ac9      	subs	r1, r1, r3
 8001eac:	460b      	mov	r3, r1
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a5b      	subs	r3, r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	1ad1      	subs	r1, r2, r3
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	725a      	strb	r2, [r3, #9]
				((time__t*) setting)->seconds = tmp_value % 60;
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <load_settings_changes+0x29c>)
 8001ec0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	1159      	asrs	r1, r3, #5
 8001ec8:	17d3      	asrs	r3, r2, #31
 8001eca:	1ac9      	subs	r1, r1, r3
 8001ecc:	460b      	mov	r3, r1
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a5b      	subs	r3, r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	1ad1      	subs	r1, r2, r3
 8001ed6:	b2ca      	uxtb	r2, r1
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	729a      	strb	r2, [r3, #10]
				break;
 8001edc:	e006      	b.n	8001eec <load_settings_changes+0x25c>
			default:
				*((int32_t*) setting) = tmp_value;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e002      	b.n	8001eec <load_settings_changes+0x25c>
			return;
 8001ee6:	bf00      	nop
 8001ee8:	e000      	b.n	8001eec <load_settings_changes+0x25c>
		}
	}
 8001eea:	bf00      	nop
	
}
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	40ac2000 	.word	0x40ac2000
 8001f00:	20000490 	.word	0x20000490
 8001f04:	20000468 	.word	0x20000468
 8001f08:	fffb0e60 	.word	0xfffb0e60
 8001f0c:	0004f1a0 	.word	0x0004f1a0
 8001f10:	20000478 	.word	0x20000478
 8001f14:	0001517f 	.word	0x0001517f
 8001f18:	20000488 	.word	0x20000488
 8001f1c:	20000489 	.word	0x20000489
 8001f20:	2000048a 	.word	0x2000048a
 8001f24:	91a2b3c5 	.word	0x91a2b3c5
 8001f28:	b60b60b7 	.word	0xb60b60b7
 8001f2c:	88888889 	.word	0x88888889
 8001f30:	2aaaaaab 	.word	0x2aaaaaab

08001f34 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001f3c:	e7fe      	b.n	8001f3c <Error_Handler+0x8>
	...

08001f40 <rotary_set_dir>:
    bool is_pressed;
} rotary_data_t;

volatile static rotary_data_t rotary_data;

void rotary_set_dir(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
    rotary_data.dir = (HAL_GPIO_ReadPin(ROT_CLKW_GPIO_Port, ROT_CLKW_Pin) == GPIO_PIN_SET) ? CW : CCW;
 8001f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f48:	4806      	ldr	r0, [pc, #24]	; (8001f64 <rotary_set_dir+0x24>)
 8001f4a:	f002 f963 	bl	8004214 <HAL_GPIO_ReadPin>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <rotary_set_dir+0x18>
 8001f54:	2201      	movs	r2, #1
 8001f56:	e001      	b.n	8001f5c <rotary_set_dir+0x1c>
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <rotary_set_dir+0x28>)
 8001f5e:	701a      	strb	r2, [r3, #0]
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40010800 	.word	0x40010800
 8001f68:	20000494 	.word	0x20000494

08001f6c <rotary_set_press>:


void rotary_set_press(void) {
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
    rotary_data.is_pressed = true;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <rotary_set_press+0x14>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	705a      	strb	r2, [r3, #1]
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000494 	.word	0x20000494

08001f84 <rotary_pop_dir>:

dir_t rotary_pop_dir(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
    dir_t status = NOT_MOVING;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	71fb      	strb	r3, [r7, #7]

    if (rotary_data.dir) {
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <rotary_pop_dir+0x34>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <rotary_pop_dir+0x26>
        status = rotary_data.dir;
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <rotary_pop_dir+0x34>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	71fb      	strb	r3, [r7, #7]
        rotary_data.dir = NOT_MOVING;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <rotary_pop_dir+0x34>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
        HAL_Delay(SPIN_DEBOUNCE_DELAY);
 8001fa4:	2019      	movs	r0, #25
 8001fa6:	f001 fc6d 	bl	8003884 <HAL_Delay>
    }

    return status;
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000494 	.word	0x20000494

08001fbc <rotary_pop_press>:

bool rotary_pop_press(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
    bool status = false;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	71fb      	strb	r3, [r7, #7]

    if (rotary_data.is_pressed) {
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <rotary_pop_press+0x30>)
 8001fc8:	785b      	ldrb	r3, [r3, #1]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <rotary_pop_press+0x24>
        status = true;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	71fb      	strb	r3, [r7, #7]
        rotary_data.is_pressed = false;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <rotary_pop_press+0x30>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	705a      	strb	r2, [r3, #1]
        HAL_Delay(BUTTON_DEBOUNCE_DELAY);
 8001fda:	2032      	movs	r0, #50	; 0x32
 8001fdc:	f001 fc52 	bl	8003884 <HAL_Delay>
    }

    return status;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000494 	.word	0x20000494

08001ff0 <rotary_peek_dir>:

dir_t rotary_peek_dir(void) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

    return rotary_data.dir;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <rotary_peek_dir+0x14>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b25b      	sxtb	r3, r3
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000494 	.word	0x20000494

08002008 <rotary_peek_press>:

bool rotary_peek_press(void) {
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

    return rotary_data.is_pressed;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <rotary_peek_press+0x14>)
 800200e:	785b      	ldrb	r3, [r3, #1]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000494 	.word	0x20000494

08002020 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <MX_SPI2_Init+0x64>)
 8002026:	4a18      	ldr	r2, [pc, #96]	; (8002088 <MX_SPI2_Init+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MX_SPI2_Init+0x64>)
 800202c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002030:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_SPI2_Init+0x64>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_SPI2_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_SPI2_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_SPI2_Init+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_SPI2_Init+0x64>)
 800204c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002050:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_SPI2_Init+0x64>)
 8002054:	2220      	movs	r2, #32
 8002056:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <MX_SPI2_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_SPI2_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <MX_SPI2_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_SPI2_Init+0x64>)
 800206c:	220a      	movs	r2, #10
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <MX_SPI2_Init+0x64>)
 8002072:	f003 fa27 	bl	80054c4 <HAL_SPI_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800207c:	f7ff ff5a 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000498 	.word	0x20000498
 8002088:	40003800 	.word	0x40003800

0800208c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_SPI_MspInit+0x8c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d131      	bne.n	8002110 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_SPI_MspInit+0x90>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_SPI_MspInit+0x90>)
 80020b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b6:	61d3      	str	r3, [r2, #28]
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_SPI_MspInit+0x90>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_SPI_MspInit+0x90>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_SPI_MspInit+0x90>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_SPI_MspInit+0x90>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80020dc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80020e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f107 0310 	add.w	r3, r7, #16
 80020ee:	4619      	mov	r1, r3
 80020f0:	480b      	ldr	r0, [pc, #44]	; (8002120 <HAL_SPI_MspInit+0x94>)
 80020f2:	f001 ff0b 	bl	8003f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4619      	mov	r1, r3
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <HAL_SPI_MspInit+0x94>)
 800210c:	f001 fefe 	bl	8003f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002110:	bf00      	nop
 8002112:	3720      	adds	r7, #32
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40003800 	.word	0x40003800
 800211c:	40021000 	.word	0x40021000
 8002120:	40010c00 	.word	0x40010c00

08002124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_MspInit+0x5c>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_MspInit+0x5c>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6193      	str	r3, [r2, #24]
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_MspInit+0x5c>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_MspInit+0x5c>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_MspInit+0x5c>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	61d3      	str	r3, [r2, #28]
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_MspInit+0x5c>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_MspInit+0x60>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_MspInit+0x60>)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000

08002188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 800218c:	e7fe      	b.n	800218c <NMI_Handler+0x4>

0800218e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002192:	e7fe      	b.n	8002192 <HardFault_Handler+0x4>

08002194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <MemManage_Handler+0x4>

0800219a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219e:	e7fe      	b.n	800219e <BusFault_Handler+0x4>

080021a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <UsageFault_Handler+0x4>

080021a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ce:	f001 fb3d 	bl	800384c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_TRIG_Pin);
 80021da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021de:	f002 f849 	bl	8004274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
    rotary_set_dir();
 80021e2:	f7ff fead 	bl	8001f40 <rotary_set_dir>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}

080021ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_BUT_Pin);
 80021ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021f2:	f002 f83f 	bl	8004274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
    rotary_set_press();
 80021f6:	f7ff feb9 	bl	8001f6c <rotary_set_press>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <_sbrk+0x5c>)
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <_sbrk+0x60>)
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_sbrk+0x64>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <_sbrk+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002230:	f003 fc14 	bl	8005a5c <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	220c      	movs	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e009      	b.n	8002254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <_sbrk+0x64>)
 8002250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20005000 	.word	0x20005000
 8002260:	00000400 	.word	0x00000400
 8002264:	200004f0 	.word	0x200004f0
 8002268:	20000990 	.word	0x20000990

0800226c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800227a:	490d      	ldr	r1, [pc, #52]	; (80022b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002290:	4c0a      	ldr	r4, [pc, #40]	; (80022bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800229e:	f7ff ffe5 	bl	800226c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a2:	f003 fbe1 	bl	8005a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a6:	f7fe fe03 	bl	8000eb0 <main>
  bx lr
 80022aa:	4770      	bx	lr
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 80022b4:	08008460 	.word	0x08008460
  ldr r2, =_sbss
 80022b8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80022bc:	2000098c 	.word	0x2000098c

080022c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC1_2_IRQHandler>
	...

080022c4 <SH1106_cmd>:
		{0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F};

// Send single byte command to display
// input:
//   cmd - display command
static void SH1106_cmd(uint8_t cmd) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
	// Send command to display
	uint8_t command[] = {0x00, cmd};
 80022ce:	2300      	movs	r3, #0
 80022d0:	733b      	strb	r3, [r7, #12]
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, command,
 80022d6:	f107 020c 	add.w	r2, r7, #12
 80022da:	230a      	movs	r3, #10
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2302      	movs	r3, #2
 80022e0:	2178      	movs	r1, #120	; 0x78
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <SH1106_cmd+0x2c>)
 80022e4:	f002 f92c 	bl	8004540 <HAL_I2C_Master_Transmit>
							sizeof(command), 10);
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000410 	.word	0x20000410

080022f4 <SH1106_data>:

// Send double byte command to display
// input:
//   data - page buffer data with 0x40 blocks
//   num_bytes - number of bytes to display in the page
static void SH1106_data(uint8_t* data, uint8_t num_bytes) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
	// Send double byte command to display
	HAL_I2C_Master_Transmit(&SH1106_I2C_PORT, SH1106_ADDR << 1, data,
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	b29b      	uxth	r3, r3
 8002304:	220a      	movs	r2, #10
 8002306:	9200      	str	r2, [sp, #0]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	2178      	movs	r1, #120	; 0x78
 800230c:	4803      	ldr	r0, [pc, #12]	; (800231c <SH1106_data+0x28>)
 800230e:	f002 f917 	bl	8004540 <HAL_I2C_Master_Transmit>
							num_bytes, 10);
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000410 	.word	0x20000410

08002320 <SH1106_Init>:

// Initialize SDA peripheral and SH1106 display
// note: SDA peripheral must be initialized before
void SH1106_Init(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	// Initial display configuration
	HAL_Delay(100);
 8002324:	2064      	movs	r0, #100	; 0x64
 8002326:	f001 faad 	bl	8003884 <HAL_Delay>
	
	SH1106_cmd(SH1106_CMD_DISP_OFF);
 800232a:	20ae      	movs	r0, #174	; 0xae
 800232c:	f7ff ffca 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_COL_LOW);
 8002330:	2002      	movs	r0, #2
 8002332:	f7ff ffc7 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(SH1106_CMD_COL_HIGH);
 8002336:	2010      	movs	r0, #16
 8002338:	f7ff ffc4 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_STARTLINE);
 800233c:	2040      	movs	r0, #64	; 0x40
 800233e:	f7ff ffc1 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_PAGE_ADDR);
 8002342:	20b0      	movs	r0, #176	; 0xb0
 8002344:	f7ff ffbe 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_CONTRAST);
 8002348:	2081      	movs	r0, #129	; 0x81
 800234a:	f7ff ffbb 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(0xFF); // 0x00...0xff
 800234e:	20ff      	movs	r0, #255	; 0xff
 8002350:	f7ff ffb8 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_SEG_NORM + 1);
 8002354:	20a1      	movs	r0, #161	; 0xa1
 8002356:	f7ff ffb5 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_EDOFF); // Display follows RAM content
 800235a:	20a4      	movs	r0, #164	; 0xa4
 800235c:	f7ff ffb2 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_INV_OFF); // Normal display mode
 8002360:	20a6      	movs	r0, #166	; 0xa6
 8002362:	f7ff ffaf 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_SETMUX);
 8002366:	20a8      	movs	r0, #168	; 0xa8
 8002368:	f7ff ffac 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(0x3F); // 63 -> 64mux
 800236c:	203f      	movs	r0, #63	; 0x3f
 800236e:	f7ff ffa9 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_DC_DC_SET);
 8002372:	20ad      	movs	r0, #173	; 0xad
 8002374:	f7ff ffa6 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(0x8B); // on
 8002378:	208b      	movs	r0, #139	; 0x8b
 800237a:	f7ff ffa3 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(0x32); // 8v
 800237e:	2032      	movs	r0, #50	; 0x32
 8002380:	f7ff ffa0 	bl	80022c4 <SH1106_cmd>
	
	
	SH1106_cmd(SH1106_CMD_COM_INV);
 8002384:	20c8      	movs	r0, #200	; 0xc8
 8002386:	f7ff ff9d 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_SETOFFS);
 800238a:	20d3      	movs	r0, #211	; 0xd3
 800238c:	f7ff ff9a 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(0x00); // 0px
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff ff97 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_CLOCKDIV);
 8002396:	20d5      	movs	r0, #213	; 0xd5
 8002398:	f7ff ff94 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(0xF0); // ~100Hz
 800239c:	20f0      	movs	r0, #240	; 0xf0
 800239e:	f7ff ff91 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(SH1106_CMD_SET_CHARGE);
 80023a2:	20d9      	movs	r0, #217	; 0xd9
 80023a4:	f7ff ff8e 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(0x2A); //4MSb are discharge ticks and 4LSb are pre charge ticks
 80023a8:	202a      	movs	r0, #42	; 0x2a
 80023aa:	f7ff ff8b 	bl	80022c4 <SH1106_cmd>
	// Set COM pins hardware configuration
	// bit[4]: reset - sequential COM pin configuration
	//         set   - alternative COM pin configuration (reset value)
	// bit[5]: reset - disable COM left/right remap (reset value)
	//         set   - enable COM left/right remap
	SH1106_cmd(SH1106_CMD_COM_HW);
 80023ae:	20da      	movs	r0, #218	; 0xda
 80023b0:	f7ff ff88 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(0x12);
 80023b4:	2012      	movs	r0, #18
 80023b6:	f7ff ff85 	bl	80022c4 <SH1106_cmd>
	
	SH1106_cmd(0xDB);
 80023ba:	20db      	movs	r0, #219	; 0xdb
 80023bc:	f7ff ff82 	bl	80022c4 <SH1106_cmd>
	SH1106_cmd(0x40);
 80023c0:	2040      	movs	r0, #64	; 0x40
 80023c2:	f7ff ff7f 	bl	80022c4 <SH1106_cmd>
	
	HAL_Delay(100);
 80023c6:	2064      	movs	r0, #100	; 0x64
 80023c8:	f001 fa5c 	bl	8003884 <HAL_Delay>
	
	SH1106_cmd(SH1106_CMD_DISP_ON); // Display enabled
 80023cc:	20af      	movs	r0, #175	; 0xaf
 80023ce:	f7ff ff79 	bl	80022c4 <SH1106_cmd>
	
	HAL_Delay(100);
 80023d2:	2064      	movs	r0, #100	; 0x64
 80023d4:	f001 fa56 	bl	8003884 <HAL_Delay>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <SH1106_setAllPixelsOn>:
// set entire LCD pixels on or off
// input:
//   eon_state - new pixels state (one of SH1106_ENTIRE_PIXELS_XXX values)
// note: SH1106_ENTIRE_PIXELS_ON means what all pixels on display will be on
//       without regard of display memory contents
void SH1106_setAllPixelsOn(uint8_t eon_state) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
	SH1106_cmd(eon_state ? SH1106_CMD_EDON : SH1106_CMD_EDOFF);
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <SH1106_setAllPixelsOn+0x14>
 80023ec:	23a5      	movs	r3, #165	; 0xa5
 80023ee:	e000      	b.n	80023f2 <SH1106_setAllPixelsOn+0x16>
 80023f0:	23a4      	movs	r3, #164	; 0xa4
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff66 	bl	80022c4 <SH1106_cmd>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <SH1106_clear>:
	// Store orientation
	scr_orientation = orientation;
}

// clear vRAM buffer
void SH1106_clear(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t null_buff[SCR_W] = {0x00};
	for (page = 0; page < 8; page++) {
 8002406:	2300      	movs	r3, #0
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	e00e      	b.n	800242a <SH1106_clear+0x2a>
		memcpy(vRAM + (page << 7), null_buff, SCR_W);
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	01db      	lsls	r3, r3, #7
 8002410:	461a      	mov	r2, r3
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <SH1106_clear+0x3c>)
 8002414:	4413      	add	r3, r2
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SH1106_clear+0x40>)
 8002418:	4618      	mov	r0, r3
 800241a:	4611      	mov	r1, r2
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	461a      	mov	r2, r3
 8002420:	f003 fb46 	bl	8005ab0 <memcpy>
	for (page = 0; page < 8; page++) {
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	3301      	adds	r3, #1
 8002428:	71fb      	strb	r3, [r7, #7]
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2b07      	cmp	r3, #7
 800242e:	d9ed      	bls.n	800240c <SH1106_clear+0xc>
	}
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200004f8 	.word	0x200004f8
 8002440:	200008f8 	.word	0x200008f8

08002444 <SH1106_flush>:

// Send vRAM buffer into display
void SH1106_flush(void) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
	uint8_t page;
	static uint8_t screen_buffer[SCR_W + 1] = {0x40};
	for (page = 0; page < 8; page++) {
 800244a:	2300      	movs	r3, #0
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	e01e      	b.n	800248e <SH1106_flush+0x4a>
		
		uint8_t* page_content = vRAM + (page << 7);
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	01db      	lsls	r3, r3, #7
 8002454:	461a      	mov	r2, r3
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <SH1106_flush+0x5c>)
 8002458:	4413      	add	r3, r2
 800245a:	603b      	str	r3, [r7, #0]
		memcpy(screen_buffer + 1, page_content, SCR_W);
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <SH1106_flush+0x60>)
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fb24 	bl	8005ab0 <memcpy>
		
		SH1106_cmd(SH1106_CMD_PAGE_ADDR + page);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	3b50      	subs	r3, #80	; 0x50
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff28 	bl	80022c4 <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_LOW);
 8002474:	2002      	movs	r0, #2
 8002476:	f7ff ff25 	bl	80022c4 <SH1106_cmd>
		SH1106_cmd(SH1106_CMD_COL_HIGH);
 800247a:	2010      	movs	r0, #16
 800247c:	f7ff ff22 	bl	80022c4 <SH1106_cmd>
		
		SH1106_data(screen_buffer, sizeof(screen_buffer));
 8002480:	2181      	movs	r1, #129	; 0x81
 8002482:	4809      	ldr	r0, [pc, #36]	; (80024a8 <SH1106_flush+0x64>)
 8002484:	f7ff ff36 	bl	80022f4 <SH1106_data>
	for (page = 0; page < 8; page++) {
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	3301      	adds	r3, #1
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b07      	cmp	r3, #7
 8002492:	d9dd      	bls.n	8002450 <SH1106_flush+0xc>
	}
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200004f8 	.word	0x200004f8
 80024a4:	20000065 	.word	0x20000065
 80024a8:	20000064 	.word	0x20000064

080024ac <SH1106_cleanInit>:
		memcpy(vRAM + (page << 7), fill_buff, SCR_W);
	}
}

//init routine grouped in one function
void SH1106_cleanInit(void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	SH1106_Init();
 80024b0:	f7ff ff36 	bl	8002320 <SH1106_Init>
	SH1106_setAllPixelsOn(0);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7ff ff91 	bl	80023dc <SH1106_setAllPixelsOn>
	SH1106_clear();
 80024ba:	f7ff ffa1 	bl	8002400 <SH1106_clear>
	SH1106_flush();
 80024be:	f7ff ffc1 	bl	8002444 <SH1106_flush>

    HAL_Delay(500);
 80024c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024c6:	f001 f9dd 	bl	8003884 <HAL_Delay>
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <SH1106_pixel>:
//   Mode - pixel mode (one of SH1106_PXXX values)
#if (SH1106_OPT_PIXEL)
__attribute__((always_inline)) void SH1106_pixel(uint8_t x, uint8_t y, uint8_t Mode) {
#else

void SH1106_pixel(uint8_t x, uint8_t y, uint8_t Mode) {
 80024d0:	b4b0      	push	{r4, r5, r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
 80024da:	460b      	mov	r3, r1
 80024dc:	71bb      	strb	r3, [r7, #6]
 80024de:	4613      	mov	r3, r2
 80024e0:	717b      	strb	r3, [r7, #5]
	register uint32_t bpos;
	
	// Offset of pixel in the vRAM array must be computed by formula ((y >> 3) * SCR_W) + x
	// Since screen is 128 pixel width the formula can be simplified to ((y >> 3) << 7) + x
	// For 90 degree rotation x and y must be swapped
	if (scr_orientation == SH1106_ORIENT_CW
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <SH1106_pixel+0xb4>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d003      	beq.n	80024f2 <SH1106_pixel+0x22>
		|| scr_orientation == SH1106_ORIENT_CCW) {
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <SH1106_pixel+0xb4>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d10a      	bne.n	8002508 <SH1106_pixel+0x38>
		offset = ((x >> 3) << 7) + y;
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	08db      	lsrs	r3, r3, #3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	01da      	lsls	r2, r3, #7
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	4413      	add	r3, r2
 80024fe:	461c      	mov	r4, r3
		bpos = x & 0x07;
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 0507 	and.w	r5, r3, #7
 8002506:	e009      	b.n	800251c <SH1106_pixel+0x4c>
	} else {
		offset = ((y >> 3) << 7) + x;
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	08db      	lsrs	r3, r3, #3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	01da      	lsls	r2, r3, #7
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	4413      	add	r3, r2
 8002514:	461c      	mov	r4, r3
		bpos = y & 0x07;
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	f003 0507 	and.w	r5, r3, #7
	}
	
	// Return if offset went out outside of vRAM
	if (offset > ((SCR_W * SCR_H) >> 3)) {
 800251c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002520:	d82b      	bhi.n	800257a <SH1106_pixel+0xaa>
				+ (((uint32_t) ((void*) (&vRAM[offset])) - SRAM_BASE) << 5)
				+ (bpos << 2)) = 1;
		break;
	}
#else // (SH1106_USE_BITBAND)
	switch (Mode) {
 8002522:	797b      	ldrb	r3, [r7, #5]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d002      	beq.n	800252e <SH1106_pixel+0x5e>
 8002528:	2b02      	cmp	r3, #2
 800252a:	d00e      	beq.n	800254a <SH1106_pixel+0x7a>
 800252c:	e019      	b.n	8002562 <SH1106_pixel+0x92>
		case SH1106_PRES:
			vRAM[offset] &= ~(1 << bpos);
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <SH1106_pixel+0xb8>)
 8002530:	5d1b      	ldrb	r3, [r3, r4]
 8002532:	b25a      	sxtb	r2, r3
 8002534:	2301      	movs	r3, #1
 8002536:	40ab      	lsls	r3, r5
 8002538:	b25b      	sxtb	r3, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	b25b      	sxtb	r3, r3
 800253e:	4013      	ands	r3, r2
 8002540:	b25b      	sxtb	r3, r3
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <SH1106_pixel+0xb8>)
 8002546:	551a      	strb	r2, [r3, r4]
			break;
 8002548:	e018      	b.n	800257c <SH1106_pixel+0xac>
		case SH1106_PINV:
			vRAM[offset] ^= (1 << bpos);
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <SH1106_pixel+0xb8>)
 800254c:	5d1b      	ldrb	r3, [r3, r4]
 800254e:	b25a      	sxtb	r2, r3
 8002550:	2301      	movs	r3, #1
 8002552:	40ab      	lsls	r3, r5
 8002554:	b25b      	sxtb	r3, r3
 8002556:	4053      	eors	r3, r2
 8002558:	b25b      	sxtb	r3, r3
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <SH1106_pixel+0xb8>)
 800255e:	551a      	strb	r2, [r3, r4]
			break;
 8002560:	e00c      	b.n	800257c <SH1106_pixel+0xac>
		default:
			vRAM[offset] |= (1 << bpos);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <SH1106_pixel+0xb8>)
 8002564:	5d1b      	ldrb	r3, [r3, r4]
 8002566:	b25a      	sxtb	r2, r3
 8002568:	2301      	movs	r3, #1
 800256a:	40ab      	lsls	r3, r5
 800256c:	b25b      	sxtb	r3, r3
 800256e:	4313      	orrs	r3, r2
 8002570:	b25b      	sxtb	r3, r3
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SH1106_pixel+0xb8>)
 8002576:	551a      	strb	r2, [r3, r4]
			break;
 8002578:	e000      	b.n	800257c <SH1106_pixel+0xac>
		return;
 800257a:	bf00      	nop
	}
#endif // SH1106_USE_BITBAND
}
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bcb0      	pop	{r4, r5, r7}
 8002582:	4770      	bx	lr
 8002584:	200004f5 	.word	0x200004f5
 8002588:	200004f8 	.word	0x200004f8

0800258c <SH1106_drawHLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   x - horizontal coordinate of line start
//   y - vertical coordinate
//   w - line width
static void SH1106_drawHLineInt(uint8_t x, uint8_t y, uint8_t w) {
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	460b      	mov	r3, r1
 8002598:	71bb      	strb	r3, [r7, #6]
 800259a:	4613      	mov	r3, r2
 800259c:	717b      	strb	r3, [r7, #5]
	uint8_t* ptr;
	uint8_t mask;
	
	// Pointer to the first byte of line in video buffer
	// This is optimized formula, original is "((y >> 3) * SCR_W) + x"
	ptr = &vRAM[((y >> 3) << 7)] + x;
 800259e:	79bb      	ldrb	r3, [r7, #6]
 80025a0:	08db      	lsrs	r3, r3, #3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	01db      	lsls	r3, r3, #7
 80025a6:	4a23      	ldr	r2, [pc, #140]	; (8002634 <SH1106_drawHLineInt+0xa8>)
 80025a8:	441a      	add	r2, r3
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	4413      	add	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
	
	// Mask bit for pixel in byte
	mask = 1 << (y & 0x07);
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	2201      	movs	r2, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	72fb      	strb	r3, [r7, #11]
	
	// Draw line
	switch (SH1106_PixelMode) {
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <SH1106_drawHLineInt+0xac>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d002      	beq.n	80025cc <SH1106_drawHLineInt+0x40>
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d01a      	beq.n	8002600 <SH1106_drawHLineInt+0x74>
 80025ca:	e01f      	b.n	800260c <SH1106_drawHLineInt+0x80>
		case SH1106_PRES:
			mask = ~mask;
 80025cc:	7afb      	ldrb	r3, [r7, #11]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	72fb      	strb	r3, [r7, #11]
			while (w--)
 80025d2:	e007      	b.n	80025e4 <SH1106_drawHLineInt+0x58>
				*ptr++ &= mask;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	60fa      	str	r2, [r7, #12]
 80025da:	7819      	ldrb	r1, [r3, #0]
 80025dc:	7afa      	ldrb	r2, [r7, #11]
 80025de:	400a      	ands	r2, r1
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]
			while (w--)
 80025e4:	797b      	ldrb	r3, [r7, #5]
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	717a      	strb	r2, [r7, #5]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f2      	bne.n	80025d4 <SH1106_drawHLineInt+0x48>
			break;
 80025ee:	e01c      	b.n	800262a <SH1106_drawHLineInt+0x9e>
		case SH1106_PINV:
			while (w--)
				*ptr++ ^= mask;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	60fa      	str	r2, [r7, #12]
 80025f6:	7819      	ldrb	r1, [r3, #0]
 80025f8:	7afa      	ldrb	r2, [r7, #11]
 80025fa:	404a      	eors	r2, r1
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]
			while (w--)
 8002600:	797b      	ldrb	r3, [r7, #5]
 8002602:	1e5a      	subs	r2, r3, #1
 8002604:	717a      	strb	r2, [r7, #5]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f2      	bne.n	80025f0 <SH1106_drawHLineInt+0x64>
			break;
 800260a:	e00e      	b.n	800262a <SH1106_drawHLineInt+0x9e>
		default:
			while (w--)
 800260c:	e007      	b.n	800261e <SH1106_drawHLineInt+0x92>
				*ptr++ |= mask;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	60fa      	str	r2, [r7, #12]
 8002614:	7819      	ldrb	r1, [r3, #0]
 8002616:	7afa      	ldrb	r2, [r7, #11]
 8002618:	430a      	orrs	r2, r1
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
			while (w--)
 800261e:	797b      	ldrb	r3, [r7, #5]
 8002620:	1e5a      	subs	r2, r3, #1
 8002622:	717a      	strb	r2, [r7, #5]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f2      	bne.n	800260e <SH1106_drawHLineInt+0x82>
			break;
 8002628:	bf00      	nop
	}
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	200004f8 	.word	0x200004f8
 8002638:	200004f4 	.word	0x200004f4

0800263c <SH1106_drawVLineInt>:
// Optimized draw vertical line (without regard of screen rotation)
// input:
//   x - horizontal coordinate
//   y - vertical coordinate
//   h - line length
static void SH1106_drawVLineInt(uint8_t x, uint8_t y, uint8_t h) {
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
 8002646:	460b      	mov	r3, r1
 8002648:	71bb      	strb	r3, [r7, #6]
 800264a:	4613      	mov	r3, r2
 800264c:	717b      	strb	r3, [r7, #5]
	uint8_t mask;
	uint8_t modulo;
	
	// Pointer to the first byte of line in video buffer
	// This is optimized formula, original is "((y >> 3) * SCR_W) + x"
	ptr = &vRAM[((y >> 3) << 7)] + x;
 800264e:	79bb      	ldrb	r3, [r7, #6]
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	01db      	lsls	r3, r3, #7
 8002656:	4a5f      	ldr	r2, [pc, #380]	; (80027d4 <SH1106_drawVLineInt+0x198>)
 8002658:	441a      	add	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	4413      	add	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
	
	// First partial byte?
	modulo = (y & 0x07);
 8002660:	79bb      	ldrb	r3, [r7, #6]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	72bb      	strb	r3, [r7, #10]
	if (modulo) {
 8002668:	7abb      	ldrb	r3, [r7, #10]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d046      	beq.n	80026fc <SH1106_drawVLineInt+0xc0>
		// Get bit mask for first partial byte from lookup table
		modulo = 8 - modulo;
 800266e:	7abb      	ldrb	r3, [r7, #10]
 8002670:	f1c3 0308 	rsb	r3, r3, #8
 8002674:	72bb      	strb	r3, [r7, #10]
		mask = LUT_FB[modulo];
 8002676:	7abb      	ldrb	r3, [r7, #10]
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <SH1106_drawVLineInt+0x19c>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	72fb      	strb	r3, [r7, #11]
		
		// Trim mask if line is will not go out from a current byte
		if (modulo > h)
 800267e:	7aba      	ldrb	r2, [r7, #10]
 8002680:	797b      	ldrb	r3, [r7, #5]
 8002682:	429a      	cmp	r2, r3
 8002684:	d90b      	bls.n	800269e <SH1106_drawVLineInt+0x62>
			mask &= (0xFF >> (modulo - h));
 8002686:	7aba      	ldrb	r2, [r7, #10]
 8002688:	797b      	ldrb	r3, [r7, #5]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	22ff      	movs	r2, #255	; 0xff
 800268e:	fa42 f303 	asr.w	r3, r2, r3
 8002692:	b25a      	sxtb	r2, r3
 8002694:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002698:	4013      	ands	r3, r2
 800269a:	b25b      	sxtb	r3, r3
 800269c:	72fb      	strb	r3, [r7, #11]
		
		// Modify bits in first byte of line
		switch (SH1106_PixelMode) {
 800269e:	4b4f      	ldr	r3, [pc, #316]	; (80027dc <SH1106_drawVLineInt+0x1a0>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d002      	beq.n	80026ac <SH1106_drawVLineInt+0x70>
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d00d      	beq.n	80026c6 <SH1106_drawVLineInt+0x8a>
 80026aa:	e014      	b.n	80026d6 <SH1106_drawVLineInt+0x9a>
			case SH1106_PRES:
				*ptr &= ~mask;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b25a      	sxtb	r2, r3
 80026b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	4013      	ands	r3, r2
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	701a      	strb	r2, [r3, #0]
				break;
 80026c4:	e00f      	b.n	80026e6 <SH1106_drawVLineInt+0xaa>
			case SH1106_PINV:
				*ptr ^= mask;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	4053      	eors	r3, r2
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	701a      	strb	r2, [r3, #0]
				break;
 80026d4:	e007      	b.n	80026e6 <SH1106_drawVLineInt+0xaa>
			default:
				*ptr |= mask;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	4313      	orrs	r3, r2
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	701a      	strb	r2, [r3, #0]
				break;
 80026e4:	bf00      	nop
		}
		
		// Return if line is over
		if (modulo > h)
 80026e6:	7aba      	ldrb	r2, [r7, #10]
 80026e8:	797b      	ldrb	r3, [r7, #5]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d86d      	bhi.n	80027ca <SH1106_drawVLineInt+0x18e>
			return;
		
		// Shift pointer to the next byte in line and decrease line height counter
		ptr += SCR_W;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3380      	adds	r3, #128	; 0x80
 80026f2:	60fb      	str	r3, [r7, #12]
		h -= modulo;
 80026f4:	797a      	ldrb	r2, [r7, #5]
 80026f6:	7abb      	ldrb	r3, [r7, #10]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	717b      	strb	r3, [r7, #5]
	}
	
	// Fill solid bytes
	if (h > 7) {
 80026fc:	797b      	ldrb	r3, [r7, #5]
 80026fe:	2b07      	cmp	r3, #7
 8002700:	d933      	bls.n	800276a <SH1106_drawVLineInt+0x12e>
		// Separate cycle for each case of pixel mode (to improve performance)
		switch (SH1106_PixelMode) {
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <SH1106_drawVLineInt+0x1a0>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d003      	beq.n	8002712 <SH1106_drawVLineInt+0xd6>
 800270a:	2b02      	cmp	r3, #2
 800270c:	d00f      	beq.n	800272e <SH1106_drawVLineInt+0xf2>
 800270e:	e01f      	b.n	8002750 <SH1106_drawVLineInt+0x114>
			case SH1106_PRES:
 8002710:	bf00      	nop
				do {
					*ptr = 0x00;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
					ptr += SCR_W;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3380      	adds	r3, #128	; 0x80
 800271c:	60fb      	str	r3, [r7, #12]
					h -= 8;
 800271e:	797b      	ldrb	r3, [r7, #5]
 8002720:	3b08      	subs	r3, #8
 8002722:	717b      	strb	r3, [r7, #5]
				} while (h > 7);
 8002724:	797b      	ldrb	r3, [r7, #5]
 8002726:	2b07      	cmp	r3, #7
 8002728:	d8f2      	bhi.n	8002710 <SH1106_drawVLineInt+0xd4>
				break;
 800272a:	e01f      	b.n	800276c <SH1106_drawVLineInt+0x130>
			case SH1106_PINV:
 800272c:	bf00      	nop
				do {
					*ptr = ~(*ptr);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	43db      	mvns	r3, r3
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	701a      	strb	r2, [r3, #0]
					ptr += SCR_W;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3380      	adds	r3, #128	; 0x80
 800273e:	60fb      	str	r3, [r7, #12]
					h -= 8;
 8002740:	797b      	ldrb	r3, [r7, #5]
 8002742:	3b08      	subs	r3, #8
 8002744:	717b      	strb	r3, [r7, #5]
				} while (h > 7);
 8002746:	797b      	ldrb	r3, [r7, #5]
 8002748:	2b07      	cmp	r3, #7
 800274a:	d8ef      	bhi.n	800272c <SH1106_drawVLineInt+0xf0>
				break;
 800274c:	e00e      	b.n	800276c <SH1106_drawVLineInt+0x130>
			default:
 800274e:	bf00      	nop
				do {
					*ptr = 0xFF;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	22ff      	movs	r2, #255	; 0xff
 8002754:	701a      	strb	r2, [r3, #0]
					ptr += SCR_W;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3380      	adds	r3, #128	; 0x80
 800275a:	60fb      	str	r3, [r7, #12]
					h -= 8;
 800275c:	797b      	ldrb	r3, [r7, #5]
 800275e:	3b08      	subs	r3, #8
 8002760:	717b      	strb	r3, [r7, #5]
				} while (h > 7);
 8002762:	797b      	ldrb	r3, [r7, #5]
 8002764:	2b07      	cmp	r3, #7
 8002766:	d8f2      	bhi.n	800274e <SH1106_drawVLineInt+0x112>
				break;
 8002768:	e000      	b.n	800276c <SH1106_drawVLineInt+0x130>
		}
	}
 800276a:	bf00      	nop
	
	// Last partial byte?
	if (h) {
 800276c:	797b      	ldrb	r3, [r7, #5]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d02c      	beq.n	80027cc <SH1106_drawVLineInt+0x190>
		// Get bit mask for last partial byte from lookup table
		modulo = (h & 0x07);
 8002772:	797b      	ldrb	r3, [r7, #5]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	72bb      	strb	r3, [r7, #10]
		mask = LUT_LB[modulo];
 800277a:	7abb      	ldrb	r3, [r7, #10]
 800277c:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <SH1106_drawVLineInt+0x1a4>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	72fb      	strb	r3, [r7, #11]
		
		// Modify bits in last byte of line
		switch (SH1106_PixelMode) {
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <SH1106_drawVLineInt+0x1a0>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d002      	beq.n	8002790 <SH1106_drawVLineInt+0x154>
 800278a:	2b02      	cmp	r3, #2
 800278c:	d00d      	beq.n	80027aa <SH1106_drawVLineInt+0x16e>
 800278e:	e014      	b.n	80027ba <SH1106_drawVLineInt+0x17e>
			case SH1106_PRES:
				*ptr &= ~mask;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b25a      	sxtb	r2, r3
 8002796:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800279a:	43db      	mvns	r3, r3
 800279c:	b25b      	sxtb	r3, r3
 800279e:	4013      	ands	r3, r2
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	701a      	strb	r2, [r3, #0]
				break;
 80027a8:	e010      	b.n	80027cc <SH1106_drawVLineInt+0x190>
			case SH1106_PINV:
				*ptr ^= mask;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	7afb      	ldrb	r3, [r7, #11]
 80027b0:	4053      	eors	r3, r2
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	701a      	strb	r2, [r3, #0]
				break;
 80027b8:	e008      	b.n	80027cc <SH1106_drawVLineInt+0x190>
			default:
				*ptr |= mask;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	7afb      	ldrb	r3, [r7, #11]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	701a      	strb	r2, [r3, #0]
				break;
 80027c8:	e000      	b.n	80027cc <SH1106_drawVLineInt+0x190>
			return;
 80027ca:	bf00      	nop
		}
	}
}
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	200004f8 	.word	0x200004f8
 80027d8:	08008230 	.word	0x08008230
 80027dc:	200004f4 	.word	0x200004f4
 80027e0:	08008238 	.word	0x08008238

080027e4 <SH1106_drawHLine>:

// Draw horizontal line
// input:
//   x1, x2 - left and right horizontal coordinates
//   y - vertical coordinate
void SH1106_drawHLine(uint8_t x1, uint8_t x2, uint8_t y) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	460b      	mov	r3, r1
 80027f0:	71bb      	strb	r3, [r7, #6]
 80027f2:	4613      	mov	r3, r2
 80027f4:	717b      	strb	r3, [r7, #5]
	uint8_t x, w;
	
	if (x1 > x2) {
 80027f6:	79fa      	ldrb	r2, [r7, #7]
 80027f8:	79bb      	ldrb	r3, [r7, #6]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d906      	bls.n	800280c <SH1106_drawHLine+0x28>
		x = x2;
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	73fb      	strb	r3, [r7, #15]
		w = x1 - x2;
 8002802:	79fa      	ldrb	r2, [r7, #7]
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	73bb      	strb	r3, [r7, #14]
 800280a:	e005      	b.n	8002818 <SH1106_drawHLine+0x34>
	} else {
		x = x1;
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	73fb      	strb	r3, [r7, #15]
		w = x2 - x1;
 8002810:	79ba      	ldrb	r2, [r7, #6]
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	73bb      	strb	r3, [r7, #14]
	}
	w++;
 8002818:	7bbb      	ldrb	r3, [r7, #14]
 800281a:	3301      	adds	r3, #1
 800281c:	73bb      	strb	r3, [r7, #14]
	
	if (scr_orientation == SH1106_ORIENT_CW
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <SH1106_drawHLine+0x70>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d003      	beq.n	800282e <SH1106_drawHLine+0x4a>
		|| scr_orientation == SH1106_ORIENT_CCW) {
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <SH1106_drawHLine+0x70>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d106      	bne.n	800283c <SH1106_drawHLine+0x58>
		SH1106_drawVLineInt(y, x, w);
 800282e:	7bba      	ldrb	r2, [r7, #14]
 8002830:	7bf9      	ldrb	r1, [r7, #15]
 8002832:	797b      	ldrb	r3, [r7, #5]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff01 	bl	800263c <SH1106_drawVLineInt>
 800283a:	e006      	b.n	800284a <SH1106_drawHLine+0x66>
	} else {
		SH1106_drawHLineInt(x, y, w);
 800283c:	7bba      	ldrb	r2, [r7, #14]
 800283e:	7979      	ldrb	r1, [r7, #5]
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fea2 	bl	800258c <SH1106_drawHLineInt>
	}
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200004f5 	.word	0x200004f5

08002858 <SH1106_drawVLine>:

// Draw vertical line
// input:
//   x - horizontal coordinate
//   y1,y2 - top and bottom vertical coordinates (y1 must be less than y2)
void SH1106_drawVLine(uint8_t x, uint8_t y1, uint8_t y2) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
 8002862:	460b      	mov	r3, r1
 8002864:	71bb      	strb	r3, [r7, #6]
 8002866:	4613      	mov	r3, r2
 8002868:	717b      	strb	r3, [r7, #5]
	uint8_t y, h;
	
	if (y1 > y2) {
 800286a:	79ba      	ldrb	r2, [r7, #6]
 800286c:	797b      	ldrb	r3, [r7, #5]
 800286e:	429a      	cmp	r2, r3
 8002870:	d906      	bls.n	8002880 <SH1106_drawVLine+0x28>
		y = y2;
 8002872:	797b      	ldrb	r3, [r7, #5]
 8002874:	73fb      	strb	r3, [r7, #15]
		h = y1 - y2;
 8002876:	79ba      	ldrb	r2, [r7, #6]
 8002878:	797b      	ldrb	r3, [r7, #5]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	73bb      	strb	r3, [r7, #14]
 800287e:	e005      	b.n	800288c <SH1106_drawVLine+0x34>
	} else {
		y = y1;
 8002880:	79bb      	ldrb	r3, [r7, #6]
 8002882:	73fb      	strb	r3, [r7, #15]
		h = y2 - y1;
 8002884:	797a      	ldrb	r2, [r7, #5]
 8002886:	79bb      	ldrb	r3, [r7, #6]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	73bb      	strb	r3, [r7, #14]
	}
	h++;
 800288c:	7bbb      	ldrb	r3, [r7, #14]
 800288e:	3301      	adds	r3, #1
 8002890:	73bb      	strb	r3, [r7, #14]
	
	if (scr_orientation == SH1106_ORIENT_CW
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <SH1106_drawVLine+0x70>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d003      	beq.n	80028a2 <SH1106_drawVLine+0x4a>
		|| scr_orientation == SH1106_ORIENT_CCW) {
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <SH1106_drawVLine+0x70>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d106      	bne.n	80028b0 <SH1106_drawVLine+0x58>
		SH1106_drawHLineInt(y, x, h);
 80028a2:	7bba      	ldrb	r2, [r7, #14]
 80028a4:	79f9      	ldrb	r1, [r7, #7]
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fe6f 	bl	800258c <SH1106_drawHLineInt>
 80028ae:	e006      	b.n	80028be <SH1106_drawVLine+0x66>
	} else {
		SH1106_drawVLineInt(x, y, h);
 80028b0:	7bba      	ldrb	r2, [r7, #14]
 80028b2:	7bf9      	ldrb	r1, [r7, #15]
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fec0 	bl	800263c <SH1106_drawVLineInt>
	}
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200004f5 	.word	0x200004f5

080028cc <SH1106_drawLine>:

// Draw line
// input:
//   x1,y1 - top left coordinates
//   x2,y2 - bottom right coordinates
void SH1106_drawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4604      	mov	r4, r0
 80028d4:	4608      	mov	r0, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	461a      	mov	r2, r3
 80028da:	4623      	mov	r3, r4
 80028dc:	80fb      	strh	r3, [r7, #6]
 80028de:	4603      	mov	r3, r0
 80028e0:	80bb      	strh	r3, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	807b      	strh	r3, [r7, #2]
 80028e6:	4613      	mov	r3, r2
 80028e8:	803b      	strh	r3, [r7, #0]
	int16_t dx = x2 - x1;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	82bb      	strh	r3, [r7, #20]
	int16_t dy = y2 - y1;
 80028f4:	883a      	ldrh	r2, [r7, #0]
 80028f6:	88bb      	ldrh	r3, [r7, #4]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	827b      	strh	r3, [r7, #18]
	int16_t dx_sym = (dx > 0) ? 1 : -1;
 80028fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	dd01      	ble.n	800290a <SH1106_drawLine+0x3e>
 8002906:	2301      	movs	r3, #1
 8002908:	e001      	b.n	800290e <SH1106_drawLine+0x42>
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	823b      	strh	r3, [r7, #16]
	int16_t dy_sym = (dy > 0) ? 1 : -1;
 8002910:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002914:	2b00      	cmp	r3, #0
 8002916:	dd01      	ble.n	800291c <SH1106_drawLine+0x50>
 8002918:	2301      	movs	r3, #1
 800291a:	e001      	b.n	8002920 <SH1106_drawLine+0x54>
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	81fb      	strh	r3, [r7, #14]
	
	if (dx == 0) {
 8002922:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <SH1106_drawLine+0x72>
		SH1106_drawVLine(x1, y1, y2);
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	88ba      	ldrh	r2, [r7, #4]
 8002930:	b2d1      	uxtb	r1, r2
 8002932:	883a      	ldrh	r2, [r7, #0]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff8e 	bl	8002858 <SH1106_drawVLine>
		
		return;
 800293c:	e093      	b.n	8002a66 <SH1106_drawLine+0x19a>
	}
	if (dy == 0) {
 800293e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <SH1106_drawLine+0x8e>
		SH1106_drawHLine(x1, x2, y1);
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	b2d1      	uxtb	r1, r2
 800294e:	88ba      	ldrh	r2, [r7, #4]
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff46 	bl	80027e4 <SH1106_drawHLine>
		
		return;
 8002958:	e085      	b.n	8002a66 <SH1106_drawLine+0x19a>
	}
	
	dx *= dx_sym;
 800295a:	8abb      	ldrh	r3, [r7, #20]
 800295c:	8a3a      	ldrh	r2, [r7, #16]
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	82bb      	strh	r3, [r7, #20]
	dy *= dy_sym;
 8002966:	8a7b      	ldrh	r3, [r7, #18]
 8002968:	89fa      	ldrh	r2, [r7, #14]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	b29b      	uxth	r3, r3
 8002970:	827b      	strh	r3, [r7, #18]
	int16_t dx2 = dx << 1;
 8002972:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	81bb      	strh	r3, [r7, #12]
	int16_t dy2 = dy << 1;
 800297a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	817b      	strh	r3, [r7, #10]
	int16_t di;
	
	if (dx >= dy) {
 8002982:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002986:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800298a:	429a      	cmp	r2, r3
 800298c:	db31      	blt.n	80029f2 <SH1106_drawLine+0x126>
		di = dy2 - dx;
 800298e:	897a      	ldrh	r2, [r7, #10]
 8002990:	8abb      	ldrh	r3, [r7, #20]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	b29b      	uxth	r3, r3
 8002996:	82fb      	strh	r3, [r7, #22]
		while (x1 != x2) {
 8002998:	e024      	b.n	80029e4 <SH1106_drawLine+0x118>
			SH1106_pixel(x1, y1, SH1106_PixelMode);
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	88ba      	ldrh	r2, [r7, #4]
 80029a0:	b2d1      	uxtb	r1, r2
 80029a2:	4a32      	ldr	r2, [pc, #200]	; (8002a6c <SH1106_drawLine+0x1a0>)
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fd92 	bl	80024d0 <SH1106_pixel>
			x1 += dx_sym;
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	8a3b      	ldrh	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 80029b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	da05      	bge.n	80029ca <SH1106_drawLine+0xfe>
				di += dy2;
 80029be:	8afa      	ldrh	r2, [r7, #22]
 80029c0:	897b      	ldrh	r3, [r7, #10]
 80029c2:	4413      	add	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	82fb      	strh	r3, [r7, #22]
 80029c8:	e00c      	b.n	80029e4 <SH1106_drawLine+0x118>
			} else {
				di += dy2 - dx2;
 80029ca:	897a      	ldrh	r2, [r7, #10]
 80029cc:	89bb      	ldrh	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	8afb      	ldrh	r3, [r7, #22]
 80029d4:	4413      	add	r3, r2
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	82fb      	strh	r3, [r7, #22]
				y1 += dy_sym;
 80029da:	88ba      	ldrh	r2, [r7, #4]
 80029dc:	89fb      	ldrh	r3, [r7, #14]
 80029de:	4413      	add	r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	80bb      	strh	r3, [r7, #4]
		while (x1 != x2) {
 80029e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1d4      	bne.n	800299a <SH1106_drawLine+0xce>
 80029f0:	e030      	b.n	8002a54 <SH1106_drawLine+0x188>
			}
		}
	} else {
		di = dx2 - dy;
 80029f2:	89ba      	ldrh	r2, [r7, #12]
 80029f4:	8a7b      	ldrh	r3, [r7, #18]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	82fb      	strh	r3, [r7, #22]
		while (y1 != y2) {
 80029fc:	e024      	b.n	8002a48 <SH1106_drawLine+0x17c>
			SH1106_pixel(x1, y1, SH1106_PixelMode);
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	88ba      	ldrh	r2, [r7, #4]
 8002a04:	b2d1      	uxtb	r1, r2
 8002a06:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <SH1106_drawLine+0x1a0>)
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fd60 	bl	80024d0 <SH1106_pixel>
			y1 += dy_sym;
 8002a10:	88ba      	ldrh	r2, [r7, #4]
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	4413      	add	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 8002a1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	da05      	bge.n	8002a2e <SH1106_drawLine+0x162>
				di += dx2;
 8002a22:	8afa      	ldrh	r2, [r7, #22]
 8002a24:	89bb      	ldrh	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	82fb      	strh	r3, [r7, #22]
 8002a2c:	e00c      	b.n	8002a48 <SH1106_drawLine+0x17c>
			} else {
				di += dx2 - dy2;
 8002a2e:	89ba      	ldrh	r2, [r7, #12]
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	8afb      	ldrh	r3, [r7, #22]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	82fb      	strh	r3, [r7, #22]
				x1 += dx_sym;
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	8a3b      	ldrh	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	80fb      	strh	r3, [r7, #6]
		while (y1 != y2) {
 8002a48:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1d4      	bne.n	80029fe <SH1106_drawLine+0x132>
			}
		}
	}
	SH1106_pixel(x1, y1, SH1106_PixelMode);
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	88ba      	ldrh	r2, [r7, #4]
 8002a5a:	b2d1      	uxtb	r1, r2
 8002a5c:	4a03      	ldr	r2, [pc, #12]	; (8002a6c <SH1106_drawLine+0x1a0>)
 8002a5e:	7812      	ldrb	r2, [r2, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fd35 	bl	80024d0 <SH1106_pixel>
}
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	200004f4 	.word	0x200004f4

08002a70 <SH1106_drawCircle>:

// Draw circle
// input:
//   x_,x_ - circle center coordinates
//   radius - circle radius
void SH1106_drawCircle(int16_t x_, int16_t y_, uint8_t radius) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	80bb      	strh	r3, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	70fb      	strb	r3, [r7, #3]
	int16_t err = 1 - radius;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f1c3 0301 	rsb	r3, r3, #1
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	82fb      	strh	r3, [r7, #22]
	int16_t dx = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	82bb      	strh	r3, [r7, #20]
	int16_t dy = -2 * radius;
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	03d2      	lsls	r2, r2, #15
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	823b      	strh	r3, [r7, #16]
	int16_t y = radius;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	81fb      	strh	r3, [r7, #14]
	// Screen width and height for less calculations
	int16_t sh = scr_height - 1;
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <SH1106_drawCircle+0x50>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	81bb      	strh	r3, [r7, #12]
	int16_t sw = scr_width - 1;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <SH1106_drawCircle+0x54>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	817b      	strh	r3, [r7, #10]
	
	while (x < y) {
 8002abe:	e10f      	b.n	8002ce0 <SH1106_drawCircle+0x270>
 8002ac0:	20000062 	.word	0x20000062
 8002ac4:	20000060 	.word	0x20000060
		if (err >= 0) {
 8002ac8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0e      	blt.n	8002aee <SH1106_drawCircle+0x7e>
			dy += 2;
 8002ad0:	8a7b      	ldrh	r3, [r7, #18]
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	827b      	strh	r3, [r7, #18]
			err += dy;
 8002ad8:	8afa      	ldrh	r2, [r7, #22]
 8002ada:	8a7b      	ldrh	r3, [r7, #18]
 8002adc:	4413      	add	r3, r2
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	82fb      	strh	r3, [r7, #22]
			y--;
 8002ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	81fb      	strh	r3, [r7, #14]
		}
		dx += 2;
 8002aee:	8abb      	ldrh	r3, [r7, #20]
 8002af0:	3302      	adds	r3, #2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	82bb      	strh	r3, [r7, #20]
		err += dx + 1;
 8002af6:	8aba      	ldrh	r2, [r7, #20]
 8002af8:	8afb      	ldrh	r3, [r7, #22]
 8002afa:	4413      	add	r3, r2
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	82fb      	strh	r3, [r7, #22]
		x++;
 8002b04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	823b      	strh	r3, [r7, #16]
		
		// Draw eight pixels of each octant
		if (x_ + x < sw) {
 8002b10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b18:	441a      	add	r2, r3
 8002b1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	da31      	bge.n	8002b86 <SH1106_drawCircle+0x116>
			if (y_ + y < sh)
 8002b22:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b2a:	441a      	add	r2, r3
 8002b2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	da10      	bge.n	8002b56 <SH1106_drawCircle+0xe6>
				SH1106_pixel(x_ + x, y_ + y, SH1106_PixelMode);
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	8a3b      	ldrh	r3, [r7, #16]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b2d8      	uxtb	r0, r3
 8002b40:	88bb      	ldrh	r3, [r7, #4]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	89fb      	ldrh	r3, [r7, #14]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4a90      	ldr	r2, [pc, #576]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7ff fcbd 	bl	80024d0 <SH1106_pixel>
			if (y_ - y > -1)
 8002b56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	db10      	blt.n	8002b86 <SH1106_drawCircle+0x116>
				SH1106_pixel(x_ + x, y_ - y, SH1106_PixelMode);
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	8a3b      	ldrh	r3, [r7, #16]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b2d8      	uxtb	r0, r3
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	89fb      	ldrh	r3, [r7, #14]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4a84      	ldr	r2, [pc, #528]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002b7e:	7812      	ldrb	r2, [r2, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7ff fca5 	bl	80024d0 <SH1106_pixel>
		}
		if (x_ - x > -1) {
 8002b86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db31      	blt.n	8002bf8 <SH1106_drawCircle+0x188>
			if (y_ + y < sh)
 8002b94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002b98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b9c:	441a      	add	r2, r3
 8002b9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	da10      	bge.n	8002bc8 <SH1106_drawCircle+0x158>
				SH1106_pixel(x_ - x, y_ + y, SH1106_PixelMode);
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	8a3b      	ldrh	r3, [r7, #16]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	b2d8      	uxtb	r0, r3
 8002bb2:	88bb      	ldrh	r3, [r7, #4]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	89fb      	ldrh	r3, [r7, #14]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	4a74      	ldr	r2, [pc, #464]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002bc0:	7812      	ldrb	r2, [r2, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f7ff fc84 	bl	80024d0 <SH1106_pixel>
			if (y_ - y > -1)
 8002bc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002bcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db10      	blt.n	8002bf8 <SH1106_drawCircle+0x188>
				SH1106_pixel(x_ - x, y_ - y, SH1106_PixelMode);
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	8a3b      	ldrh	r3, [r7, #16]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	b2d8      	uxtb	r0, r3
 8002be2:	88bb      	ldrh	r3, [r7, #4]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	89fb      	ldrh	r3, [r7, #14]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4a68      	ldr	r2, [pc, #416]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7ff fc6c 	bl	80024d0 <SH1106_pixel>
		}
		if (x_ + y < sw) {
 8002bf8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c00:	441a      	add	r2, r3
 8002c02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	da31      	bge.n	8002c6e <SH1106_drawCircle+0x1fe>
			if (y_ + x < sh)
 8002c0a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c12:	441a      	add	r2, r3
 8002c14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	da10      	bge.n	8002c3e <SH1106_drawCircle+0x1ce>
				SH1106_pixel(x_ + y, y_ + x, SH1106_PixelMode);
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	b2d8      	uxtb	r0, r3
 8002c28:	88bb      	ldrh	r3, [r7, #4]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	8a3b      	ldrh	r3, [r7, #16]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4a56      	ldr	r2, [pc, #344]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002c36:	7812      	ldrb	r2, [r2, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7ff fc49 	bl	80024d0 <SH1106_pixel>
			if (y_ - x > -1)
 8002c3e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	db10      	blt.n	8002c6e <SH1106_drawCircle+0x1fe>
				SH1106_pixel(x_ + y, y_ - x, SH1106_PixelMode);
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	89fb      	ldrh	r3, [r7, #14]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	b2d8      	uxtb	r0, r3
 8002c58:	88bb      	ldrh	r3, [r7, #4]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	8a3b      	ldrh	r3, [r7, #16]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4a4a      	ldr	r2, [pc, #296]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002c66:	7812      	ldrb	r2, [r2, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7ff fc31 	bl	80024d0 <SH1106_pixel>
		}
		if (x_ - y > -1) {
 8002c6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db31      	blt.n	8002ce0 <SH1106_drawCircle+0x270>
			if (y_ + x < sh)
 8002c7c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c84:	441a      	add	r2, r3
 8002c86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	da10      	bge.n	8002cb0 <SH1106_drawCircle+0x240>
				SH1106_pixel(x_ - y, y_ + x, SH1106_PixelMode);
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	b2d8      	uxtb	r0, r3
 8002c9a:	88bb      	ldrh	r3, [r7, #4]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	8a3b      	ldrh	r3, [r7, #16]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4a3a      	ldr	r2, [pc, #232]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7ff fc10 	bl	80024d0 <SH1106_pixel>
			if (y_ - x > -1)
 8002cb0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002cb4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	db10      	blt.n	8002ce0 <SH1106_drawCircle+0x270>
				SH1106_pixel(x_ - y, y_ - x, SH1106_PixelMode);
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	89fb      	ldrh	r3, [r7, #14]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	b2d8      	uxtb	r0, r3
 8002cca:	88bb      	ldrh	r3, [r7, #4]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	8a3b      	ldrh	r3, [r7, #16]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4a2e      	ldr	r2, [pc, #184]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002cd8:	7812      	ldrb	r2, [r2, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7ff fbf8 	bl	80024d0 <SH1106_pixel>
	while (x < y) {
 8002ce0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ce4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	f6ff aeed 	blt.w	8002ac8 <SH1106_drawCircle+0x58>
		}
	}
	
	// Vertical and horizontal points
	if (x_ + radius < sw)
 8002cee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	da0b      	bge.n	8002d16 <SH1106_drawCircle+0x2a6>
		SH1106_pixel(x_ + radius, y_, SH1106_PixelMode);
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	4413      	add	r3, r2
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	88ba      	ldrh	r2, [r7, #4]
 8002d0a:	b2d1      	uxtb	r1, r2
 8002d0c:	4a20      	ldr	r2, [pc, #128]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002d0e:	7812      	ldrb	r2, [r2, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fbdd 	bl	80024d0 <SH1106_pixel>
	if (x_ - radius > -1)
 8002d16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <SH1106_drawCircle+0x2ca>
		SH1106_pixel(x_ - radius, y_, SH1106_PixelMode);
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	88ba      	ldrh	r2, [r7, #4]
 8002d2e:	b2d1      	uxtb	r1, r2
 8002d30:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fbcb 	bl	80024d0 <SH1106_pixel>
	if (y_ + radius < sh)
 8002d3a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	441a      	add	r2, r3
 8002d42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	da0b      	bge.n	8002d62 <SH1106_drawCircle+0x2f2>
		SH1106_pixel(x_, y_ + radius, SH1106_PixelMode);
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	b2d8      	uxtb	r0, r3
 8002d4e:	88bb      	ldrh	r3, [r7, #4]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	4413      	add	r3, r2
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002d5a:	7812      	ldrb	r2, [r2, #0]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f7ff fbb7 	bl	80024d0 <SH1106_pixel>
	if (y_ - radius > -1)
 8002d62:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <SH1106_drawCircle+0x316>
		SH1106_pixel(x_, y_ - radius, SH1106_PixelMode);
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	b2d8      	uxtb	r0, r3
 8002d72:	88bb      	ldrh	r3, [r7, #4]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <SH1106_drawCircle+0x320>)
 8002d7e:	7812      	ldrb	r2, [r2, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7ff fba5 	bl	80024d0 <SH1106_pixel>
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200004f4 	.word	0x200004f4

08002d94 <SH1106_printChar>:
//   x,y - character top left corner coordinates
//   ch - character to be drawn
//   Font - pointer to font
// return: character width in pixels
uint8_t SH1106_printChar(uint8_t x, uint8_t y, uint8_t ch,
						 const Font_TypeDef* Font) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	71fb      	strb	r3, [r7, #7]
 8002da0:	460b      	mov	r3, r1
 8002da2:	71bb      	strb	r3, [r7, #6]
 8002da4:	4613      	mov	r3, r2
 8002da6:	717b      	strb	r3, [r7, #5]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t* pCh;
	
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if (ch < Font->font_MinChar || ch > Font->font_MaxChar)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	791b      	ldrb	r3, [r3, #4]
 8002dac:	797a      	ldrb	r2, [r7, #5]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d304      	bcc.n	8002dbc <SH1106_printChar+0x28>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	795b      	ldrb	r3, [r3, #5]
 8002db6:	797a      	ldrb	r2, [r7, #5]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d902      	bls.n	8002dc2 <SH1106_printChar+0x2e>
		ch = Font->font_UnknownChar;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	799b      	ldrb	r3, [r3, #6]
 8002dc0:	717b      	strb	r3, [r7, #5]
	
	// Pointer to the first byte of character in font data array
	pCh = &Font->font_Data[(ch - Font->font_MinChar) * Font->font_BPC];
 8002dc2:	797b      	ldrb	r3, [r7, #5]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	7912      	ldrb	r2, [r2, #4]
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	7892      	ldrb	r2, [r2, #2]
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3307      	adds	r3, #7
 8002dd8:	60bb      	str	r3, [r7, #8]
	
	// Draw character
	if (Font->font_Scan == FONT_V) {
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d177      	bne.n	8002ed2 <SH1106_printChar+0x13e>
		// Vertical pixels order
		if (Font->font_Height < 9) {
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d82a      	bhi.n	8002e40 <SH1106_printChar+0xac>
			// Height is 8 pixels or less (one byte per column)
			p_x = x;
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	73fb      	strb	r3, [r7, #15]
			while (p_x < x + Font->font_Width) {
 8002dee:	e01f      	b.n	8002e30 <SH1106_printChar+0x9c>
				p_y = y;
 8002df0:	79bb      	ldrb	r3, [r7, #6]
 8002df2:	73bb      	strb	r3, [r7, #14]
				tmpCh = *pCh++;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	60ba      	str	r2, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	737b      	strb	r3, [r7, #13]
				while (tmpCh) {
 8002dfe:	e011      	b.n	8002e24 <SH1106_printChar+0x90>
					if (tmpCh & 0x01)
 8002e00:	7b7b      	ldrb	r3, [r7, #13]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <SH1106_printChar+0x84>
						SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8002e0a:	4b71      	ldr	r3, [pc, #452]	; (8002fd0 <SH1106_printChar+0x23c>)
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	7bb9      	ldrb	r1, [r7, #14]
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fb5c 	bl	80024d0 <SH1106_pixel>
					tmpCh >>= 1;
 8002e18:	7b7b      	ldrb	r3, [r7, #13]
 8002e1a:	085b      	lsrs	r3, r3, #1
 8002e1c:	737b      	strb	r3, [r7, #13]
					p_y++;
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	3301      	adds	r3, #1
 8002e22:	73bb      	strb	r3, [r7, #14]
				while (tmpCh) {
 8002e24:	7b7b      	ldrb	r3, [r7, #13]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ea      	bne.n	8002e00 <SH1106_printChar+0x6c>
				}
				p_x++;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
			while (p_x < x + Font->font_Width) {
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	6839      	ldr	r1, [r7, #0]
 8002e36:	7809      	ldrb	r1, [r1, #0]
 8002e38:	440b      	add	r3, r1
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	dbd8      	blt.n	8002df0 <SH1106_printChar+0x5c>
 8002e3e:	e0bf      	b.n	8002fc0 <SH1106_printChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			p_x = x;
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	73fb      	strb	r3, [r7, #15]
			while (p_x < x + Font->font_Width) {
 8002e44:	e03d      	b.n	8002ec2 <SH1106_printChar+0x12e>
				p_y = y;
 8002e46:	79bb      	ldrb	r3, [r7, #6]
 8002e48:	73bb      	strb	r3, [r7, #14]
				while (p_y < y + Font->font_Height) {
 8002e4a:	e030      	b.n	8002eae <SH1106_printChar+0x11a>
					bL = 8;
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	733b      	strb	r3, [r7, #12]
					tmpCh = *pCh++;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	60ba      	str	r2, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	737b      	strb	r3, [r7, #13]
					if (tmpCh) {
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d022      	beq.n	8002ea6 <SH1106_printChar+0x112>
						while (bL) {
 8002e60:	e01d      	b.n	8002e9e <SH1106_printChar+0x10a>
							if (tmpCh & 0x01)
 8002e62:	7b7b      	ldrb	r3, [r7, #13]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <SH1106_printChar+0xe6>
								SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8002e6c:	4b58      	ldr	r3, [pc, #352]	; (8002fd0 <SH1106_printChar+0x23c>)
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	7bb9      	ldrb	r1, [r7, #14]
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fb2b 	bl	80024d0 <SH1106_pixel>
							tmpCh >>= 1;
 8002e7a:	7b7b      	ldrb	r3, [r7, #13]
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	737b      	strb	r3, [r7, #13]
							if (tmpCh) {
 8002e80:	7b7b      	ldrb	r3, [r7, #13]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <SH1106_printChar+0x100>
								p_y++;
 8002e86:	7bbb      	ldrb	r3, [r7, #14]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	73bb      	strb	r3, [r7, #14]
								bL--;
 8002e8c:	7b3b      	ldrb	r3, [r7, #12]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	733b      	strb	r3, [r7, #12]
 8002e92:	e004      	b.n	8002e9e <SH1106_printChar+0x10a>
							} else {
								p_y += bL;
 8002e94:	7bba      	ldrb	r2, [r7, #14]
 8002e96:	7b3b      	ldrb	r3, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	73bb      	strb	r3, [r7, #14]
								break;
 8002e9c:	e007      	b.n	8002eae <SH1106_printChar+0x11a>
						while (bL) {
 8002e9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1de      	bne.n	8002e62 <SH1106_printChar+0xce>
 8002ea4:	e003      	b.n	8002eae <SH1106_printChar+0x11a>
							}
						}
					} else {
						p_y += bL;
 8002ea6:	7bba      	ldrb	r2, [r7, #14]
 8002ea8:	7b3b      	ldrb	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	73bb      	strb	r3, [r7, #14]
				while (p_y < y + Font->font_Height) {
 8002eae:	7bba      	ldrb	r2, [r7, #14]
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	6839      	ldr	r1, [r7, #0]
 8002eb4:	7849      	ldrb	r1, [r1, #1]
 8002eb6:	440b      	add	r3, r1
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	dbc7      	blt.n	8002e4c <SH1106_printChar+0xb8>
					}
				}
				p_x++;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
			while (p_x < x + Font->font_Width) {
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	7809      	ldrb	r1, [r1, #0]
 8002eca:	440b      	add	r3, r1
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbba      	blt.n	8002e46 <SH1106_printChar+0xb2>
 8002ed0:	e076      	b.n	8002fc0 <SH1106_printChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (Font->font_Width < 9) {
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d82a      	bhi.n	8002f30 <SH1106_printChar+0x19c>
			// Width is 8 pixels or less (one byte per row)
			p_y = y;
 8002eda:	79bb      	ldrb	r3, [r7, #6]
 8002edc:	73bb      	strb	r3, [r7, #14]
			while (p_y < y + Font->font_Height) {
 8002ede:	e01f      	b.n	8002f20 <SH1106_printChar+0x18c>
				p_x = x;
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	73fb      	strb	r3, [r7, #15]
				tmpCh = *pCh++;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	60ba      	str	r2, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	737b      	strb	r3, [r7, #13]
				while (tmpCh) {
 8002eee:	e011      	b.n	8002f14 <SH1106_printChar+0x180>
					if (tmpCh & 0x01)
 8002ef0:	7b7b      	ldrb	r3, [r7, #13]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <SH1106_printChar+0x174>
						SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8002efa:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <SH1106_printChar+0x23c>)
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	7bb9      	ldrb	r1, [r7, #14]
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fae4 	bl	80024d0 <SH1106_pixel>
					tmpCh >>= 1;
 8002f08:	7b7b      	ldrb	r3, [r7, #13]
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	737b      	strb	r3, [r7, #13]
					p_x++;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	3301      	adds	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
				while (tmpCh) {
 8002f14:	7b7b      	ldrb	r3, [r7, #13]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ea      	bne.n	8002ef0 <SH1106_printChar+0x15c>
				}
				p_y++;
 8002f1a:	7bbb      	ldrb	r3, [r7, #14]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	73bb      	strb	r3, [r7, #14]
			while (p_y < y + Font->font_Height) {
 8002f20:	7bba      	ldrb	r2, [r7, #14]
 8002f22:	79bb      	ldrb	r3, [r7, #6]
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	7849      	ldrb	r1, [r1, #1]
 8002f28:	440b      	add	r3, r1
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	dbd8      	blt.n	8002ee0 <SH1106_printChar+0x14c>
 8002f2e:	e047      	b.n	8002fc0 <SH1106_printChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			p_y = y;
 8002f30:	79bb      	ldrb	r3, [r7, #6]
 8002f32:	73bb      	strb	r3, [r7, #14]
			while (p_y < y + Font->font_Height) {
 8002f34:	e03d      	b.n	8002fb2 <SH1106_printChar+0x21e>
				p_x = x;
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	73fb      	strb	r3, [r7, #15]
				while (p_x < x + Font->font_Width) {
 8002f3a:	e030      	b.n	8002f9e <SH1106_printChar+0x20a>
					bL = 8;
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	733b      	strb	r3, [r7, #12]
					tmpCh = *pCh++;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	60ba      	str	r2, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	737b      	strb	r3, [r7, #13]
					if (tmpCh) {
 8002f4a:	7b7b      	ldrb	r3, [r7, #13]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d022      	beq.n	8002f96 <SH1106_printChar+0x202>
						while (bL) {
 8002f50:	e01d      	b.n	8002f8e <SH1106_printChar+0x1fa>
							if (tmpCh & 0x01)
 8002f52:	7b7b      	ldrb	r3, [r7, #13]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <SH1106_printChar+0x1d6>
								SH1106_pixel(p_x, p_y, SH1106_PixelMode);
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <SH1106_printChar+0x23c>)
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	7bb9      	ldrb	r1, [r7, #14]
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fab3 	bl	80024d0 <SH1106_pixel>
							tmpCh >>= 1;
 8002f6a:	7b7b      	ldrb	r3, [r7, #13]
 8002f6c:	085b      	lsrs	r3, r3, #1
 8002f6e:	737b      	strb	r3, [r7, #13]
							if (tmpCh) {
 8002f70:	7b7b      	ldrb	r3, [r7, #13]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d006      	beq.n	8002f84 <SH1106_printChar+0x1f0>
								p_x++;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
								bL--;
 8002f7c:	7b3b      	ldrb	r3, [r7, #12]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	733b      	strb	r3, [r7, #12]
 8002f82:	e004      	b.n	8002f8e <SH1106_printChar+0x1fa>
							} else {
								p_x += bL;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	7b3b      	ldrb	r3, [r7, #12]
 8002f88:	4413      	add	r3, r2
 8002f8a:	73fb      	strb	r3, [r7, #15]
								break;
 8002f8c:	e007      	b.n	8002f9e <SH1106_printChar+0x20a>
						while (bL) {
 8002f8e:	7b3b      	ldrb	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1de      	bne.n	8002f52 <SH1106_printChar+0x1be>
 8002f94:	e003      	b.n	8002f9e <SH1106_printChar+0x20a>
							}
						}
					} else {
						p_x += bL;
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	7b3b      	ldrb	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	73fb      	strb	r3, [r7, #15]
				while (p_x < x + Font->font_Width) {
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	6839      	ldr	r1, [r7, #0]
 8002fa4:	7809      	ldrb	r1, [r1, #0]
 8002fa6:	440b      	add	r3, r1
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbc7      	blt.n	8002f3c <SH1106_printChar+0x1a8>
					}
				}
				p_y++;
 8002fac:	7bbb      	ldrb	r3, [r7, #14]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	73bb      	strb	r3, [r7, #14]
			while (p_y < y + Font->font_Height) {
 8002fb2:	7bba      	ldrb	r2, [r7, #14]
 8002fb4:	79bb      	ldrb	r3, [r7, #6]
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	7849      	ldrb	r1, [r1, #1]
 8002fba:	440b      	add	r3, r1
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbba      	blt.n	8002f36 <SH1106_printChar+0x1a2>
			}
		}
	}
	
	return Font->font_Width + 1;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	b2db      	uxtb	r3, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200004f4 	.word	0x200004f4

08002fd4 <SH1106_printStr>:
//   x,y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   Font - pointer to font
// return: string width in pixels
uint16_t SH1106_printStr(uint8_t x, uint8_t y, const char* str,
						 const Font_TypeDef* Font) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60ba      	str	r2, [r7, #8]
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	4603      	mov	r3, r0
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	73bb      	strb	r3, [r7, #14]
	uint8_t p_x = x;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	75fb      	strb	r3, [r7, #23]
	uint8_t eX = scr_width - Font->font_Width - 1;
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <SH1106_printStr+0x78>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	75bb      	strb	r3, [r7, #22]

    if (str == NULL) {
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d113      	bne.n	800302a <SH1106_printStr+0x56>
        return 0;
 8003002:	2300      	movs	r3, #0
 8003004:	e01d      	b.n	8003042 <SH1106_printStr+0x6e>
    }

	while (*str) {
		p_x += SH1106_printChar(p_x, y, *str++, Font);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	60ba      	str	r2, [r7, #8]
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	7bb9      	ldrb	r1, [r7, #14]
 8003010:	7df8      	ldrb	r0, [r7, #23]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f7ff febe 	bl	8002d94 <SH1106_printChar>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	4413      	add	r3, r2
 8003020:	75fb      	strb	r3, [r7, #23]
		if (p_x > eX)
 8003022:	7dfa      	ldrb	r2, [r7, #23]
 8003024:	7dbb      	ldrb	r3, [r7, #22]
 8003026:	429a      	cmp	r2, r3
 8003028:	d804      	bhi.n	8003034 <SH1106_printStr+0x60>
	while (*str) {
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e9      	bne.n	8003006 <SH1106_printStr+0x32>
 8003032:	e000      	b.n	8003036 <SH1106_printStr+0x62>
			break;
 8003034:	bf00      	nop
	}
	
	return (p_x - x);
 8003036:	7dfb      	ldrb	r3, [r7, #23]
 8003038:	b29a      	uxth	r2, r3
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	b29b      	uxth	r3, r3
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	b29b      	uxth	r3, r3
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000060 	.word	0x20000060

08003050 <SH1106_printInt>:
//   x,y - top left coordinates of first symbol
//   num - signed integer value
//   Font - pointer to font
// return: number width in pixels
uint8_t SH1106_printInt(uint8_t x, uint8_t y, int32_t num,
						const Font_TypeDef* Font) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60ba      	str	r2, [r7, #8]
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	460b      	mov	r3, r1
 8003060:	73bb      	strb	r3, [r7, #14]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t* pStr = str;
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t p_x = x;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t neg = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	
	// String termination character
	*pStr++ = '\0';
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	627a      	str	r2, [r7, #36]	; 0x24
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
	
	// Convert number to characters
	if (num < 0) {
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	da05      	bge.n	8003090 <SH1106_printInt+0x40>
		neg = 1;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		num *= -1;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	425b      	negs	r3, r3
 800308e:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <SH1106_printInt+0xd0>)
 8003094:	fb83 1302 	smull	r1, r3, r3, r2
 8003098:	1099      	asrs	r1, r3, #2
 800309a:	17d3      	asrs	r3, r2, #31
 800309c:	1ac9      	subs	r1, r1, r3
 800309e:	460b      	mov	r3, r1
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	1ad1      	subs	r1, r2, r3
 80030a8:	b2ca      	uxtb	r2, r1
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	1c59      	adds	r1, r3, #1
 80030ae:	6279      	str	r1, [r7, #36]	; 0x24
 80030b0:	3230      	adds	r2, #48	; 0x30
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
	} while (num /= 10);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <SH1106_printInt+0xd0>)
 80030ba:	fb82 1203 	smull	r1, r2, r2, r3
 80030be:	1092      	asrs	r2, r2, #2
 80030c0:	17db      	asrs	r3, r3, #31
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e1      	bne.n	8003090 <SH1106_printInt+0x40>
	if (neg){
 80030cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d014      	beq.n	80030fe <SH1106_printInt+0xae>
        *pStr++ = '-';
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	627a      	str	r2, [r7, #36]	; 0x24
 80030da:	222d      	movs	r2, #45	; 0x2d
 80030dc:	701a      	strb	r2, [r3, #0]
    }
	
	// Draw a number
	while (*--pStr){
 80030de:	e00e      	b.n	80030fe <SH1106_printInt+0xae>
        p_x += SH1106_printChar(p_x, y, *pStr, Font);
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	7bb9      	ldrb	r1, [r7, #14]
 80030e6:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f7ff fe52 	bl	8002d94 <SH1106_printChar>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f8:	4413      	add	r3, r2
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while (*--pStr){
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	3b01      	subs	r3, #1
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e9      	bne.n	80030e0 <SH1106_printInt+0x90>
    }
	
	return (p_x - x);
 800310c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	b2db      	uxtb	r3, r3
}
 8003116:	4618      	mov	r0, r3
 8003118:	3728      	adds	r7, #40	; 0x28
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	66666667 	.word	0x66666667

08003124 <SH1106_drawBitmap>:
//   pBMP - pointer to array containing bitmap
// note: each '1' bit in the bitmap will be drawn as a pixel
//       each '0' bit in the will not be drawn (transparent bitmap)
// bitmap: one byte per 8 vertical pixels, LSB top, truncate bottom bits
void SH1106_drawBitmap(uint8_t x, uint8_t y, uint8_t w, uint8_t h,
					   const uint8_t* pBMP) {
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	4604      	mov	r4, r0
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	4603      	mov	r3, r0
 8003138:	71bb      	strb	r3, [r7, #6]
 800313a:	460b      	mov	r3, r1
 800313c:	717b      	strb	r3, [r7, #5]
 800313e:	4613      	mov	r3, r2
 8003140:	713b      	strb	r3, [r7, #4]
	uint8_t p_x;
	uint8_t p_y;
	uint8_t tmpCh;
	uint8_t bL;
	
	p_y = y;
 8003142:	79bb      	ldrb	r3, [r7, #6]
 8003144:	73bb      	strb	r3, [r7, #14]
	while (p_y < y + h) {
 8003146:	e03a      	b.n	80031be <SH1106_drawBitmap+0x9a>
		p_x = x;
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	73fb      	strb	r3, [r7, #15]
		while (p_x < x + w) {
 800314c:	e02e      	b.n	80031ac <SH1106_drawBitmap+0x88>
			bL = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	733b      	strb	r3, [r7, #12]
			tmpCh = *pBMP++;
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	623a      	str	r2, [r7, #32]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	737b      	strb	r3, [r7, #13]
			if (tmpCh) {
 800315c:	7b7b      	ldrb	r3, [r7, #13]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d021      	beq.n	80031a6 <SH1106_drawBitmap+0x82>
				while (bL < 8) {
 8003162:	e01c      	b.n	800319e <SH1106_drawBitmap+0x7a>
					if (tmpCh & 0x01)
 8003164:	7b7b      	ldrb	r3, [r7, #13]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <SH1106_drawBitmap+0x5e>
						SH1106_pixel(p_x, p_y + bL, SH1106_PixelMode);
 800316e:	7bba      	ldrb	r2, [r7, #14]
 8003170:	7b3b      	ldrb	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	b2d9      	uxtb	r1, r3
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <SH1106_drawBitmap+0xb0>)
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff f9a7 	bl	80024d0 <SH1106_pixel>
					tmpCh >>= 1;
 8003182:	7b7b      	ldrb	r3, [r7, #13]
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	737b      	strb	r3, [r7, #13]
					if (tmpCh) {
 8003188:	7b7b      	ldrb	r3, [r7, #13]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <SH1106_drawBitmap+0x72>
						bL++;
 800318e:	7b3b      	ldrb	r3, [r7, #12]
 8003190:	3301      	adds	r3, #1
 8003192:	733b      	strb	r3, [r7, #12]
 8003194:	e003      	b.n	800319e <SH1106_drawBitmap+0x7a>
					} else {
						p_x++;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	3301      	adds	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
						break;
 800319c:	e006      	b.n	80031ac <SH1106_drawBitmap+0x88>
				while (bL < 8) {
 800319e:	7b3b      	ldrb	r3, [r7, #12]
 80031a0:	2b07      	cmp	r3, #7
 80031a2:	d9df      	bls.n	8003164 <SH1106_drawBitmap+0x40>
 80031a4:	e002      	b.n	80031ac <SH1106_drawBitmap+0x88>
					}
				}
			} else {
				p_x++;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	3301      	adds	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
		while (p_x < x + w) {
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	79f9      	ldrb	r1, [r7, #7]
 80031b0:	797b      	ldrb	r3, [r7, #5]
 80031b2:	440b      	add	r3, r1
 80031b4:	429a      	cmp	r2, r3
 80031b6:	dbca      	blt.n	800314e <SH1106_drawBitmap+0x2a>
			}
		}
		p_y += 8;
 80031b8:	7bbb      	ldrb	r3, [r7, #14]
 80031ba:	3308      	adds	r3, #8
 80031bc:	73bb      	strb	r3, [r7, #14]
	while (p_y < y + h) {
 80031be:	7bba      	ldrb	r2, [r7, #14]
 80031c0:	79b9      	ldrb	r1, [r7, #6]
 80031c2:	793b      	ldrb	r3, [r7, #4]
 80031c4:	440b      	add	r3, r1
 80031c6:	429a      	cmp	r2, r3
 80031c8:	dbbe      	blt.n	8003148 <SH1106_drawBitmap+0x24>
	}
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	200004f4 	.word	0x200004f4

080031d8 <SH1106_drawBitmapFullscreen>:

void SH1106_drawBitmapFullscreen(const uint8_t* pBMP) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	memcpy(vRAM, pBMP, (SCR_W * SCR_H) >> 3);
 80031e0:	4a06      	ldr	r2, [pc, #24]	; (80031fc <SH1106_drawBitmapFullscreen+0x24>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ec:	461a      	mov	r2, r3
 80031ee:	f002 fc5f 	bl	8005ab0 <memcpy>
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200004f8 	.word	0x200004f8

08003200 <nRF24_CSN_L>:
        nRF24_REG_RX_ADDR_P5,
        nRF24_REG_TX_ADDR
};


static inline void nRF24_CSN_L(void) {
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CSN_GPIO_Port, SPI_CSN_Pin, GPIO_PIN_RESET);
 8003204:	2200      	movs	r2, #0
 8003206:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800320a:	4802      	ldr	r0, [pc, #8]	; (8003214 <nRF24_CSN_L+0x14>)
 800320c:	f001 f819 	bl	8004242 <HAL_GPIO_WritePin>
}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40010800 	.word	0x40010800

08003218 <nRF24_CSN_H>:

static inline void nRF24_CSN_H(void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CSN_GPIO_Port, SPI_CSN_Pin, GPIO_PIN_SET);
 800321c:	2201      	movs	r2, #1
 800321e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003222:	4802      	ldr	r0, [pc, #8]	; (800322c <nRF24_CSN_H+0x14>)
 8003224:	f001 f80d 	bl	8004242 <HAL_GPIO_WritePin>
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40010800 	.word	0x40010800

08003230 <nRF24_LL_RW>:

static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af02      	add	r7, sp, #8
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
    uint8_t result;
    if (HAL_SPI_TransmitReceive(&hspi2, &data, &result, 1, 10) != HAL_OK) {
 800323a:	f107 020f 	add.w	r2, r7, #15
 800323e:	1df9      	adds	r1, r7, #7
 8003240:	230a      	movs	r3, #10
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2301      	movs	r3, #1
 8003246:	4806      	ldr	r0, [pc, #24]	; (8003260 <nRF24_LL_RW+0x30>)
 8003248:	f002 f9c0 	bl	80055cc <HAL_SPI_TransmitReceive>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <nRF24_LL_RW+0x26>
        return 0;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <nRF24_LL_RW+0x28>
    }
    return result;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000498 	.word	0x20000498

08003264 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    nRF24_CSN_L();
 800326e:	f7ff ffc7 	bl	8003200 <nRF24_CSN_L>
    nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	b2db      	uxtb	r3, r3
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ffd8 	bl	8003230 <nRF24_LL_RW>
    value = nRF24_LL_RW(nRF24_CMD_NOP);
 8003280:	20ff      	movs	r0, #255	; 0xff
 8003282:	f7ff ffd5 	bl	8003230 <nRF24_LL_RW>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
    nRF24_CSN_H();
 800328a:	f7ff ffc5 	bl	8003218 <nRF24_CSN_H>

    return value;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	460a      	mov	r2, r1
 80032a2:	71fb      	strb	r3, [r7, #7]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 80032a8:	f7ff ffaa 	bl	8003200 <nRF24_CSN_L>
    if (reg < nRF24_CMD_W_REGISTER) {
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	2b1f      	cmp	r3, #31
 80032b0:	d810      	bhi.n	80032d4 <nRF24_WriteReg+0x3c>
        // This is a register access
        nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	b25b      	sxtb	r3, r3
 80032bc:	f043 0320 	orr.w	r3, r3, #32
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ffb3 	bl	8003230 <nRF24_LL_RW>
        nRF24_LL_RW(value);
 80032ca:	79bb      	ldrb	r3, [r7, #6]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ffaf 	bl	8003230 <nRF24_LL_RW>
 80032d2:	e013      	b.n	80032fc <nRF24_WriteReg+0x64>
    } else {
        // This is a single byte command or future command/register
        nRF24_LL_RW(reg);
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ffaa 	bl	8003230 <nRF24_LL_RW>
        if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	2be1      	cmp	r3, #225	; 0xe1
 80032e0:	d00c      	beq.n	80032fc <nRF24_WriteReg+0x64>
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	2be2      	cmp	r3, #226	; 0xe2
 80032e6:	d009      	beq.n	80032fc <nRF24_WriteReg+0x64>
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	2be3      	cmp	r3, #227	; 0xe3
 80032ec:	d006      	beq.n	80032fc <nRF24_WriteReg+0x64>
                (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	2bff      	cmp	r3, #255	; 0xff
 80032f2:	d003      	beq.n	80032fc <nRF24_WriteReg+0x64>
            // Send register value
            nRF24_LL_RW(value);
 80032f4:	79bb      	ldrb	r3, [r7, #6]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff9a 	bl	8003230 <nRF24_LL_RW>
        }
    }
    nRF24_CSN_H();
 80032fc:	f7ff ff8c 	bl	8003218 <nRF24_CSN_H>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	6039      	str	r1, [r7, #0]
 8003312:	71fb      	strb	r3, [r7, #7]
 8003314:	4613      	mov	r3, r2
 8003316:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 8003318:	f7ff ff72 	bl	8003200 <nRF24_CSN_L>
    nRF24_LL_RW(reg);
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ff86 	bl	8003230 <nRF24_LL_RW>
    while (count--) {
 8003324:	e007      	b.n	8003336 <nRF24_ReadMBReg+0x2e>
        *pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8003326:	683c      	ldr	r4, [r7, #0]
 8003328:	1c63      	adds	r3, r4, #1
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	20ff      	movs	r0, #255	; 0xff
 800332e:	f7ff ff7f 	bl	8003230 <nRF24_LL_RW>
 8003332:	4603      	mov	r3, r0
 8003334:	7023      	strb	r3, [r4, #0]
    while (count--) {
 8003336:	79bb      	ldrb	r3, [r7, #6]
 8003338:	1e5a      	subs	r2, r3, #1
 800333a:	71ba      	strb	r2, [r7, #6]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f2      	bne.n	8003326 <nRF24_ReadMBReg+0x1e>
    }
    nRF24_CSN_H();
 8003340:	f7ff ff6a 	bl	8003218 <nRF24_CSN_H>
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bd90      	pop	{r4, r7, pc}

0800334c <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	71fb      	strb	r3, [r7, #7]
 8003358:	4613      	mov	r3, r2
 800335a:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 800335c:	f7ff ff50 	bl	8003200 <nRF24_CSN_L>
    nRF24_LL_RW(reg);
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff64 	bl	8003230 <nRF24_LL_RW>
    while (count--) {
 8003368:	e006      	b.n	8003378 <nRF24_WriteMBReg+0x2c>
        nRF24_LL_RW(*pBuf++);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	603a      	str	r2, [r7, #0]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ff5c 	bl	8003230 <nRF24_LL_RW>
    while (count--) {
 8003378:	79bb      	ldrb	r3, [r7, #6]
 800337a:	1e5a      	subs	r2, r3, #1
 800337c:	71ba      	strb	r2, [r7, #6]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f3      	bne.n	800336a <nRF24_WriteMBReg+0x1e>
    }
    nRF24_CSN_H();
 8003382:	f7ff ff49 	bl	8003218 <nRF24_CSN_H>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
bool nRF24_Check(void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
    uint8_t rxbuf[5];
    uint8_t i;
    uint8_t *ptr = (uint8_t *)
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <nRF24_Check+0x58>)
 8003398:	60bb      	str	r3, [r7, #8]
            nRF24_TEST_ADDR;

    // Write test TX address and read TX_ADDR register
    nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800339a:	2205      	movs	r2, #5
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	2030      	movs	r0, #48	; 0x30
 80033a0:	f7ff ffd4 	bl	800334c <nRF24_WriteMBReg>
    nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80033a4:	463b      	mov	r3, r7
 80033a6:	2205      	movs	r2, #5
 80033a8:	4619      	mov	r1, r3
 80033aa:	2010      	movs	r0, #16
 80033ac:	f7ff ffac 	bl	8003308 <nRF24_ReadMBReg>

    // Compare buffers, return error on first mismatch
    for (i = 0; i < 5; i++) {
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e00f      	b.n	80033d6 <nRF24_Check+0x46>
        if (rxbuf[i] != *ptr++) return false;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	3310      	adds	r3, #16
 80033ba:	443b      	add	r3, r7
 80033bc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	1c59      	adds	r1, r3, #1
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <nRF24_Check+0x40>
 80033cc:	2300      	movs	r3, #0
 80033ce:	e006      	b.n	80033de <nRF24_Check+0x4e>
    for (i = 0; i < 5; i++) {
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	3301      	adds	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d9ec      	bls.n	80033b6 <nRF24_Check+0x26>
    }

    return true;
 80033dc:	2301      	movs	r3, #1
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	080075e4 	.word	0x080075e4

080033ec <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(power_state_t mode) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7ff ff34 	bl	8003264 <nRF24_ReadReg>
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]
    if (mode == nRF24_PWR_UP) {
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d104      	bne.n	8003410 <nRF24_SetPowerMode+0x24>
        // Set the PWR_UP bit of CONFIG register to wake the transceiver
        // It goes into Stanby-I mode with consumption about 26uA
        reg |= nRF24_CONFIG_PWR_UP;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	f043 0302 	orr.w	r3, r3, #2
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	e003      	b.n	8003418 <nRF24_SetPowerMode+0x2c>
    } else {
        // Clear the PWR_UP bit of CONFIG register to put the transceiver
        // into power down mode with consumption about 900nA
        reg &= ~nRF24_CONFIG_PWR_UP;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	f023 0302 	bic.w	r3, r3, #2
 8003416:	73fb      	strb	r3, [r7, #15]
    }
    nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	4619      	mov	r1, r3
 800341c:	2000      	movs	r0, #0
 800341e:	f7ff ff3b 	bl	8003298 <nRF24_WriteReg>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(transceiver_mode_t mode) {
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Configure PRIM_RX bit of the CONFIG register
    reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003434:	2000      	movs	r0, #0
 8003436:	f7ff ff15 	bl	8003264 <nRF24_ReadReg>
 800343a:	4603      	mov	r3, r0
 800343c:	73fb      	strb	r3, [r7, #15]
    reg &= ~nRF24_CONFIG_PRIM_RX;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
    reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	b25a      	sxtb	r2, r3
 8003450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003454:	4313      	orrs	r3, r2
 8003456:	b25b      	sxtb	r3, r3
 8003458:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	4619      	mov	r1, r3
 800345e:	2000      	movs	r0, #0
 8003460:	f7ff ff1a 	bl	8003298 <nRF24_WriteReg>
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(dpl_state_t mode) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    reg = nRF24_ReadReg(nRF24_REG_FEATURE);
 8003476:	201d      	movs	r0, #29
 8003478:	f7ff fef4 	bl	8003264 <nRF24_ReadReg>
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]
    if (mode) {
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <nRF24_SetDynamicPayloadLength+0x34>
        nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	b2db      	uxtb	r3, r3
 800348e:	4619      	mov	r1, r3
 8003490:	201d      	movs	r0, #29
 8003492:	f7ff ff01 	bl	8003298 <nRF24_WriteReg>
        nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 8003496:	211f      	movs	r1, #31
 8003498:	201c      	movs	r0, #28
 800349a:	f7ff fefd 	bl	8003298 <nRF24_WriteReg>
    } else {
        nRF24_WriteReg(nRF24_REG_FEATURE, reg & ~nRF24_FEATURE_EN_DPL);
        nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
    }
}
 800349e:	e00b      	b.n	80034b8 <nRF24_SetDynamicPayloadLength+0x4c>
        nRF24_WriteReg(nRF24_REG_FEATURE, reg & ~nRF24_FEATURE_EN_DPL);
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	f023 0304 	bic.w	r3, r3, #4
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	201d      	movs	r0, #29
 80034ac:	f7ff fef4 	bl	8003298 <nRF24_WriteReg>
        nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 80034b0:	2100      	movs	r1, #0
 80034b2:	201c      	movs	r0, #28
 80034b4:	f7ff fef0 	bl	8003298 <nRF24_WriteReg>
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(crc_scheme_t scheme) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
    reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80034ca:	2000      	movs	r0, #0
 80034cc:	f7ff feca 	bl	8003264 <nRF24_ReadReg>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]
    reg &= ~nRF24_MASK_CRC;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	f023 030c 	bic.w	r3, r3, #12
 80034da:	73fb      	strb	r3, [r7, #15]
    reg |= (scheme & nRF24_MASK_CRC);
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	b25a      	sxtb	r2, r3
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	4619      	mov	r1, r3
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7ff fecf 	bl	8003298 <nRF24_WriteReg>
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
    nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	4619      	mov	r1, r3
 8003510:	2005      	movs	r0, #5
 8003512:	f7ff fec1 	bl	8003298 <nRF24_WriteReg>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(retransmit_delay_t ard, uint8_t arc) {
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	460a      	mov	r2, r1
 8003528:	71fb      	strb	r3, [r7, #7]
 800352a:	4613      	mov	r3, r2
 800352c:	71bb      	strb	r3, [r7, #6]
    // Set auto retransmit settings (SETUP_RETR register)
    nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t) ((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	b25a      	sxtb	r2, r3
 8003534:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	b25b      	sxtb	r3, r3
 800353e:	4313      	orrs	r3, r2
 8003540:	b25b      	sxtb	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4619      	mov	r1, r3
 8003546:	2004      	movs	r0, #4
 8003548:	f7ff fea6 	bl	8003298 <nRF24_WriteReg>
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(address_width_t addr_width) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
    nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width);
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	4619      	mov	r1, r3
 8003562:	2003      	movs	r0, #3
 8003564:	f7ff fe98 	bl	8003298 <nRF24_WriteReg>
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(pipe_addr_t pipe, const uint8_t *addr) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	71fb      	strb	r3, [r7, #7]
    uint8_t addr_width;

    // RX_ADDR_Px register
    switch (pipe) {
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2b06      	cmp	r3, #6
 8003580:	d00a      	beq.n	8003598 <nRF24_SetAddr+0x28>
 8003582:	2b06      	cmp	r3, #6
 8003584:	dc36      	bgt.n	80035f4 <nRF24_SetAddr+0x84>
 8003586:	2b01      	cmp	r3, #1
 8003588:	dc02      	bgt.n	8003590 <nRF24_SetAddr+0x20>
 800358a:	2b00      	cmp	r3, #0
 800358c:	da04      	bge.n	8003598 <nRF24_SetAddr+0x28>
            // Write address LSBbyte (only first byte from the addr buffer)
            nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
            break;
        default:
            // Incorrect pipe number -> do nothing
            break;
 800358e:	e031      	b.n	80035f4 <nRF24_SetAddr+0x84>
 8003590:	3b02      	subs	r3, #2
    switch (pipe) {
 8003592:	2b03      	cmp	r3, #3
 8003594:	d82e      	bhi.n	80035f4 <nRF24_SetAddr+0x84>
 8003596:	e023      	b.n	80035e0 <nRF24_SetAddr+0x70>
            addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8003598:	2003      	movs	r0, #3
 800359a:	f7ff fe63 	bl	8003264 <nRF24_ReadReg>
 800359e:	4603      	mov	r3, r0
 80035a0:	3301      	adds	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
            addr += addr_width;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	603b      	str	r3, [r7, #0]
            nRF24_CSN_L();
 80035ac:	f7ff fe28 	bl	8003200 <nRF24_CSN_L>
            nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	4a13      	ldr	r2, [pc, #76]	; (8003600 <nRF24_SetAddr+0x90>)
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	f043 0320 	orr.w	r3, r3, #32
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fe37 	bl	8003230 <nRF24_LL_RW>
                nRF24_LL_RW(*addr--);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	603a      	str	r2, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fe30 	bl	8003230 <nRF24_LL_RW>
            } while (addr_width--);
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	1e5a      	subs	r2, r3, #1
 80035d4:	73fa      	strb	r2, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f3      	bne.n	80035c2 <nRF24_SetAddr+0x52>
            nRF24_CSN_H();
 80035da:	f7ff fe1d 	bl	8003218 <nRF24_CSN_H>
            break;
 80035de:	e00a      	b.n	80035f6 <nRF24_SetAddr+0x86>
            nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	4a07      	ldr	r2, [pc, #28]	; (8003600 <nRF24_SetAddr+0x90>)
 80035e4:	5cd2      	ldrb	r2, [r2, r3]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f7ff fe53 	bl	8003298 <nRF24_WriteReg>
            break;
 80035f2:	e000      	b.n	80035f6 <nRF24_SetAddr+0x86>
            break;
 80035f4:	bf00      	nop
    }
}
 80035f6:	bf00      	nop
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	08008240 	.word	0x08008240

08003604 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(output_power_t tx_pwr) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Configure RF_PWR[2:1] bits of the RF_SETUP register
    reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800360e:	2006      	movs	r0, #6
 8003610:	f7ff fe28 	bl	8003264 <nRF24_ReadReg>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]
    reg &= ~nRF24_MASK_RF_PWR;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	f023 0306 	bic.w	r3, r3, #6
 800361e:	73fb      	strb	r3, [r7, #15]
    reg |= tx_pwr;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	4313      	orrs	r3, r2
 8003626:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	4619      	mov	r1, r3
 800362c:	2006      	movs	r0, #6
 800362e:	f7ff fe33 	bl	8003298 <nRF24_WriteReg>
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(data_rate_t data_rate) {
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
    reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003644:	2006      	movs	r0, #6
 8003646:	f7ff fe0d 	bl	8003264 <nRF24_ReadReg>
 800364a:	4603      	mov	r3, r0
 800364c:	73fb      	strb	r3, [r7, #15]
    reg &= ~nRF24_MASK_DATARATE;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003654:	73fb      	strb	r3, [r7, #15]
    reg |= data_rate;
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	4313      	orrs	r3, r2
 800365c:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	4619      	mov	r1, r3
 8003662:	2006      	movs	r0, #6
 8003664:	f7ff fe18 	bl	8003298 <nRF24_WriteReg>
}
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(pipe_addr_t pipe) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Set bit in EN_AA register
    reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800367a:	2001      	movs	r0, #1
 800367c:	f7ff fdf2 	bl	8003264 <nRF24_ReadReg>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
    reg |= (1 << pipe);
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	b25a      	sxtb	r2, r3
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003692:	4313      	orrs	r3, r2
 8003694:	b25b      	sxtb	r3, r3
 8003696:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	4619      	mov	r1, r3
 800369c:	2001      	movs	r0, #1
 800369e:	f7ff fdfb 	bl	8003298 <nRF24_WriteReg>
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <nRF24_GetStatus>:
    }
}

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80036aa:	b580      	push	{r7, lr}
 80036ac:	af00      	add	r7, sp, #0
    return nRF24_ReadReg(nRF24_REG_STATUS);
 80036ae:	2007      	movs	r0, #7
 80036b0:	f7ff fdd8 	bl	8003264 <nRF24_ReadReg>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	bd80      	pop	{r7, pc}

080036ba <nRF24_GetRetransmitCounters>:

// Get auto retransmit statistic
// return: value of OBSERVE_TX register which contains two counters encoded in nibbles:
//   high - lost packets count (max value 15, can be reseted by write to RF_CH register)
//   low  - retransmitted packets count (max value 15, reseted when new transmission starts)
uint8_t nRF24_GetRetransmitCounters(void) {
 80036ba:	b580      	push	{r7, lr}
 80036bc:	af00      	add	r7, sp, #0
    return (nRF24_ReadReg(nRF24_REG_OBSERVE_TX));
 80036be:	2008      	movs	r0, #8
 80036c0:	f7ff fdd0 	bl	8003264 <nRF24_ReadReg>
 80036c4:	4603      	mov	r3, r0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	bd80      	pop	{r7, pc}

080036ca <nRF24_ResetPLOS>:

// Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
void nRF24_ResetPLOS(void) {
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
    uint8_t reg;

    // The PLOS counter is reset after write to RF_CH register
    reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 80036d0:	2005      	movs	r0, #5
 80036d2:	f7ff fdc7 	bl	8003264 <nRF24_ReadReg>
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
    nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	4619      	mov	r1, r3
 80036de:	2005      	movs	r0, #5
 80036e0:	f7ff fdda 	bl	8003298 <nRF24_WriteReg>
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <nRF24_FlushTX>:

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
    nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80036f0:	21ff      	movs	r1, #255	; 0xff
 80036f2:	20e1      	movs	r0, #225	; 0xe1
 80036f4:	f7ff fdd0 	bl	8003298 <nRF24_WriteReg>
}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}

080036fc <nRF24_ClearIRQFlags>:
void nRF24_FlushRX(void) {
    nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
}

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
    uint8_t reg;

    // Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
    reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8003702:	2007      	movs	r0, #7
 8003704:	f7ff fdae 	bl	8003264 <nRF24_ReadReg>
 8003708:	4603      	mov	r3, r0
 800370a:	71fb      	strb	r3, [r7, #7]
    reg |= nRF24_MASK_STATUS_IRQ;
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003712:	71fb      	strb	r3, [r7, #7]
    nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	4619      	mov	r1, r3
 8003718:	2007      	movs	r0, #7
 800371a:	f7ff fdbd 	bl	8003298 <nRF24_WriteReg>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	70fb      	strb	r3, [r7, #3]
    nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	461a      	mov	r2, r3
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	20a0      	movs	r0, #160	; 0xa0
 800373a:	f7ff fe07 	bl	800334c <nRF24_WriteMBReg>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <nRF24_TransmitPacket>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
    return nRF24_ReadPayloadGeneric(pBuf, length, 0);
}

nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
    volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <nRF24_TransmitPacket+0x74>)
 8003756:	60bb      	str	r3, [r7, #8]

    uint8_t status;

    // Transfer a data from the specified buffer to the TX FIFO
    nRF24_WritePayload(pBuf, length);
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ffe2 	bl	8003726 <nRF24_WritePayload>
    // Poll the transceiver status register until one of the following flags will be set:
    //   TX_DS  - means the packet has been transmitted
    //   MAX_RT - means the maximum number of TX retransmits happened
    // note: this solution is far from perfect, better to use IRQ instead of polling the status
    do {
        status = nRF24_GetStatus();
 8003762:	f7ff ffa2 	bl	80036aa <nRF24_GetStatus>
 8003766:	4603      	mov	r3, r0
 8003768:	73fb      	strb	r3, [r7, #15]
        if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <nRF24_TransmitPacket+0x38>
            break;
        }
    } while (wait--);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1e5a      	subs	r2, r3, #1
 8003778:	60ba      	str	r2, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f1      	bne.n	8003762 <nRF24_TransmitPacket+0x1a>
 800377e:	e000      	b.n	8003782 <nRF24_TransmitPacket+0x3a>
            break;
 8003780:	bf00      	nop

    if (!wait) {
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <nRF24_TransmitPacket+0x44>
        // Timeout
        return nRF24_TX_TIMEOUT;
 8003788:	2302      	movs	r3, #2
 800378a:	e012      	b.n	80037b2 <nRF24_TransmitPacket+0x6a>
    }

    // Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 800378c:	f7ff ffb6 	bl	80036fc <nRF24_ClearIRQFlags>

    if (status & nRF24_FLAG_MAX_RT) {
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <nRF24_TransmitPacket+0x56>
        // Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
        return nRF24_TX_MAXRT;
 800379a:	2303      	movs	r3, #3
 800379c:	e009      	b.n	80037b2 <nRF24_TransmitPacket+0x6a>
    }

    if (status & nRF24_FLAG_TX_DS) {
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <nRF24_TransmitPacket+0x64>
        // Successful transmission
        return nRF24_TX_SUCCESS;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e002      	b.n	80037b2 <nRF24_TransmitPacket+0x6a>
    }

    // Some banana happens, a payload remains in the TX FIFO, flush it
    nRF24_FlushTX();
 80037ac:	f7ff ff9e 	bl	80036ec <nRF24_FlushTX>

    return nRF24_TX_ERROR;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	000fffff 	.word	0x000fffff

080037c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_Init+0x28>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <HAL_Init+0x28>)
 80037ca:	f043 0310 	orr.w	r3, r3, #16
 80037ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d0:	2003      	movs	r0, #3
 80037d2:	f000 fb59 	bl	8003e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d6:	200f      	movs	r0, #15
 80037d8:	f000 f808 	bl	80037ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037dc:	f7fe fca2 	bl	8002124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40022000 	.word	0x40022000

080037ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_InitTick+0x54>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_InitTick+0x58>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003802:	fbb3 f3f1 	udiv	r3, r3, r1
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fb71 	bl	8003ef2 <HAL_SYSTICK_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e00e      	b.n	8003838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d80a      	bhi.n	8003836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003820:	2200      	movs	r2, #0
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	f000 fb39 	bl	8003e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800382c:	4a06      	ldr	r2, [pc, #24]	; (8003848 <HAL_InitTick+0x5c>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	2000005c 	.word	0x2000005c
 8003844:	200000ec 	.word	0x200000ec
 8003848:	200000e8 	.word	0x200000e8

0800384c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_IncTick+0x1c>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_IncTick+0x20>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4413      	add	r3, r2
 800385c:	4a03      	ldr	r2, [pc, #12]	; (800386c <HAL_IncTick+0x20>)
 800385e:	6013      	str	r3, [r2, #0]
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	200000ec 	.word	0x200000ec
 800386c:	20000978 	.word	0x20000978

08003870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b02      	ldr	r3, [pc, #8]	; (8003880 <HAL_GetTick+0x10>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	20000978 	.word	0x20000978

08003884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800388c:	f7ff fff0 	bl	8003870 <HAL_GetTick>
 8003890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d005      	beq.n	80038aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_Delay+0x44>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038aa:	bf00      	nop
 80038ac:	f7ff ffe0 	bl	8003870 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d8f7      	bhi.n	80038ac <HAL_Delay+0x28>
  {
  }
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200000ec 	.word	0x200000ec

080038cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e0be      	b.n	8003a6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd f8dc 	bl	8000ac8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f9ab 	bl	8003c6c <ADC_ConversionStop_Disable>
 8003916:	4603      	mov	r3, r0
 8003918:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 8099 	bne.w	8003a5a <HAL_ADC_Init+0x18e>
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 8095 	bne.w	8003a5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003938:	f023 0302 	bic.w	r3, r3, #2
 800393c:	f043 0202 	orr.w	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800394c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7b1b      	ldrb	r3, [r3, #12]
 8003952:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003954:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	4313      	orrs	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003964:	d003      	beq.n	800396e <HAL_ADC_Init+0xa2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d102      	bne.n	8003974 <HAL_ADC_Init+0xa8>
 800396e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003972:	e000      	b.n	8003976 <HAL_ADC_Init+0xaa>
 8003974:	2300      	movs	r3, #0
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7d1b      	ldrb	r3, [r3, #20]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d119      	bne.n	80039b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7b1b      	ldrb	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	3b01      	subs	r3, #1
 8003992:	035a      	lsls	r2, r3, #13
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e00b      	b.n	80039b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	f043 0201 	orr.w	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <HAL_ADC_Init+0x1a8>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e8:	d003      	beq.n	80039f2 <HAL_ADC_Init+0x126>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d104      	bne.n	80039fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	051b      	lsls	r3, r3, #20
 80039fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <HAL_ADC_Init+0x1ac>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d10b      	bne.n	8003a38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a36:	e018      	b.n	8003a6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	f023 0312 	bic.w	r3, r3, #18
 8003a40:	f043 0210 	orr.w	r2, r3, #16
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a58:	e007      	b.n	8003a6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	f043 0210 	orr.w	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	ffe1f7fd 	.word	0xffe1f7fd
 8003a78:	ff1f0efe 	.word	0xff1f0efe

08003a7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x20>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e0dc      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x1da>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b06      	cmp	r3, #6
 8003aaa:	d81c      	bhi.n	8003ae6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	3b05      	subs	r3, #5
 8003abe:	221f      	movs	r2, #31
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	4019      	ands	r1, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b05      	subs	r3, #5
 8003ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ae4:	e03c      	b.n	8003b60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d81c      	bhi.n	8003b28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	3b23      	subs	r3, #35	; 0x23
 8003b00:	221f      	movs	r2, #31
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	4019      	ands	r1, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	3b23      	subs	r3, #35	; 0x23
 8003b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
 8003b26:	e01b      	b.n	8003b60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	3b41      	subs	r3, #65	; 0x41
 8003b3a:	221f      	movs	r2, #31
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	4019      	ands	r1, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	3b41      	subs	r3, #65	; 0x41
 8003b54:	fa00 f203 	lsl.w	r2, r0, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b09      	cmp	r3, #9
 8003b66:	d91c      	bls.n	8003ba2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68d9      	ldr	r1, [r3, #12]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4613      	mov	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4413      	add	r3, r2
 8003b78:	3b1e      	subs	r3, #30
 8003b7a:	2207      	movs	r2, #7
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	4019      	ands	r1, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6898      	ldr	r0, [r3, #8]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	3b1e      	subs	r3, #30
 8003b94:	fa00 f203 	lsl.w	r2, r0, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	60da      	str	r2, [r3, #12]
 8003ba0:	e019      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6919      	ldr	r1, [r3, #16]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	4019      	ands	r1, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6898      	ldr	r0, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	fa00 f203 	lsl.w	r2, r0, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b10      	cmp	r3, #16
 8003bdc:	d003      	beq.n	8003be6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003be2:	2b11      	cmp	r3, #17
 8003be4:	d132      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <HAL_ADC_ConfigChannel+0x1e4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d125      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d126      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c0c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d11a      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <HAL_ADC_ConfigChannel+0x1ec>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	0c9a      	lsrs	r2, r3, #18
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c2c:	e002      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f9      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x1b2>
 8003c3a:	e007      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40012400 	.word	0x40012400
 8003c64:	2000005c 	.word	0x2000005c
 8003c68:	431bde83 	.word	0x431bde83

08003c6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d12e      	bne.n	8003ce4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c96:	f7ff fdeb 	bl	8003870 <HAL_GetTick>
 8003c9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c9c:	e01b      	b.n	8003cd6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c9e:	f7ff fde7 	bl	8003870 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d914      	bls.n	8003cd6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10d      	bne.n	8003cd6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e007      	b.n	8003ce6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d0dc      	beq.n	8003c9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <__NVIC_SetPriorityGrouping+0x44>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d22:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <__NVIC_SetPriorityGrouping+0x44>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	60d3      	str	r3, [r2, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <__NVIC_GetPriorityGrouping+0x18>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	f003 0307 	and.w	r3, r3, #7
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	db0b      	blt.n	8003d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	4906      	ldr	r1, [pc, #24]	; (8003d88 <__NVIC_EnableIRQ+0x34>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2001      	movs	r0, #1
 8003d76:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	e000e100 	.word	0xe000e100

08003d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	db0a      	blt.n	8003db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	490c      	ldr	r1, [pc, #48]	; (8003dd8 <__NVIC_SetPriority+0x4c>)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	0112      	lsls	r2, r2, #4
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	440b      	add	r3, r1
 8003db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db4:	e00a      	b.n	8003dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4908      	ldr	r1, [pc, #32]	; (8003ddc <__NVIC_SetPriority+0x50>)
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	3b04      	subs	r3, #4
 8003dc4:	0112      	lsls	r2, r2, #4
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	440b      	add	r3, r1
 8003dca:	761a      	strb	r2, [r3, #24]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000e100 	.word	0xe000e100
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f1c3 0307 	rsb	r3, r3, #7
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	bf28      	it	cs
 8003dfe:	2304      	movcs	r3, #4
 8003e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d902      	bls.n	8003e10 <NVIC_EncodePriority+0x30>
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3b03      	subs	r3, #3
 8003e0e:	e000      	b.n	8003e12 <NVIC_EncodePriority+0x32>
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	401a      	ands	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e28:	f04f 31ff 	mov.w	r1, #4294967295
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	43d9      	mvns	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e38:	4313      	orrs	r3, r2
         );
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3724      	adds	r7, #36	; 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e54:	d301      	bcc.n	8003e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00f      	b.n	8003e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5a:	4a0a      	ldr	r2, [pc, #40]	; (8003e84 <SysTick_Config+0x40>)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e62:	210f      	movs	r1, #15
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	f7ff ff90 	bl	8003d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <SysTick_Config+0x40>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e72:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <SysTick_Config+0x40>)
 8003e74:	2207      	movs	r2, #7
 8003e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	e000e010 	.word	0xe000e010

08003e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ff2d 	bl	8003cf0 <__NVIC_SetPriorityGrouping>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb0:	f7ff ff42 	bl	8003d38 <__NVIC_GetPriorityGrouping>
 8003eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	6978      	ldr	r0, [r7, #20]
 8003ebc:	f7ff ff90 	bl	8003de0 <NVIC_EncodePriority>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff5f 	bl	8003d8c <__NVIC_SetPriority>
}
 8003ece:	bf00      	nop
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	4603      	mov	r3, r0
 8003ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff35 	bl	8003d54 <__NVIC_EnableIRQ>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ffa2 	bl	8003e44 <SysTick_Config>
 8003f00:	4603      	mov	r3, r0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b08b      	sub	sp, #44	; 0x2c
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f1e:	e169      	b.n	80041f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f20:	2201      	movs	r2, #1
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	f040 8158 	bne.w	80041ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4a9a      	ldr	r2, [pc, #616]	; (80041ac <HAL_GPIO_Init+0x2a0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d05e      	beq.n	8004006 <HAL_GPIO_Init+0xfa>
 8003f48:	4a98      	ldr	r2, [pc, #608]	; (80041ac <HAL_GPIO_Init+0x2a0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d875      	bhi.n	800403a <HAL_GPIO_Init+0x12e>
 8003f4e:	4a98      	ldr	r2, [pc, #608]	; (80041b0 <HAL_GPIO_Init+0x2a4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d058      	beq.n	8004006 <HAL_GPIO_Init+0xfa>
 8003f54:	4a96      	ldr	r2, [pc, #600]	; (80041b0 <HAL_GPIO_Init+0x2a4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d86f      	bhi.n	800403a <HAL_GPIO_Init+0x12e>
 8003f5a:	4a96      	ldr	r2, [pc, #600]	; (80041b4 <HAL_GPIO_Init+0x2a8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d052      	beq.n	8004006 <HAL_GPIO_Init+0xfa>
 8003f60:	4a94      	ldr	r2, [pc, #592]	; (80041b4 <HAL_GPIO_Init+0x2a8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d869      	bhi.n	800403a <HAL_GPIO_Init+0x12e>
 8003f66:	4a94      	ldr	r2, [pc, #592]	; (80041b8 <HAL_GPIO_Init+0x2ac>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d04c      	beq.n	8004006 <HAL_GPIO_Init+0xfa>
 8003f6c:	4a92      	ldr	r2, [pc, #584]	; (80041b8 <HAL_GPIO_Init+0x2ac>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d863      	bhi.n	800403a <HAL_GPIO_Init+0x12e>
 8003f72:	4a92      	ldr	r2, [pc, #584]	; (80041bc <HAL_GPIO_Init+0x2b0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d046      	beq.n	8004006 <HAL_GPIO_Init+0xfa>
 8003f78:	4a90      	ldr	r2, [pc, #576]	; (80041bc <HAL_GPIO_Init+0x2b0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d85d      	bhi.n	800403a <HAL_GPIO_Init+0x12e>
 8003f7e:	2b12      	cmp	r3, #18
 8003f80:	d82a      	bhi.n	8003fd8 <HAL_GPIO_Init+0xcc>
 8003f82:	2b12      	cmp	r3, #18
 8003f84:	d859      	bhi.n	800403a <HAL_GPIO_Init+0x12e>
 8003f86:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <HAL_GPIO_Init+0x80>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08004007 	.word	0x08004007
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003ff3 	.word	0x08003ff3
 8003f98:	08004035 	.word	0x08004035
 8003f9c:	0800403b 	.word	0x0800403b
 8003fa0:	0800403b 	.word	0x0800403b
 8003fa4:	0800403b 	.word	0x0800403b
 8003fa8:	0800403b 	.word	0x0800403b
 8003fac:	0800403b 	.word	0x0800403b
 8003fb0:	0800403b 	.word	0x0800403b
 8003fb4:	0800403b 	.word	0x0800403b
 8003fb8:	0800403b 	.word	0x0800403b
 8003fbc:	0800403b 	.word	0x0800403b
 8003fc0:	0800403b 	.word	0x0800403b
 8003fc4:	0800403b 	.word	0x0800403b
 8003fc8:	0800403b 	.word	0x0800403b
 8003fcc:	0800403b 	.word	0x0800403b
 8003fd0:	08003fe9 	.word	0x08003fe9
 8003fd4:	08003ffd 	.word	0x08003ffd
 8003fd8:	4a79      	ldr	r2, [pc, #484]	; (80041c0 <HAL_GPIO_Init+0x2b4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003fde:	e02c      	b.n	800403a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	623b      	str	r3, [r7, #32]
          break;
 8003fe6:	e029      	b.n	800403c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	3304      	adds	r3, #4
 8003fee:	623b      	str	r3, [r7, #32]
          break;
 8003ff0:	e024      	b.n	800403c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	623b      	str	r3, [r7, #32]
          break;
 8003ffa:	e01f      	b.n	800403c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	330c      	adds	r3, #12
 8004002:	623b      	str	r3, [r7, #32]
          break;
 8004004:	e01a      	b.n	800403c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800400e:	2304      	movs	r3, #4
 8004010:	623b      	str	r3, [r7, #32]
          break;
 8004012:	e013      	b.n	800403c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d105      	bne.n	8004028 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800401c:	2308      	movs	r3, #8
 800401e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	611a      	str	r2, [r3, #16]
          break;
 8004026:	e009      	b.n	800403c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004028:	2308      	movs	r3, #8
 800402a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	615a      	str	r2, [r3, #20]
          break;
 8004032:	e003      	b.n	800403c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004034:	2300      	movs	r3, #0
 8004036:	623b      	str	r3, [r7, #32]
          break;
 8004038:	e000      	b.n	800403c <HAL_GPIO_Init+0x130>
          break;
 800403a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2bff      	cmp	r3, #255	; 0xff
 8004040:	d801      	bhi.n	8004046 <HAL_GPIO_Init+0x13a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	e001      	b.n	800404a <HAL_GPIO_Init+0x13e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2bff      	cmp	r3, #255	; 0xff
 8004050:	d802      	bhi.n	8004058 <HAL_GPIO_Init+0x14c>
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	e002      	b.n	800405e <HAL_GPIO_Init+0x152>
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	3b08      	subs	r3, #8
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	210f      	movs	r1, #15
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	401a      	ands	r2, r3
 8004070:	6a39      	ldr	r1, [r7, #32]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	fa01 f303 	lsl.w	r3, r1, r3
 8004078:	431a      	orrs	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80b1 	beq.w	80041ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800408c:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <HAL_GPIO_Init+0x2b8>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	4a4c      	ldr	r2, [pc, #304]	; (80041c4 <HAL_GPIO_Init+0x2b8>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6193      	str	r3, [r2, #24]
 8004098:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_GPIO_Init+0x2b8>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040a4:	4a48      	ldr	r2, [pc, #288]	; (80041c8 <HAL_GPIO_Init+0x2bc>)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	3302      	adds	r3, #2
 80040ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	220f      	movs	r2, #15
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4013      	ands	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a40      	ldr	r2, [pc, #256]	; (80041cc <HAL_GPIO_Init+0x2c0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <HAL_GPIO_Init+0x1ec>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a3f      	ldr	r2, [pc, #252]	; (80041d0 <HAL_GPIO_Init+0x2c4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00d      	beq.n	80040f4 <HAL_GPIO_Init+0x1e8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a3e      	ldr	r2, [pc, #248]	; (80041d4 <HAL_GPIO_Init+0x2c8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <HAL_GPIO_Init+0x1e4>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a3d      	ldr	r2, [pc, #244]	; (80041d8 <HAL_GPIO_Init+0x2cc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_GPIO_Init+0x1e0>
 80040e8:	2303      	movs	r3, #3
 80040ea:	e006      	b.n	80040fa <HAL_GPIO_Init+0x1ee>
 80040ec:	2304      	movs	r3, #4
 80040ee:	e004      	b.n	80040fa <HAL_GPIO_Init+0x1ee>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e002      	b.n	80040fa <HAL_GPIO_Init+0x1ee>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_GPIO_Init+0x1ee>
 80040f8:	2300      	movs	r3, #0
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	f002 0203 	and.w	r2, r2, #3
 8004100:	0092      	lsls	r2, r2, #2
 8004102:	4093      	lsls	r3, r2
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800410a:	492f      	ldr	r1, [pc, #188]	; (80041c8 <HAL_GPIO_Init+0x2bc>)
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	3302      	adds	r3, #2
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d006      	beq.n	8004132 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004124:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	492c      	ldr	r1, [pc, #176]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
 8004130:	e006      	b.n	8004140 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004132:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	43db      	mvns	r3, r3
 800413a:	4928      	ldr	r1, [pc, #160]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 800413c:	4013      	ands	r3, r2
 800413e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d006      	beq.n	800415a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800414c:	4b23      	ldr	r3, [pc, #140]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	4922      	ldr	r1, [pc, #136]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
 8004158:	e006      	b.n	8004168 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	43db      	mvns	r3, r3
 8004162:	491e      	ldr	r1, [pc, #120]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 8004164:	4013      	ands	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d006      	beq.n	8004182 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	4918      	ldr	r1, [pc, #96]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]
 8004180:	e006      	b.n	8004190 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004182:	4b16      	ldr	r3, [pc, #88]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	43db      	mvns	r3, r3
 800418a:	4914      	ldr	r1, [pc, #80]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 800418c:	4013      	ands	r3, r2
 800418e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d021      	beq.n	80041e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	490e      	ldr	r1, [pc, #56]	; (80041dc <HAL_GPIO_Init+0x2d0>)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60cb      	str	r3, [r1, #12]
 80041a8:	e021      	b.n	80041ee <HAL_GPIO_Init+0x2e2>
 80041aa:	bf00      	nop
 80041ac:	10320000 	.word	0x10320000
 80041b0:	10310000 	.word	0x10310000
 80041b4:	10220000 	.word	0x10220000
 80041b8:	10210000 	.word	0x10210000
 80041bc:	10120000 	.word	0x10120000
 80041c0:	10110000 	.word	0x10110000
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40010800 	.word	0x40010800
 80041d0:	40010c00 	.word	0x40010c00
 80041d4:	40011000 	.word	0x40011000
 80041d8:	40011400 	.word	0x40011400
 80041dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_GPIO_Init+0x304>)
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	4909      	ldr	r1, [pc, #36]	; (8004210 <HAL_GPIO_Init+0x304>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	3301      	adds	r3, #1
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f47f ae8e 	bne.w	8003f20 <HAL_GPIO_Init+0x14>
  }
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	372c      	adds	r7, #44	; 0x2c
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	40010400 	.word	0x40010400

08004214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	e001      	b.n	8004236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004236:	7bfb      	ldrb	r3, [r7, #15]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	807b      	strh	r3, [r7, #2]
 800424e:	4613      	mov	r3, r2
 8004250:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004252:	787b      	ldrb	r3, [r7, #1]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004258:	887a      	ldrh	r2, [r7, #2]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800425e:	e003      	b.n	8004268 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	041a      	lsls	r2, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	611a      	str	r2, [r3, #16]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
	...

08004274 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d006      	beq.n	8004298 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800428a:	4a05      	ldr	r2, [pc, #20]	; (80042a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f806 	bl	80042a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40010400 	.word	0x40010400

080042a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e12b      	b.n	8004522 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc fda6 	bl	8000e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2224      	movs	r2, #36	; 0x24
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800431c:	f000 ffea 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 8004320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4a81      	ldr	r2, [pc, #516]	; (800452c <HAL_I2C_Init+0x274>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d807      	bhi.n	800433c <HAL_I2C_Init+0x84>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a80      	ldr	r2, [pc, #512]	; (8004530 <HAL_I2C_Init+0x278>)
 8004330:	4293      	cmp	r3, r2
 8004332:	bf94      	ite	ls
 8004334:	2301      	movls	r3, #1
 8004336:	2300      	movhi	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e006      	b.n	800434a <HAL_I2C_Init+0x92>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a7d      	ldr	r2, [pc, #500]	; (8004534 <HAL_I2C_Init+0x27c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	bf94      	ite	ls
 8004344:	2301      	movls	r3, #1
 8004346:	2300      	movhi	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0e7      	b.n	8004522 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a78      	ldr	r2, [pc, #480]	; (8004538 <HAL_I2C_Init+0x280>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0c9b      	lsrs	r3, r3, #18
 800435c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_I2C_Init+0x274>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d802      	bhi.n	800438c <HAL_I2C_Init+0xd4>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3301      	adds	r3, #1
 800438a:	e009      	b.n	80043a0 <HAL_I2C_Init+0xe8>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	4a69      	ldr	r2, [pc, #420]	; (800453c <HAL_I2C_Init+0x284>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	3301      	adds	r3, #1
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	495c      	ldr	r1, [pc, #368]	; (800452c <HAL_I2C_Init+0x274>)
 80043bc:	428b      	cmp	r3, r1
 80043be:	d819      	bhi.n	80043f4 <HAL_I2C_Init+0x13c>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1e59      	subs	r1, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043d4:	400b      	ands	r3, r1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_I2C_Init+0x138>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1e59      	subs	r1, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e8:	3301      	adds	r3, #1
 80043ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ee:	e051      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 80043f0:	2304      	movs	r3, #4
 80043f2:	e04f      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d111      	bne.n	8004420 <HAL_I2C_Init+0x168>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e012      	b.n	8004446 <HAL_I2C_Init+0x18e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1e58      	subs	r0, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	0099      	lsls	r1, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	fbb0 f3f3 	udiv	r3, r0, r3
 8004436:	3301      	adds	r3, #1
 8004438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Init+0x196>
 800444a:	2301      	movs	r3, #1
 800444c:	e022      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10e      	bne.n	8004474 <HAL_I2C_Init+0x1bc>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e58      	subs	r0, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	440b      	add	r3, r1
 8004464:	fbb0 f3f3 	udiv	r3, r0, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004472:	e00f      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1e58      	subs	r0, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	0099      	lsls	r1, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	fbb0 f3f3 	udiv	r3, r0, r3
 800448a:	3301      	adds	r3, #1
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	6809      	ldr	r1, [r1, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6911      	ldr	r1, [r2, #16]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	000186a0 	.word	0x000186a0
 8004530:	001e847f 	.word	0x001e847f
 8004534:	003d08ff 	.word	0x003d08ff
 8004538:	431bde83 	.word	0x431bde83
 800453c:	10624dd3 	.word	0x10624dd3

08004540 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	460b      	mov	r3, r1
 800454e:	817b      	strh	r3, [r7, #10]
 8004550:	4613      	mov	r3, r2
 8004552:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004554:	f7ff f98c 	bl	8003870 <HAL_GetTick>
 8004558:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b20      	cmp	r3, #32
 8004564:	f040 80e0 	bne.w	8004728 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2319      	movs	r3, #25
 800456e:	2201      	movs	r2, #1
 8004570:	4970      	ldr	r1, [pc, #448]	; (8004734 <HAL_I2C_Master_Transmit+0x1f4>)
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f964 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800457e:	2302      	movs	r3, #2
 8004580:	e0d3      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_I2C_Master_Transmit+0x50>
 800458c:	2302      	movs	r3, #2
 800458e:	e0cc      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d007      	beq.n	80045b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2221      	movs	r2, #33	; 0x21
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2210      	movs	r2, #16
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	893a      	ldrh	r2, [r7, #8]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a50      	ldr	r2, [pc, #320]	; (8004738 <HAL_I2C_Master_Transmit+0x1f8>)
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045f8:	8979      	ldrh	r1, [r7, #10]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6a3a      	ldr	r2, [r7, #32]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f89c 	bl	800473c <I2C_MasterRequestWrite>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e08d      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004624:	e066      	b.n	80046f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	6a39      	ldr	r1, [r7, #32]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f9de 	bl	80049ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b04      	cmp	r3, #4
 800463c:	d107      	bne.n	800464e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e06b      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	781a      	ldrb	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b04      	cmp	r3, #4
 800468e:	d11b      	bne.n	80046c8 <HAL_I2C_Master_Transmit+0x188>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	2b00      	cmp	r3, #0
 8004696:	d017      	beq.n	80046c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	6a39      	ldr	r1, [r7, #32]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f9ce 	bl	8004a6e <I2C_WaitOnBTFFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d107      	bne.n	80046f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e01a      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d194      	bne.n	8004626 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	00100002 	.word	0x00100002
 8004738:	ffff0000 	.word	0xffff0000

0800473c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	460b      	mov	r3, r1
 800474a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d006      	beq.n	8004766 <I2C_MasterRequestWrite+0x2a>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d003      	beq.n	8004766 <I2C_MasterRequestWrite+0x2a>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004764:	d108      	bne.n	8004778 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e00b      	b.n	8004790 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	2b12      	cmp	r3, #18
 800477e:	d107      	bne.n	8004790 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f84f 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b6:	d103      	bne.n	80047c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e035      	b.n	8004830 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047cc:	d108      	bne.n	80047e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ce:	897b      	ldrh	r3, [r7, #10]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047dc:	611a      	str	r2, [r3, #16]
 80047de:	e01b      	b.n	8004818 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047e0:	897b      	ldrh	r3, [r7, #10]
 80047e2:	11db      	asrs	r3, r3, #7
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0306 	and.w	r3, r3, #6
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f063 030f 	orn	r3, r3, #15
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	490e      	ldr	r1, [pc, #56]	; (8004838 <I2C_MasterRequestWrite+0xfc>)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f875 	bl	80048ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e010      	b.n	8004830 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800480e:	897b      	ldrh	r3, [r7, #10]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4907      	ldr	r1, [pc, #28]	; (800483c <I2C_MasterRequestWrite+0x100>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f865 	bl	80048ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	00010008 	.word	0x00010008
 800483c:	00010002 	.word	0x00010002

08004840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004850:	e025      	b.n	800489e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d021      	beq.n	800489e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7ff f809 	bl	8003870 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e023      	b.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10d      	bne.n	80048c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	43da      	mvns	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4013      	ands	r3, r2
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	e00c      	b.n	80048de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	43da      	mvns	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4013      	ands	r3, r2
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d0b6      	beq.n	8004852 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048fc:	e051      	b.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490c:	d123      	bne.n	8004956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004926:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e046      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d021      	beq.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495e:	f7fe ff87 	bl	8003870 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d116      	bne.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e020      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10c      	bne.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e00b      	b.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	43da      	mvns	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4013      	ands	r3, r2
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d18d      	bne.n	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f8:	e02d      	b.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f878 	bl	8004af0 <I2C_IsAcknowledgeFailed>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e02d      	b.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d021      	beq.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fe ff2d 	bl	8003870 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d116      	bne.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e007      	b.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d1ca      	bne.n	80049fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a7a:	e02d      	b.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f837 	bl	8004af0 <I2C_IsAcknowledgeFailed>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e02d      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d021      	beq.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a94:	f7fe feec 	bl	8003870 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d302      	bcc.n	8004aaa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d116      	bne.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e007      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d1ca      	bne.n	8004a7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d11b      	bne.n	8004b40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f043 0204 	orr.w	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e272      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 8087 	beq.w	8004c7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b6c:	4b92      	ldr	r3, [pc, #584]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d00c      	beq.n	8004b92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b78:	4b8f      	ldr	r3, [pc, #572]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 030c 	and.w	r3, r3, #12
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d112      	bne.n	8004baa <HAL_RCC_OscConfig+0x5e>
 8004b84:	4b8c      	ldr	r3, [pc, #560]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b90:	d10b      	bne.n	8004baa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b92:	4b89      	ldr	r3, [pc, #548]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d06c      	beq.n	8004c78 <HAL_RCC_OscConfig+0x12c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d168      	bne.n	8004c78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e24c      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x76>
 8004bb4:	4b80      	ldr	r3, [pc, #512]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a7f      	ldr	r2, [pc, #508]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e02e      	b.n	8004c20 <HAL_RCC_OscConfig+0xd4>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCC_OscConfig+0x98>
 8004bca:	4b7b      	ldr	r3, [pc, #492]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a7a      	ldr	r2, [pc, #488]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	4b78      	ldr	r3, [pc, #480]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a77      	ldr	r2, [pc, #476]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e01d      	b.n	8004c20 <HAL_RCC_OscConfig+0xd4>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0xbc>
 8004bee:	4b72      	ldr	r3, [pc, #456]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a71      	ldr	r2, [pc, #452]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b6f      	ldr	r3, [pc, #444]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6e      	ldr	r2, [pc, #440]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0xd4>
 8004c08:	4b6b      	ldr	r3, [pc, #428]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a6a      	ldr	r2, [pc, #424]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b68      	ldr	r3, [pc, #416]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a67      	ldr	r2, [pc, #412]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c28:	f7fe fe22 	bl	8003870 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fe fe1e 	bl	8003870 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e200      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	4b5d      	ldr	r3, [pc, #372]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0xe4>
 8004c4e:	e014      	b.n	8004c7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fe fe0e 	bl	8003870 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fe fe0a 	bl	8003870 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e1ec      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x10c>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d063      	beq.n	8004d4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c86:	4b4c      	ldr	r3, [pc, #304]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c92:	4b49      	ldr	r3, [pc, #292]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d11c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x18c>
 8004c9e:	4b46      	ldr	r3, [pc, #280]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d116      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004caa:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x176>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e1c0      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc2:	4b3d      	ldr	r3, [pc, #244]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4939      	ldr	r1, [pc, #228]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd6:	e03a      	b.n	8004d4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ce0:	4b36      	ldr	r3, [pc, #216]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fe fdc3 	bl	8003870 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cee:	f7fe fdbf 	bl	8003870 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e1a1      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4927      	ldr	r1, [pc, #156]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	600b      	str	r3, [r1, #0]
 8004d20:	e015      	b.n	8004d4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <HAL_RCC_OscConfig+0x270>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fe fda2 	bl	8003870 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d30:	f7fe fd9e 	bl	8003870 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e180      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d42:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d03a      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d019      	beq.n	8004d96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d62:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d68:	f7fe fd82 	bl	8003870 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d70:	f7fe fd7e 	bl	8003870 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e160      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <HAL_RCC_OscConfig+0x26c>)
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d8e:	2001      	movs	r0, #1
 8004d90:	f000 fac4 	bl	800531c <RCC_Delay>
 8004d94:	e01c      	b.n	8004dd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <HAL_RCC_OscConfig+0x274>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9c:	f7fe fd68 	bl	8003870 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da2:	e00f      	b.n	8004dc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da4:	f7fe fd64 	bl	8003870 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d908      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e146      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	42420000 	.word	0x42420000
 8004dc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc4:	4b92      	ldr	r3, [pc, #584]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e9      	bne.n	8004da4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80a6 	beq.w	8004f2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de2:	4b8b      	ldr	r3, [pc, #556]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10d      	bne.n	8004e0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dee:	4b88      	ldr	r3, [pc, #544]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	4a87      	ldr	r2, [pc, #540]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df8:	61d3      	str	r3, [r2, #28]
 8004dfa:	4b85      	ldr	r3, [pc, #532]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e06:	2301      	movs	r3, #1
 8004e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0a:	4b82      	ldr	r3, [pc, #520]	; (8005014 <HAL_RCC_OscConfig+0x4c8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d118      	bne.n	8004e48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e16:	4b7f      	ldr	r3, [pc, #508]	; (8005014 <HAL_RCC_OscConfig+0x4c8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a7e      	ldr	r2, [pc, #504]	; (8005014 <HAL_RCC_OscConfig+0x4c8>)
 8004e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e22:	f7fe fd25 	bl	8003870 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2a:	f7fe fd21 	bl	8003870 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b64      	cmp	r3, #100	; 0x64
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e103      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	4b75      	ldr	r3, [pc, #468]	; (8005014 <HAL_RCC_OscConfig+0x4c8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCC_OscConfig+0x312>
 8004e50:	4b6f      	ldr	r3, [pc, #444]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	4a6e      	ldr	r2, [pc, #440]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	6213      	str	r3, [r2, #32]
 8004e5c:	e02d      	b.n	8004eba <HAL_RCC_OscConfig+0x36e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x334>
 8004e66:	4b6a      	ldr	r3, [pc, #424]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a69      	ldr	r2, [pc, #420]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	6213      	str	r3, [r2, #32]
 8004e72:	4b67      	ldr	r3, [pc, #412]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	4a66      	ldr	r2, [pc, #408]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e78:	f023 0304 	bic.w	r3, r3, #4
 8004e7c:	6213      	str	r3, [r2, #32]
 8004e7e:	e01c      	b.n	8004eba <HAL_RCC_OscConfig+0x36e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b05      	cmp	r3, #5
 8004e86:	d10c      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x356>
 8004e88:	4b61      	ldr	r3, [pc, #388]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4a60      	ldr	r2, [pc, #384]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e8e:	f043 0304 	orr.w	r3, r3, #4
 8004e92:	6213      	str	r3, [r2, #32]
 8004e94:	4b5e      	ldr	r3, [pc, #376]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	4a5d      	ldr	r2, [pc, #372]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	6213      	str	r3, [r2, #32]
 8004ea0:	e00b      	b.n	8004eba <HAL_RCC_OscConfig+0x36e>
 8004ea2:	4b5b      	ldr	r3, [pc, #364]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	4a5a      	ldr	r2, [pc, #360]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	6213      	str	r3, [r2, #32]
 8004eae:	4b58      	ldr	r3, [pc, #352]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	4a57      	ldr	r2, [pc, #348]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	f023 0304 	bic.w	r3, r3, #4
 8004eb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d015      	beq.n	8004eee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec2:	f7fe fcd5 	bl	8003870 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec8:	e00a      	b.n	8004ee0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eca:	f7fe fcd1 	bl	8003870 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e0b1      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee0:	4b4b      	ldr	r3, [pc, #300]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ee      	beq.n	8004eca <HAL_RCC_OscConfig+0x37e>
 8004eec:	e014      	b.n	8004f18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eee:	f7fe fcbf 	bl	8003870 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef6:	f7fe fcbb 	bl	8003870 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e09b      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0c:	4b40      	ldr	r3, [pc, #256]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ee      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d105      	bne.n	8004f2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1e:	4b3c      	ldr	r3, [pc, #240]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	4a3b      	ldr	r2, [pc, #236]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8087 	beq.w	8005042 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f34:	4b36      	ldr	r3, [pc, #216]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d061      	beq.n	8005004 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d146      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f48:	4b33      	ldr	r3, [pc, #204]	; (8005018 <HAL_RCC_OscConfig+0x4cc>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4e:	f7fe fc8f 	bl	8003870 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f56:	f7fe fc8b 	bl	8003870 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e06d      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f68:	4b29      	ldr	r3, [pc, #164]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7c:	d108      	bne.n	8004f90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	4921      	ldr	r1, [pc, #132]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f90:	4b1f      	ldr	r3, [pc, #124]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a19      	ldr	r1, [r3, #32]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	491b      	ldr	r1, [pc, #108]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_RCC_OscConfig+0x4cc>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fae:	f7fe fc5f 	bl	8003870 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb6:	f7fe fc5b 	bl	8003870 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e03d      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x46a>
 8004fd4:	e035      	b.n	8005042 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd6:	4b10      	ldr	r3, [pc, #64]	; (8005018 <HAL_RCC_OscConfig+0x4cc>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fc48 	bl	8003870 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fe fc44 	bl	8003870 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e026      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x498>
 8005002:	e01e      	b.n	8005042 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e019      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
 8005010:	40021000 	.word	0x40021000
 8005014:	40007000 	.word	0x40007000
 8005018:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCC_OscConfig+0x500>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	429a      	cmp	r2, r3
 800502e:	d106      	bne.n	800503e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d001      	beq.n	8005042 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40021000 	.word	0x40021000

08005050 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0d0      	b.n	8005206 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005064:	4b6a      	ldr	r3, [pc, #424]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d910      	bls.n	8005094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005072:	4b67      	ldr	r3, [pc, #412]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 0207 	bic.w	r2, r3, #7
 800507a:	4965      	ldr	r1, [pc, #404]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005082:	4b63      	ldr	r3, [pc, #396]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d001      	beq.n	8005094 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0b8      	b.n	8005206 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d020      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050ac:	4b59      	ldr	r3, [pc, #356]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4a58      	ldr	r2, [pc, #352]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80050b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050c4:	4b53      	ldr	r3, [pc, #332]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a52      	ldr	r2, [pc, #328]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80050ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d0:	4b50      	ldr	r3, [pc, #320]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	494d      	ldr	r1, [pc, #308]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d040      	beq.n	8005170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	4b47      	ldr	r3, [pc, #284]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d115      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e07f      	b.n	8005206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d107      	bne.n	800511e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510e:	4b41      	ldr	r3, [pc, #260]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e073      	b.n	8005206 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511e:	4b3d      	ldr	r3, [pc, #244]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e06b      	b.n	8005206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800512e:	4b39      	ldr	r3, [pc, #228]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4936      	ldr	r1, [pc, #216]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	4313      	orrs	r3, r2
 800513e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005140:	f7fe fb96 	bl	8003870 <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7fe fb92 	bl	8003870 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e053      	b.n	8005206 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515e:	4b2d      	ldr	r3, [pc, #180]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f003 020c 	and.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	429a      	cmp	r2, r3
 800516e:	d1eb      	bne.n	8005148 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d210      	bcs.n	80051a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 0207 	bic.w	r2, r3, #7
 8005186:	4922      	ldr	r1, [pc, #136]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b20      	ldr	r3, [pc, #128]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e032      	b.n	8005206 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ac:	4b19      	ldr	r3, [pc, #100]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4916      	ldr	r1, [pc, #88]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	490e      	ldr	r1, [pc, #56]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051de:	f000 f821 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 80051e2:	4602      	mov	r2, r0
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	490a      	ldr	r1, [pc, #40]	; (8005218 <HAL_RCC_ClockConfig+0x1c8>)
 80051f0:	5ccb      	ldrb	r3, [r1, r3]
 80051f2:	fa22 f303 	lsr.w	r3, r2, r3
 80051f6:	4a09      	ldr	r2, [pc, #36]	; (800521c <HAL_RCC_ClockConfig+0x1cc>)
 80051f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <HAL_RCC_ClockConfig+0x1d0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe faf4 	bl	80037ec <HAL_InitTick>

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40022000 	.word	0x40022000
 8005214:	40021000 	.word	0x40021000
 8005218:	08008218 	.word	0x08008218
 800521c:	2000005c 	.word	0x2000005c
 8005220:	200000e8 	.word	0x200000e8

08005224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005224:	b490      	push	{r4, r7}
 8005226:	b08a      	sub	sp, #40	; 0x28
 8005228:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800522a:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800522c:	1d3c      	adds	r4, r7, #4
 800522e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005234:	f240 2301 	movw	r3, #513	; 0x201
 8005238:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	2300      	movs	r3, #0
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800524e:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 030c 	and.w	r3, r3, #12
 800525a:	2b04      	cmp	r3, #4
 800525c:	d002      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x40>
 800525e:	2b08      	cmp	r3, #8
 8005260:	d003      	beq.n	800526a <HAL_RCC_GetSysClockFreq+0x46>
 8005262:	e02b      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005266:	623b      	str	r3, [r7, #32]
      break;
 8005268:	e02b      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	0c9b      	lsrs	r3, r3, #18
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	3328      	adds	r3, #40	; 0x28
 8005274:	443b      	add	r3, r7
 8005276:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800527a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d012      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005286:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	0c5b      	lsrs	r3, r3, #17
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	3328      	adds	r3, #40	; 0x28
 8005292:	443b      	add	r3, r7
 8005294:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005298:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	4a0e      	ldr	r2, [pc, #56]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800529e:	fb03 f202 	mul.w	r2, r3, r2
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	e004      	b.n	80052b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	4a0b      	ldr	r2, [pc, #44]	; (80052dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b0:	fb02 f303 	mul.w	r3, r2, r3
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	623b      	str	r3, [r7, #32]
      break;
 80052ba:	e002      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052bc:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052be:	623b      	str	r3, [r7, #32]
      break;
 80052c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052c2:	6a3b      	ldr	r3, [r7, #32]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3728      	adds	r7, #40	; 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc90      	pop	{r4, r7}
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	080075ec 	.word	0x080075ec
 80052d4:	40021000 	.word	0x40021000
 80052d8:	007a1200 	.word	0x007a1200
 80052dc:	003d0900 	.word	0x003d0900

080052e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e4:	4b02      	ldr	r3, [pc, #8]	; (80052f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80052e6:	681b      	ldr	r3, [r3, #0]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr
 80052f0:	2000005c 	.word	0x2000005c

080052f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052f8:	f7ff fff2 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4903      	ldr	r1, [pc, #12]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000
 8005318:	08008228 	.word	0x08008228

0800531c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <RCC_Delay+0x34>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <RCC_Delay+0x38>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	0a5b      	lsrs	r3, r3, #9
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005338:	bf00      	nop
  }
  while (Delay --);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1e5a      	subs	r2, r3, #1
 800533e:	60fa      	str	r2, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f9      	bne.n	8005338 <RCC_Delay+0x1c>
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr
 8005350:	2000005c 	.word	0x2000005c
 8005354:	10624dd3 	.word	0x10624dd3

08005358 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d07d      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005374:	2300      	movs	r3, #0
 8005376:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005378:	4b4f      	ldr	r3, [pc, #316]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10d      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005384:	4b4c      	ldr	r3, [pc, #304]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	4a4b      	ldr	r2, [pc, #300]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538e:	61d3      	str	r3, [r2, #28]
 8005390:	4b49      	ldr	r3, [pc, #292]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800539c:	2301      	movs	r3, #1
 800539e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a0:	4b46      	ldr	r3, [pc, #280]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d118      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ac:	4b43      	ldr	r3, [pc, #268]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a42      	ldr	r2, [pc, #264]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053b8:	f7fe fa5a 	bl	8003870 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053be:	e008      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c0:	f7fe fa56 	bl	8003870 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	; 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e06d      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d2:	4b3a      	ldr	r3, [pc, #232]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053de:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02e      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d027      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005404:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005406:	4b2e      	ldr	r3, [pc, #184]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005408:	2201      	movs	r2, #1
 800540a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800540c:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005412:	4a29      	ldr	r2, [pc, #164]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d014      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005422:	f7fe fa25 	bl	8003870 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005428:	e00a      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542a:	f7fe fa21 	bl	8003870 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	f241 3288 	movw	r2, #5000	; 0x1388
 8005438:	4293      	cmp	r3, r2
 800543a:	d901      	bls.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e036      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ee      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800544c:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4917      	ldr	r1, [pc, #92]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545a:	4313      	orrs	r3, r2
 800545c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d105      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005464:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	490b      	ldr	r1, [pc, #44]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548a:	4313      	orrs	r3, r2
 800548c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	4904      	ldr	r1, [pc, #16]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40007000 	.word	0x40007000
 80054c0:	42420440 	.word	0x42420440

080054c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e076      	b.n	80055c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d108      	bne.n	80054f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d009      	beq.n	80054fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	61da      	str	r2, [r3, #28]
 80054ee:	e005      	b.n	80054fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc fdb8 	bl	800208c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005532:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005580:	ea42 0103 	orr.w	r1, r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	0c1a      	lsrs	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f002 0204 	and.w	r2, r2, #4
 80055a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08c      	sub	sp, #48	; 0x30
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055da:	2301      	movs	r3, #1
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x26>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e18a      	b.n	8005908 <HAL_SPI_TransmitReceive+0x33c>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055fa:	f7fe f939 	bl	8003870 <HAL_GetTick>
 80055fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005610:	887b      	ldrh	r3, [r7, #2]
 8005612:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005618:	2b01      	cmp	r3, #1
 800561a:	d00f      	beq.n	800563c <HAL_SPI_TransmitReceive+0x70>
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005622:	d107      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x68>
 800562c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005630:	2b04      	cmp	r3, #4
 8005632:	d003      	beq.n	800563c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005634:	2302      	movs	r3, #2
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800563a:	e15b      	b.n	80058f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_SPI_TransmitReceive+0x82>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_SPI_TransmitReceive+0x82>
 8005648:	887b      	ldrh	r3, [r7, #2]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005654:	e14e      	b.n	80058f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b04      	cmp	r3, #4
 8005660:	d003      	beq.n	800566a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2205      	movs	r2, #5
 8005666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	887a      	ldrh	r2, [r7, #2]
 800567a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	887a      	ldrh	r2, [r7, #2]
 800568c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	887a      	ldrh	r2, [r7, #2]
 8005692:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d007      	beq.n	80056be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c6:	d178      	bne.n	80057ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_SPI_TransmitReceive+0x10a>
 80056d0:	8b7b      	ldrh	r3, [r7, #26]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d166      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056fa:	e053      	b.n	80057a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b02      	cmp	r3, #2
 8005708:	d11b      	bne.n	8005742 <HAL_SPI_TransmitReceive+0x176>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d016      	beq.n	8005742 <HAL_SPI_TransmitReceive+0x176>
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d113      	bne.n	8005742 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	881a      	ldrh	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	1c9a      	adds	r2, r3, #2
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d119      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x1b8>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d014      	beq.n	8005784 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	b292      	uxth	r2, r2
 8005766:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	1c9a      	adds	r2, r3, #2
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005780:	2301      	movs	r3, #1
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005784:	f7fe f874 	bl	8003870 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005790:	429a      	cmp	r2, r3
 8005792:	d807      	bhi.n	80057a4 <HAL_SPI_TransmitReceive+0x1d8>
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d003      	beq.n	80057a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057a2:	e0a7      	b.n	80058f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1a6      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x130>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1a1      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x130>
 80057b8:	e07c      	b.n	80058b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_SPI_TransmitReceive+0x1fc>
 80057c2:	8b7b      	ldrh	r3, [r7, #26]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d16b      	bne.n	80058a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ee:	e057      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d11c      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x26c>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d017      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x26c>
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	2b01      	cmp	r3, #1
 800580c:	d114      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	7812      	ldrb	r2, [r2, #0]
 800581a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b01      	cmp	r3, #1
 8005844:	d119      	bne.n	800587a <HAL_SPI_TransmitReceive+0x2ae>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d014      	beq.n	800587a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005876:	2301      	movs	r3, #1
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800587a:	f7fd fff9 	bl	8003870 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005886:	429a      	cmp	r2, r3
 8005888:	d803      	bhi.n	8005892 <HAL_SPI_TransmitReceive+0x2c6>
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005890:	d102      	bne.n	8005898 <HAL_SPI_TransmitReceive+0x2cc>
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	2b00      	cmp	r3, #0
 8005896:	d103      	bne.n	80058a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800589e:	e029      	b.n	80058f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1a2      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x224>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d19d      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f8b1 	bl	8005a20 <SPI_EndRxTxTransaction>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d006      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058d0:	e010      	b.n	80058f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	e000      	b.n	80058f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80058f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005904:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005908:	4618      	mov	r0, r3
 800590a:	3730      	adds	r7, #48	; 0x30
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005920:	f7fd ffa6 	bl	8003870 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	4413      	add	r3, r2
 800592e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005930:	f7fd ff9e 	bl	8003870 <HAL_GetTick>
 8005934:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005936:	4b39      	ldr	r3, [pc, #228]	; (8005a1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	015b      	lsls	r3, r3, #5
 800593c:	0d1b      	lsrs	r3, r3, #20
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	fb02 f303 	mul.w	r3, r2, r3
 8005944:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005946:	e054      	b.n	80059f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594e:	d050      	beq.n	80059f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005950:	f7fd ff8e 	bl	8003870 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	429a      	cmp	r2, r3
 800595e:	d902      	bls.n	8005966 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d13d      	bne.n	80059e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597e:	d111      	bne.n	80059a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005988:	d004      	beq.n	8005994 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005992:	d107      	bne.n	80059a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ac:	d10f      	bne.n	80059ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e017      	b.n	8005a12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4013      	ands	r3, r2
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	bf0c      	ite	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	2300      	movne	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d19b      	bne.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3720      	adds	r7, #32
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	2000005c 	.word	0x2000005c

08005a20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2200      	movs	r2, #0
 8005a34:	2180      	movs	r1, #128	; 0x80
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff ff6a 	bl	8005910 <SPI_WaitFlagStateUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	f043 0220 	orr.w	r2, r3, #32
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e000      	b.n	8005a54 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <__errno>:
 8005a5c:	4b01      	ldr	r3, [pc, #4]	; (8005a64 <__errno+0x8>)
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	200000f0 	.word	0x200000f0

08005a68 <__libc_init_array>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	4d0c      	ldr	r5, [pc, #48]	; (8005aa0 <__libc_init_array+0x38>)
 8005a6e:	4c0d      	ldr	r4, [pc, #52]	; (8005aa4 <__libc_init_array+0x3c>)
 8005a70:	1b64      	subs	r4, r4, r5
 8005a72:	10a4      	asrs	r4, r4, #2
 8005a74:	42a6      	cmp	r6, r4
 8005a76:	d109      	bne.n	8005a8c <__libc_init_array+0x24>
 8005a78:	f001 fcdc 	bl	8007434 <_init>
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	4d0a      	ldr	r5, [pc, #40]	; (8005aa8 <__libc_init_array+0x40>)
 8005a80:	4c0a      	ldr	r4, [pc, #40]	; (8005aac <__libc_init_array+0x44>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	42a6      	cmp	r6, r4
 8005a88:	d105      	bne.n	8005a96 <__libc_init_array+0x2e>
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a90:	4798      	blx	r3
 8005a92:	3601      	adds	r6, #1
 8005a94:	e7ee      	b.n	8005a74 <__libc_init_array+0xc>
 8005a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9a:	4798      	blx	r3
 8005a9c:	3601      	adds	r6, #1
 8005a9e:	e7f2      	b.n	8005a86 <__libc_init_array+0x1e>
 8005aa0:	08008458 	.word	0x08008458
 8005aa4:	08008458 	.word	0x08008458
 8005aa8:	08008458 	.word	0x08008458
 8005aac:	0800845c 	.word	0x0800845c

08005ab0 <memcpy>:
 8005ab0:	440a      	add	r2, r1
 8005ab2:	4291      	cmp	r1, r2
 8005ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ab8:	d100      	bne.n	8005abc <memcpy+0xc>
 8005aba:	4770      	bx	lr
 8005abc:	b510      	push	{r4, lr}
 8005abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ac2:	4291      	cmp	r1, r2
 8005ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ac8:	d1f9      	bne.n	8005abe <memcpy+0xe>
 8005aca:	bd10      	pop	{r4, pc}

08005acc <memset>:
 8005acc:	4603      	mov	r3, r0
 8005ace:	4402      	add	r2, r0
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d100      	bne.n	8005ad6 <memset+0xa>
 8005ad4:	4770      	bx	lr
 8005ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8005ada:	e7f9      	b.n	8005ad0 <memset+0x4>

08005adc <siprintf>:
 8005adc:	b40e      	push	{r1, r2, r3}
 8005ade:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ae2:	b500      	push	{lr}
 8005ae4:	b09c      	sub	sp, #112	; 0x70
 8005ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ae8:	9002      	str	r0, [sp, #8]
 8005aea:	9006      	str	r0, [sp, #24]
 8005aec:	9107      	str	r1, [sp, #28]
 8005aee:	9104      	str	r1, [sp, #16]
 8005af0:	4808      	ldr	r0, [pc, #32]	; (8005b14 <siprintf+0x38>)
 8005af2:	4909      	ldr	r1, [pc, #36]	; (8005b18 <siprintf+0x3c>)
 8005af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005af8:	9105      	str	r1, [sp, #20]
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	a902      	add	r1, sp, #8
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	f000 f868 	bl	8005bd4 <_svfiprintf_r>
 8005b04:	2200      	movs	r2, #0
 8005b06:	9b02      	ldr	r3, [sp, #8]
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	b01c      	add	sp, #112	; 0x70
 8005b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b10:	b003      	add	sp, #12
 8005b12:	4770      	bx	lr
 8005b14:	200000f0 	.word	0x200000f0
 8005b18:	ffff0208 	.word	0xffff0208

08005b1c <__ssputs_r>:
 8005b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	688e      	ldr	r6, [r1, #8]
 8005b22:	4682      	mov	sl, r0
 8005b24:	429e      	cmp	r6, r3
 8005b26:	460c      	mov	r4, r1
 8005b28:	4690      	mov	r8, r2
 8005b2a:	461f      	mov	r7, r3
 8005b2c:	d838      	bhi.n	8005ba0 <__ssputs_r+0x84>
 8005b2e:	898a      	ldrh	r2, [r1, #12]
 8005b30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b34:	d032      	beq.n	8005b9c <__ssputs_r+0x80>
 8005b36:	6825      	ldr	r5, [r4, #0]
 8005b38:	6909      	ldr	r1, [r1, #16]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	eba5 0901 	sub.w	r9, r5, r1
 8005b40:	6965      	ldr	r5, [r4, #20]
 8005b42:	444b      	add	r3, r9
 8005b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b4c:	106d      	asrs	r5, r5, #1
 8005b4e:	429d      	cmp	r5, r3
 8005b50:	bf38      	it	cc
 8005b52:	461d      	movcc	r5, r3
 8005b54:	0553      	lsls	r3, r2, #21
 8005b56:	d531      	bpl.n	8005bbc <__ssputs_r+0xa0>
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f000 fb61 	bl	8006220 <_malloc_r>
 8005b5e:	4606      	mov	r6, r0
 8005b60:	b950      	cbnz	r0, 8005b78 <__ssputs_r+0x5c>
 8005b62:	230c      	movs	r3, #12
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	f8ca 3000 	str.w	r3, [sl]
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b78:	464a      	mov	r2, r9
 8005b7a:	6921      	ldr	r1, [r4, #16]
 8005b7c:	f7ff ff98 	bl	8005ab0 <memcpy>
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8a:	81a3      	strh	r3, [r4, #12]
 8005b8c:	6126      	str	r6, [r4, #16]
 8005b8e:	444e      	add	r6, r9
 8005b90:	6026      	str	r6, [r4, #0]
 8005b92:	463e      	mov	r6, r7
 8005b94:	6165      	str	r5, [r4, #20]
 8005b96:	eba5 0509 	sub.w	r5, r5, r9
 8005b9a:	60a5      	str	r5, [r4, #8]
 8005b9c:	42be      	cmp	r6, r7
 8005b9e:	d900      	bls.n	8005ba2 <__ssputs_r+0x86>
 8005ba0:	463e      	mov	r6, r7
 8005ba2:	4632      	mov	r2, r6
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	6820      	ldr	r0, [r4, #0]
 8005ba8:	f000 fab8 	bl	800611c <memmove>
 8005bac:	68a3      	ldr	r3, [r4, #8]
 8005bae:	2000      	movs	r0, #0
 8005bb0:	1b9b      	subs	r3, r3, r6
 8005bb2:	60a3      	str	r3, [r4, #8]
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	4433      	add	r3, r6
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	e7db      	b.n	8005b74 <__ssputs_r+0x58>
 8005bbc:	462a      	mov	r2, r5
 8005bbe:	f000 fba3 	bl	8006308 <_realloc_r>
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d1e1      	bne.n	8005b8c <__ssputs_r+0x70>
 8005bc8:	4650      	mov	r0, sl
 8005bca:	6921      	ldr	r1, [r4, #16]
 8005bcc:	f000 fac0 	bl	8006150 <_free_r>
 8005bd0:	e7c7      	b.n	8005b62 <__ssputs_r+0x46>
	...

08005bd4 <_svfiprintf_r>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	4698      	mov	r8, r3
 8005bda:	898b      	ldrh	r3, [r1, #12]
 8005bdc:	4607      	mov	r7, r0
 8005bde:	061b      	lsls	r3, r3, #24
 8005be0:	460d      	mov	r5, r1
 8005be2:	4614      	mov	r4, r2
 8005be4:	b09d      	sub	sp, #116	; 0x74
 8005be6:	d50e      	bpl.n	8005c06 <_svfiprintf_r+0x32>
 8005be8:	690b      	ldr	r3, [r1, #16]
 8005bea:	b963      	cbnz	r3, 8005c06 <_svfiprintf_r+0x32>
 8005bec:	2140      	movs	r1, #64	; 0x40
 8005bee:	f000 fb17 	bl	8006220 <_malloc_r>
 8005bf2:	6028      	str	r0, [r5, #0]
 8005bf4:	6128      	str	r0, [r5, #16]
 8005bf6:	b920      	cbnz	r0, 8005c02 <_svfiprintf_r+0x2e>
 8005bf8:	230c      	movs	r3, #12
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005c00:	e0d1      	b.n	8005da6 <_svfiprintf_r+0x1d2>
 8005c02:	2340      	movs	r3, #64	; 0x40
 8005c04:	616b      	str	r3, [r5, #20]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0a:	2320      	movs	r3, #32
 8005c0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c10:	2330      	movs	r3, #48	; 0x30
 8005c12:	f04f 0901 	mov.w	r9, #1
 8005c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005dc0 <_svfiprintf_r+0x1ec>
 8005c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c22:	4623      	mov	r3, r4
 8005c24:	469a      	mov	sl, r3
 8005c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c2a:	b10a      	cbz	r2, 8005c30 <_svfiprintf_r+0x5c>
 8005c2c:	2a25      	cmp	r2, #37	; 0x25
 8005c2e:	d1f9      	bne.n	8005c24 <_svfiprintf_r+0x50>
 8005c30:	ebba 0b04 	subs.w	fp, sl, r4
 8005c34:	d00b      	beq.n	8005c4e <_svfiprintf_r+0x7a>
 8005c36:	465b      	mov	r3, fp
 8005c38:	4622      	mov	r2, r4
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	f7ff ff6d 	bl	8005b1c <__ssputs_r>
 8005c42:	3001      	adds	r0, #1
 8005c44:	f000 80aa 	beq.w	8005d9c <_svfiprintf_r+0x1c8>
 8005c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c4a:	445a      	add	r2, fp
 8005c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80a2 	beq.w	8005d9c <_svfiprintf_r+0x1c8>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c62:	f10a 0a01 	add.w	sl, sl, #1
 8005c66:	9304      	str	r3, [sp, #16]
 8005c68:	9307      	str	r3, [sp, #28]
 8005c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c70:	4654      	mov	r4, sl
 8005c72:	2205      	movs	r2, #5
 8005c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c78:	4851      	ldr	r0, [pc, #324]	; (8005dc0 <_svfiprintf_r+0x1ec>)
 8005c7a:	f000 fa41 	bl	8006100 <memchr>
 8005c7e:	9a04      	ldr	r2, [sp, #16]
 8005c80:	b9d8      	cbnz	r0, 8005cba <_svfiprintf_r+0xe6>
 8005c82:	06d0      	lsls	r0, r2, #27
 8005c84:	bf44      	itt	mi
 8005c86:	2320      	movmi	r3, #32
 8005c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c8c:	0711      	lsls	r1, r2, #28
 8005c8e:	bf44      	itt	mi
 8005c90:	232b      	movmi	r3, #43	; 0x2b
 8005c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c96:	f89a 3000 	ldrb.w	r3, [sl]
 8005c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9c:	d015      	beq.n	8005cca <_svfiprintf_r+0xf6>
 8005c9e:	4654      	mov	r4, sl
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f04f 0c0a 	mov.w	ip, #10
 8005ca6:	9a07      	ldr	r2, [sp, #28]
 8005ca8:	4621      	mov	r1, r4
 8005caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cae:	3b30      	subs	r3, #48	; 0x30
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d94e      	bls.n	8005d52 <_svfiprintf_r+0x17e>
 8005cb4:	b1b0      	cbz	r0, 8005ce4 <_svfiprintf_r+0x110>
 8005cb6:	9207      	str	r2, [sp, #28]
 8005cb8:	e014      	b.n	8005ce4 <_svfiprintf_r+0x110>
 8005cba:	eba0 0308 	sub.w	r3, r0, r8
 8005cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	46a2      	mov	sl, r4
 8005cc6:	9304      	str	r3, [sp, #16]
 8005cc8:	e7d2      	b.n	8005c70 <_svfiprintf_r+0x9c>
 8005cca:	9b03      	ldr	r3, [sp, #12]
 8005ccc:	1d19      	adds	r1, r3, #4
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	9103      	str	r1, [sp, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bfbb      	ittet	lt
 8005cd6:	425b      	neglt	r3, r3
 8005cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8005cdc:	9307      	strge	r3, [sp, #28]
 8005cde:	9307      	strlt	r3, [sp, #28]
 8005ce0:	bfb8      	it	lt
 8005ce2:	9204      	strlt	r2, [sp, #16]
 8005ce4:	7823      	ldrb	r3, [r4, #0]
 8005ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ce8:	d10c      	bne.n	8005d04 <_svfiprintf_r+0x130>
 8005cea:	7863      	ldrb	r3, [r4, #1]
 8005cec:	2b2a      	cmp	r3, #42	; 0x2a
 8005cee:	d135      	bne.n	8005d5c <_svfiprintf_r+0x188>
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	3402      	adds	r4, #2
 8005cf4:	1d1a      	adds	r2, r3, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	9203      	str	r2, [sp, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfb8      	it	lt
 8005cfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d02:	9305      	str	r3, [sp, #20]
 8005d04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005dc4 <_svfiprintf_r+0x1f0>
 8005d08:	2203      	movs	r2, #3
 8005d0a:	4650      	mov	r0, sl
 8005d0c:	7821      	ldrb	r1, [r4, #0]
 8005d0e:	f000 f9f7 	bl	8006100 <memchr>
 8005d12:	b140      	cbz	r0, 8005d26 <_svfiprintf_r+0x152>
 8005d14:	2340      	movs	r3, #64	; 0x40
 8005d16:	eba0 000a 	sub.w	r0, r0, sl
 8005d1a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d1e:	9b04      	ldr	r3, [sp, #16]
 8005d20:	3401      	adds	r4, #1
 8005d22:	4303      	orrs	r3, r0
 8005d24:	9304      	str	r3, [sp, #16]
 8005d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2a:	2206      	movs	r2, #6
 8005d2c:	4826      	ldr	r0, [pc, #152]	; (8005dc8 <_svfiprintf_r+0x1f4>)
 8005d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d32:	f000 f9e5 	bl	8006100 <memchr>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d038      	beq.n	8005dac <_svfiprintf_r+0x1d8>
 8005d3a:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <_svfiprintf_r+0x1f8>)
 8005d3c:	bb1b      	cbnz	r3, 8005d86 <_svfiprintf_r+0x1b2>
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	3307      	adds	r3, #7
 8005d42:	f023 0307 	bic.w	r3, r3, #7
 8005d46:	3308      	adds	r3, #8
 8005d48:	9303      	str	r3, [sp, #12]
 8005d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4c:	4433      	add	r3, r6
 8005d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d50:	e767      	b.n	8005c22 <_svfiprintf_r+0x4e>
 8005d52:	460c      	mov	r4, r1
 8005d54:	2001      	movs	r0, #1
 8005d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d5a:	e7a5      	b.n	8005ca8 <_svfiprintf_r+0xd4>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f04f 0c0a 	mov.w	ip, #10
 8005d62:	4619      	mov	r1, r3
 8005d64:	3401      	adds	r4, #1
 8005d66:	9305      	str	r3, [sp, #20]
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d6e:	3a30      	subs	r2, #48	; 0x30
 8005d70:	2a09      	cmp	r2, #9
 8005d72:	d903      	bls.n	8005d7c <_svfiprintf_r+0x1a8>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0c5      	beq.n	8005d04 <_svfiprintf_r+0x130>
 8005d78:	9105      	str	r1, [sp, #20]
 8005d7a:	e7c3      	b.n	8005d04 <_svfiprintf_r+0x130>
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	2301      	movs	r3, #1
 8005d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d84:	e7f0      	b.n	8005d68 <_svfiprintf_r+0x194>
 8005d86:	ab03      	add	r3, sp, #12
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	462a      	mov	r2, r5
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <_svfiprintf_r+0x1fc>)
 8005d90:	a904      	add	r1, sp, #16
 8005d92:	f3af 8000 	nop.w
 8005d96:	1c42      	adds	r2, r0, #1
 8005d98:	4606      	mov	r6, r0
 8005d9a:	d1d6      	bne.n	8005d4a <_svfiprintf_r+0x176>
 8005d9c:	89ab      	ldrh	r3, [r5, #12]
 8005d9e:	065b      	lsls	r3, r3, #25
 8005da0:	f53f af2c 	bmi.w	8005bfc <_svfiprintf_r+0x28>
 8005da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005da6:	b01d      	add	sp, #116	; 0x74
 8005da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dac:	ab03      	add	r3, sp, #12
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	462a      	mov	r2, r5
 8005db2:	4638      	mov	r0, r7
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <_svfiprintf_r+0x1fc>)
 8005db6:	a904      	add	r1, sp, #16
 8005db8:	f000 f87c 	bl	8005eb4 <_printf_i>
 8005dbc:	e7eb      	b.n	8005d96 <_svfiprintf_r+0x1c2>
 8005dbe:	bf00      	nop
 8005dc0:	08008247 	.word	0x08008247
 8005dc4:	0800824d 	.word	0x0800824d
 8005dc8:	08008251 	.word	0x08008251
 8005dcc:	00000000 	.word	0x00000000
 8005dd0:	08005b1d 	.word	0x08005b1d

08005dd4 <_printf_common>:
 8005dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd8:	4616      	mov	r6, r2
 8005dda:	4699      	mov	r9, r3
 8005ddc:	688a      	ldr	r2, [r1, #8]
 8005dde:	690b      	ldr	r3, [r1, #16]
 8005de0:	4607      	mov	r7, r0
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bfb8      	it	lt
 8005de6:	4613      	movlt	r3, r2
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dee:	460c      	mov	r4, r1
 8005df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df4:	b10a      	cbz	r2, 8005dfa <_printf_common+0x26>
 8005df6:	3301      	adds	r3, #1
 8005df8:	6033      	str	r3, [r6, #0]
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	0699      	lsls	r1, r3, #26
 8005dfe:	bf42      	ittt	mi
 8005e00:	6833      	ldrmi	r3, [r6, #0]
 8005e02:	3302      	addmi	r3, #2
 8005e04:	6033      	strmi	r3, [r6, #0]
 8005e06:	6825      	ldr	r5, [r4, #0]
 8005e08:	f015 0506 	ands.w	r5, r5, #6
 8005e0c:	d106      	bne.n	8005e1c <_printf_common+0x48>
 8005e0e:	f104 0a19 	add.w	sl, r4, #25
 8005e12:	68e3      	ldr	r3, [r4, #12]
 8005e14:	6832      	ldr	r2, [r6, #0]
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	42ab      	cmp	r3, r5
 8005e1a:	dc28      	bgt.n	8005e6e <_printf_common+0x9a>
 8005e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e20:	1e13      	subs	r3, r2, #0
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	bf18      	it	ne
 8005e26:	2301      	movne	r3, #1
 8005e28:	0692      	lsls	r2, r2, #26
 8005e2a:	d42d      	bmi.n	8005e88 <_printf_common+0xb4>
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	4638      	mov	r0, r7
 8005e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e34:	47c0      	blx	r8
 8005e36:	3001      	adds	r0, #1
 8005e38:	d020      	beq.n	8005e7c <_printf_common+0xa8>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	68e5      	ldr	r5, [r4, #12]
 8005e3e:	f003 0306 	and.w	r3, r3, #6
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	bf18      	it	ne
 8005e46:	2500      	movne	r5, #0
 8005e48:	6832      	ldr	r2, [r6, #0]
 8005e4a:	f04f 0600 	mov.w	r6, #0
 8005e4e:	68a3      	ldr	r3, [r4, #8]
 8005e50:	bf08      	it	eq
 8005e52:	1aad      	subeq	r5, r5, r2
 8005e54:	6922      	ldr	r2, [r4, #16]
 8005e56:	bf08      	it	eq
 8005e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	bfc4      	itt	gt
 8005e60:	1a9b      	subgt	r3, r3, r2
 8005e62:	18ed      	addgt	r5, r5, r3
 8005e64:	341a      	adds	r4, #26
 8005e66:	42b5      	cmp	r5, r6
 8005e68:	d11a      	bne.n	8005ea0 <_printf_common+0xcc>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e008      	b.n	8005e80 <_printf_common+0xac>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4652      	mov	r2, sl
 8005e72:	4649      	mov	r1, r9
 8005e74:	4638      	mov	r0, r7
 8005e76:	47c0      	blx	r8
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d103      	bne.n	8005e84 <_printf_common+0xb0>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e84:	3501      	adds	r5, #1
 8005e86:	e7c4      	b.n	8005e12 <_printf_common+0x3e>
 8005e88:	2030      	movs	r0, #48	; 0x30
 8005e8a:	18e1      	adds	r1, r4, r3
 8005e8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e96:	4422      	add	r2, r4
 8005e98:	3302      	adds	r3, #2
 8005e9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e9e:	e7c5      	b.n	8005e2c <_printf_common+0x58>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c0      	blx	r8
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d0e6      	beq.n	8005e7c <_printf_common+0xa8>
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7d9      	b.n	8005e66 <_printf_common+0x92>
	...

08005eb4 <_printf_i>:
 8005eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	7e0f      	ldrb	r7, [r1, #24]
 8005eba:	4691      	mov	r9, r2
 8005ebc:	2f78      	cmp	r7, #120	; 0x78
 8005ebe:	4680      	mov	r8, r0
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	469a      	mov	sl, r3
 8005ec4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eca:	d807      	bhi.n	8005edc <_printf_i+0x28>
 8005ecc:	2f62      	cmp	r7, #98	; 0x62
 8005ece:	d80a      	bhi.n	8005ee6 <_printf_i+0x32>
 8005ed0:	2f00      	cmp	r7, #0
 8005ed2:	f000 80d9 	beq.w	8006088 <_printf_i+0x1d4>
 8005ed6:	2f58      	cmp	r7, #88	; 0x58
 8005ed8:	f000 80a4 	beq.w	8006024 <_printf_i+0x170>
 8005edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ee4:	e03a      	b.n	8005f5c <_printf_i+0xa8>
 8005ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eea:	2b15      	cmp	r3, #21
 8005eec:	d8f6      	bhi.n	8005edc <_printf_i+0x28>
 8005eee:	a101      	add	r1, pc, #4	; (adr r1, 8005ef4 <_printf_i+0x40>)
 8005ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ef4:	08005f4d 	.word	0x08005f4d
 8005ef8:	08005f61 	.word	0x08005f61
 8005efc:	08005edd 	.word	0x08005edd
 8005f00:	08005edd 	.word	0x08005edd
 8005f04:	08005edd 	.word	0x08005edd
 8005f08:	08005edd 	.word	0x08005edd
 8005f0c:	08005f61 	.word	0x08005f61
 8005f10:	08005edd 	.word	0x08005edd
 8005f14:	08005edd 	.word	0x08005edd
 8005f18:	08005edd 	.word	0x08005edd
 8005f1c:	08005edd 	.word	0x08005edd
 8005f20:	0800606f 	.word	0x0800606f
 8005f24:	08005f91 	.word	0x08005f91
 8005f28:	08006051 	.word	0x08006051
 8005f2c:	08005edd 	.word	0x08005edd
 8005f30:	08005edd 	.word	0x08005edd
 8005f34:	08006091 	.word	0x08006091
 8005f38:	08005edd 	.word	0x08005edd
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08005edd 	.word	0x08005edd
 8005f44:	08005edd 	.word	0x08005edd
 8005f48:	08006059 	.word	0x08006059
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	1d1a      	adds	r2, r3, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	602a      	str	r2, [r5, #0]
 8005f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0a4      	b.n	80060aa <_printf_i+0x1f6>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	6829      	ldr	r1, [r5, #0]
 8005f64:	0606      	lsls	r6, r0, #24
 8005f66:	f101 0304 	add.w	r3, r1, #4
 8005f6a:	d50a      	bpl.n	8005f82 <_printf_i+0xce>
 8005f6c:	680e      	ldr	r6, [r1, #0]
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	da03      	bge.n	8005f7c <_printf_i+0xc8>
 8005f74:	232d      	movs	r3, #45	; 0x2d
 8005f76:	4276      	negs	r6, r6
 8005f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f7c:	230a      	movs	r3, #10
 8005f7e:	485e      	ldr	r0, [pc, #376]	; (80060f8 <_printf_i+0x244>)
 8005f80:	e019      	b.n	8005fb6 <_printf_i+0x102>
 8005f82:	680e      	ldr	r6, [r1, #0]
 8005f84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	bf18      	it	ne
 8005f8c:	b236      	sxthne	r6, r6
 8005f8e:	e7ef      	b.n	8005f70 <_printf_i+0xbc>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	6820      	ldr	r0, [r4, #0]
 8005f94:	1d19      	adds	r1, r3, #4
 8005f96:	6029      	str	r1, [r5, #0]
 8005f98:	0601      	lsls	r1, r0, #24
 8005f9a:	d501      	bpl.n	8005fa0 <_printf_i+0xec>
 8005f9c:	681e      	ldr	r6, [r3, #0]
 8005f9e:	e002      	b.n	8005fa6 <_printf_i+0xf2>
 8005fa0:	0646      	lsls	r6, r0, #25
 8005fa2:	d5fb      	bpl.n	8005f9c <_printf_i+0xe8>
 8005fa4:	881e      	ldrh	r6, [r3, #0]
 8005fa6:	2f6f      	cmp	r7, #111	; 0x6f
 8005fa8:	bf0c      	ite	eq
 8005faa:	2308      	moveq	r3, #8
 8005fac:	230a      	movne	r3, #10
 8005fae:	4852      	ldr	r0, [pc, #328]	; (80060f8 <_printf_i+0x244>)
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fb6:	6865      	ldr	r5, [r4, #4]
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	bfa8      	it	ge
 8005fbc:	6821      	ldrge	r1, [r4, #0]
 8005fbe:	60a5      	str	r5, [r4, #8]
 8005fc0:	bfa4      	itt	ge
 8005fc2:	f021 0104 	bicge.w	r1, r1, #4
 8005fc6:	6021      	strge	r1, [r4, #0]
 8005fc8:	b90e      	cbnz	r6, 8005fce <_printf_i+0x11a>
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	d04d      	beq.n	800606a <_printf_i+0x1b6>
 8005fce:	4615      	mov	r5, r2
 8005fd0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fd4:	fb03 6711 	mls	r7, r3, r1, r6
 8005fd8:	5dc7      	ldrb	r7, [r0, r7]
 8005fda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fde:	4637      	mov	r7, r6
 8005fe0:	42bb      	cmp	r3, r7
 8005fe2:	460e      	mov	r6, r1
 8005fe4:	d9f4      	bls.n	8005fd0 <_printf_i+0x11c>
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d10b      	bne.n	8006002 <_printf_i+0x14e>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	07de      	lsls	r6, r3, #31
 8005fee:	d508      	bpl.n	8006002 <_printf_i+0x14e>
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	6861      	ldr	r1, [r4, #4]
 8005ff4:	4299      	cmp	r1, r3
 8005ff6:	bfde      	ittt	le
 8005ff8:	2330      	movle	r3, #48	; 0x30
 8005ffa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ffe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006002:	1b52      	subs	r2, r2, r5
 8006004:	6122      	str	r2, [r4, #16]
 8006006:	464b      	mov	r3, r9
 8006008:	4621      	mov	r1, r4
 800600a:	4640      	mov	r0, r8
 800600c:	f8cd a000 	str.w	sl, [sp]
 8006010:	aa03      	add	r2, sp, #12
 8006012:	f7ff fedf 	bl	8005dd4 <_printf_common>
 8006016:	3001      	adds	r0, #1
 8006018:	d14c      	bne.n	80060b4 <_printf_i+0x200>
 800601a:	f04f 30ff 	mov.w	r0, #4294967295
 800601e:	b004      	add	sp, #16
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	4834      	ldr	r0, [pc, #208]	; (80060f8 <_printf_i+0x244>)
 8006026:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800602a:	6829      	ldr	r1, [r5, #0]
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006032:	6029      	str	r1, [r5, #0]
 8006034:	061d      	lsls	r5, r3, #24
 8006036:	d514      	bpl.n	8006062 <_printf_i+0x1ae>
 8006038:	07df      	lsls	r7, r3, #31
 800603a:	bf44      	itt	mi
 800603c:	f043 0320 	orrmi.w	r3, r3, #32
 8006040:	6023      	strmi	r3, [r4, #0]
 8006042:	b91e      	cbnz	r6, 800604c <_printf_i+0x198>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	f023 0320 	bic.w	r3, r3, #32
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	2310      	movs	r3, #16
 800604e:	e7af      	b.n	8005fb0 <_printf_i+0xfc>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	f043 0320 	orr.w	r3, r3, #32
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	2378      	movs	r3, #120	; 0x78
 800605a:	4828      	ldr	r0, [pc, #160]	; (80060fc <_printf_i+0x248>)
 800605c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006060:	e7e3      	b.n	800602a <_printf_i+0x176>
 8006062:	0659      	lsls	r1, r3, #25
 8006064:	bf48      	it	mi
 8006066:	b2b6      	uxthmi	r6, r6
 8006068:	e7e6      	b.n	8006038 <_printf_i+0x184>
 800606a:	4615      	mov	r5, r2
 800606c:	e7bb      	b.n	8005fe6 <_printf_i+0x132>
 800606e:	682b      	ldr	r3, [r5, #0]
 8006070:	6826      	ldr	r6, [r4, #0]
 8006072:	1d18      	adds	r0, r3, #4
 8006074:	6961      	ldr	r1, [r4, #20]
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	0635      	lsls	r5, r6, #24
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	d501      	bpl.n	8006082 <_printf_i+0x1ce>
 800607e:	6019      	str	r1, [r3, #0]
 8006080:	e002      	b.n	8006088 <_printf_i+0x1d4>
 8006082:	0670      	lsls	r0, r6, #25
 8006084:	d5fb      	bpl.n	800607e <_printf_i+0x1ca>
 8006086:	8019      	strh	r1, [r3, #0]
 8006088:	2300      	movs	r3, #0
 800608a:	4615      	mov	r5, r2
 800608c:	6123      	str	r3, [r4, #16]
 800608e:	e7ba      	b.n	8006006 <_printf_i+0x152>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	2100      	movs	r1, #0
 8006094:	1d1a      	adds	r2, r3, #4
 8006096:	602a      	str	r2, [r5, #0]
 8006098:	681d      	ldr	r5, [r3, #0]
 800609a:	6862      	ldr	r2, [r4, #4]
 800609c:	4628      	mov	r0, r5
 800609e:	f000 f82f 	bl	8006100 <memchr>
 80060a2:	b108      	cbz	r0, 80060a8 <_printf_i+0x1f4>
 80060a4:	1b40      	subs	r0, r0, r5
 80060a6:	6060      	str	r0, [r4, #4]
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	2300      	movs	r3, #0
 80060ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b2:	e7a8      	b.n	8006006 <_printf_i+0x152>
 80060b4:	462a      	mov	r2, r5
 80060b6:	4649      	mov	r1, r9
 80060b8:	4640      	mov	r0, r8
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	47d0      	blx	sl
 80060be:	3001      	adds	r0, #1
 80060c0:	d0ab      	beq.n	800601a <_printf_i+0x166>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	079b      	lsls	r3, r3, #30
 80060c6:	d413      	bmi.n	80060f0 <_printf_i+0x23c>
 80060c8:	68e0      	ldr	r0, [r4, #12]
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	4298      	cmp	r0, r3
 80060ce:	bfb8      	it	lt
 80060d0:	4618      	movlt	r0, r3
 80060d2:	e7a4      	b.n	800601e <_printf_i+0x16a>
 80060d4:	2301      	movs	r3, #1
 80060d6:	4632      	mov	r2, r6
 80060d8:	4649      	mov	r1, r9
 80060da:	4640      	mov	r0, r8
 80060dc:	47d0      	blx	sl
 80060de:	3001      	adds	r0, #1
 80060e0:	d09b      	beq.n	800601a <_printf_i+0x166>
 80060e2:	3501      	adds	r5, #1
 80060e4:	68e3      	ldr	r3, [r4, #12]
 80060e6:	9903      	ldr	r1, [sp, #12]
 80060e8:	1a5b      	subs	r3, r3, r1
 80060ea:	42ab      	cmp	r3, r5
 80060ec:	dcf2      	bgt.n	80060d4 <_printf_i+0x220>
 80060ee:	e7eb      	b.n	80060c8 <_printf_i+0x214>
 80060f0:	2500      	movs	r5, #0
 80060f2:	f104 0619 	add.w	r6, r4, #25
 80060f6:	e7f5      	b.n	80060e4 <_printf_i+0x230>
 80060f8:	08008258 	.word	0x08008258
 80060fc:	08008269 	.word	0x08008269

08006100 <memchr>:
 8006100:	4603      	mov	r3, r0
 8006102:	b510      	push	{r4, lr}
 8006104:	b2c9      	uxtb	r1, r1
 8006106:	4402      	add	r2, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	4618      	mov	r0, r3
 800610c:	d101      	bne.n	8006112 <memchr+0x12>
 800610e:	2000      	movs	r0, #0
 8006110:	e003      	b.n	800611a <memchr+0x1a>
 8006112:	7804      	ldrb	r4, [r0, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	428c      	cmp	r4, r1
 8006118:	d1f6      	bne.n	8006108 <memchr+0x8>
 800611a:	bd10      	pop	{r4, pc}

0800611c <memmove>:
 800611c:	4288      	cmp	r0, r1
 800611e:	b510      	push	{r4, lr}
 8006120:	eb01 0402 	add.w	r4, r1, r2
 8006124:	d902      	bls.n	800612c <memmove+0x10>
 8006126:	4284      	cmp	r4, r0
 8006128:	4623      	mov	r3, r4
 800612a:	d807      	bhi.n	800613c <memmove+0x20>
 800612c:	1e43      	subs	r3, r0, #1
 800612e:	42a1      	cmp	r1, r4
 8006130:	d008      	beq.n	8006144 <memmove+0x28>
 8006132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800613a:	e7f8      	b.n	800612e <memmove+0x12>
 800613c:	4601      	mov	r1, r0
 800613e:	4402      	add	r2, r0
 8006140:	428a      	cmp	r2, r1
 8006142:	d100      	bne.n	8006146 <memmove+0x2a>
 8006144:	bd10      	pop	{r4, pc}
 8006146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800614a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800614e:	e7f7      	b.n	8006140 <memmove+0x24>

08006150 <_free_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4605      	mov	r5, r0
 8006154:	2900      	cmp	r1, #0
 8006156:	d040      	beq.n	80061da <_free_r+0x8a>
 8006158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615c:	1f0c      	subs	r4, r1, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	bfb8      	it	lt
 8006162:	18e4      	addlt	r4, r4, r3
 8006164:	f000 f910 	bl	8006388 <__malloc_lock>
 8006168:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <_free_r+0x8c>)
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	b933      	cbnz	r3, 800617c <_free_r+0x2c>
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	6014      	str	r4, [r2, #0]
 8006172:	4628      	mov	r0, r5
 8006174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006178:	f000 b90c 	b.w	8006394 <__malloc_unlock>
 800617c:	42a3      	cmp	r3, r4
 800617e:	d908      	bls.n	8006192 <_free_r+0x42>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	1821      	adds	r1, r4, r0
 8006184:	428b      	cmp	r3, r1
 8006186:	bf01      	itttt	eq
 8006188:	6819      	ldreq	r1, [r3, #0]
 800618a:	685b      	ldreq	r3, [r3, #4]
 800618c:	1809      	addeq	r1, r1, r0
 800618e:	6021      	streq	r1, [r4, #0]
 8006190:	e7ed      	b.n	800616e <_free_r+0x1e>
 8006192:	461a      	mov	r2, r3
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	b10b      	cbz	r3, 800619c <_free_r+0x4c>
 8006198:	42a3      	cmp	r3, r4
 800619a:	d9fa      	bls.n	8006192 <_free_r+0x42>
 800619c:	6811      	ldr	r1, [r2, #0]
 800619e:	1850      	adds	r0, r2, r1
 80061a0:	42a0      	cmp	r0, r4
 80061a2:	d10b      	bne.n	80061bc <_free_r+0x6c>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	4401      	add	r1, r0
 80061a8:	1850      	adds	r0, r2, r1
 80061aa:	4283      	cmp	r3, r0
 80061ac:	6011      	str	r1, [r2, #0]
 80061ae:	d1e0      	bne.n	8006172 <_free_r+0x22>
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4401      	add	r1, r0
 80061b6:	6011      	str	r1, [r2, #0]
 80061b8:	6053      	str	r3, [r2, #4]
 80061ba:	e7da      	b.n	8006172 <_free_r+0x22>
 80061bc:	d902      	bls.n	80061c4 <_free_r+0x74>
 80061be:	230c      	movs	r3, #12
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	e7d6      	b.n	8006172 <_free_r+0x22>
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	1821      	adds	r1, r4, r0
 80061c8:	428b      	cmp	r3, r1
 80061ca:	bf01      	itttt	eq
 80061cc:	6819      	ldreq	r1, [r3, #0]
 80061ce:	685b      	ldreq	r3, [r3, #4]
 80061d0:	1809      	addeq	r1, r1, r0
 80061d2:	6021      	streq	r1, [r4, #0]
 80061d4:	6063      	str	r3, [r4, #4]
 80061d6:	6054      	str	r4, [r2, #4]
 80061d8:	e7cb      	b.n	8006172 <_free_r+0x22>
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	2000097c 	.word	0x2000097c

080061e0 <sbrk_aligned>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4e0e      	ldr	r6, [pc, #56]	; (800621c <sbrk_aligned+0x3c>)
 80061e4:	460c      	mov	r4, r1
 80061e6:	6831      	ldr	r1, [r6, #0]
 80061e8:	4605      	mov	r5, r0
 80061ea:	b911      	cbnz	r1, 80061f2 <sbrk_aligned+0x12>
 80061ec:	f000 f8bc 	bl	8006368 <_sbrk_r>
 80061f0:	6030      	str	r0, [r6, #0]
 80061f2:	4621      	mov	r1, r4
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 f8b7 	bl	8006368 <_sbrk_r>
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	d00a      	beq.n	8006214 <sbrk_aligned+0x34>
 80061fe:	1cc4      	adds	r4, r0, #3
 8006200:	f024 0403 	bic.w	r4, r4, #3
 8006204:	42a0      	cmp	r0, r4
 8006206:	d007      	beq.n	8006218 <sbrk_aligned+0x38>
 8006208:	1a21      	subs	r1, r4, r0
 800620a:	4628      	mov	r0, r5
 800620c:	f000 f8ac 	bl	8006368 <_sbrk_r>
 8006210:	3001      	adds	r0, #1
 8006212:	d101      	bne.n	8006218 <sbrk_aligned+0x38>
 8006214:	f04f 34ff 	mov.w	r4, #4294967295
 8006218:	4620      	mov	r0, r4
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	20000980 	.word	0x20000980

08006220 <_malloc_r>:
 8006220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006224:	1ccd      	adds	r5, r1, #3
 8006226:	f025 0503 	bic.w	r5, r5, #3
 800622a:	3508      	adds	r5, #8
 800622c:	2d0c      	cmp	r5, #12
 800622e:	bf38      	it	cc
 8006230:	250c      	movcc	r5, #12
 8006232:	2d00      	cmp	r5, #0
 8006234:	4607      	mov	r7, r0
 8006236:	db01      	blt.n	800623c <_malloc_r+0x1c>
 8006238:	42a9      	cmp	r1, r5
 800623a:	d905      	bls.n	8006248 <_malloc_r+0x28>
 800623c:	230c      	movs	r3, #12
 800623e:	2600      	movs	r6, #0
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	4630      	mov	r0, r6
 8006244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006248:	4e2e      	ldr	r6, [pc, #184]	; (8006304 <_malloc_r+0xe4>)
 800624a:	f000 f89d 	bl	8006388 <__malloc_lock>
 800624e:	6833      	ldr	r3, [r6, #0]
 8006250:	461c      	mov	r4, r3
 8006252:	bb34      	cbnz	r4, 80062a2 <_malloc_r+0x82>
 8006254:	4629      	mov	r1, r5
 8006256:	4638      	mov	r0, r7
 8006258:	f7ff ffc2 	bl	80061e0 <sbrk_aligned>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	4604      	mov	r4, r0
 8006260:	d14d      	bne.n	80062fe <_malloc_r+0xde>
 8006262:	6834      	ldr	r4, [r6, #0]
 8006264:	4626      	mov	r6, r4
 8006266:	2e00      	cmp	r6, #0
 8006268:	d140      	bne.n	80062ec <_malloc_r+0xcc>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	4631      	mov	r1, r6
 800626e:	4638      	mov	r0, r7
 8006270:	eb04 0803 	add.w	r8, r4, r3
 8006274:	f000 f878 	bl	8006368 <_sbrk_r>
 8006278:	4580      	cmp	r8, r0
 800627a:	d13a      	bne.n	80062f2 <_malloc_r+0xd2>
 800627c:	6821      	ldr	r1, [r4, #0]
 800627e:	3503      	adds	r5, #3
 8006280:	1a6d      	subs	r5, r5, r1
 8006282:	f025 0503 	bic.w	r5, r5, #3
 8006286:	3508      	adds	r5, #8
 8006288:	2d0c      	cmp	r5, #12
 800628a:	bf38      	it	cc
 800628c:	250c      	movcc	r5, #12
 800628e:	4638      	mov	r0, r7
 8006290:	4629      	mov	r1, r5
 8006292:	f7ff ffa5 	bl	80061e0 <sbrk_aligned>
 8006296:	3001      	adds	r0, #1
 8006298:	d02b      	beq.n	80062f2 <_malloc_r+0xd2>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	442b      	add	r3, r5
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	e00e      	b.n	80062c0 <_malloc_r+0xa0>
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	1b52      	subs	r2, r2, r5
 80062a6:	d41e      	bmi.n	80062e6 <_malloc_r+0xc6>
 80062a8:	2a0b      	cmp	r2, #11
 80062aa:	d916      	bls.n	80062da <_malloc_r+0xba>
 80062ac:	1961      	adds	r1, r4, r5
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	6025      	str	r5, [r4, #0]
 80062b2:	bf18      	it	ne
 80062b4:	6059      	strne	r1, [r3, #4]
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	bf08      	it	eq
 80062ba:	6031      	streq	r1, [r6, #0]
 80062bc:	5162      	str	r2, [r4, r5]
 80062be:	604b      	str	r3, [r1, #4]
 80062c0:	4638      	mov	r0, r7
 80062c2:	f104 060b 	add.w	r6, r4, #11
 80062c6:	f000 f865 	bl	8006394 <__malloc_unlock>
 80062ca:	f026 0607 	bic.w	r6, r6, #7
 80062ce:	1d23      	adds	r3, r4, #4
 80062d0:	1af2      	subs	r2, r6, r3
 80062d2:	d0b6      	beq.n	8006242 <_malloc_r+0x22>
 80062d4:	1b9b      	subs	r3, r3, r6
 80062d6:	50a3      	str	r3, [r4, r2]
 80062d8:	e7b3      	b.n	8006242 <_malloc_r+0x22>
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	42a3      	cmp	r3, r4
 80062de:	bf0c      	ite	eq
 80062e0:	6032      	streq	r2, [r6, #0]
 80062e2:	605a      	strne	r2, [r3, #4]
 80062e4:	e7ec      	b.n	80062c0 <_malloc_r+0xa0>
 80062e6:	4623      	mov	r3, r4
 80062e8:	6864      	ldr	r4, [r4, #4]
 80062ea:	e7b2      	b.n	8006252 <_malloc_r+0x32>
 80062ec:	4634      	mov	r4, r6
 80062ee:	6876      	ldr	r6, [r6, #4]
 80062f0:	e7b9      	b.n	8006266 <_malloc_r+0x46>
 80062f2:	230c      	movs	r3, #12
 80062f4:	4638      	mov	r0, r7
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	f000 f84c 	bl	8006394 <__malloc_unlock>
 80062fc:	e7a1      	b.n	8006242 <_malloc_r+0x22>
 80062fe:	6025      	str	r5, [r4, #0]
 8006300:	e7de      	b.n	80062c0 <_malloc_r+0xa0>
 8006302:	bf00      	nop
 8006304:	2000097c 	.word	0x2000097c

08006308 <_realloc_r>:
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	4680      	mov	r8, r0
 800630e:	4614      	mov	r4, r2
 8006310:	460e      	mov	r6, r1
 8006312:	b921      	cbnz	r1, 800631e <_realloc_r+0x16>
 8006314:	4611      	mov	r1, r2
 8006316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800631a:	f7ff bf81 	b.w	8006220 <_malloc_r>
 800631e:	b92a      	cbnz	r2, 800632c <_realloc_r+0x24>
 8006320:	f7ff ff16 	bl	8006150 <_free_r>
 8006324:	4625      	mov	r5, r4
 8006326:	4628      	mov	r0, r5
 8006328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800632c:	f000 f838 	bl	80063a0 <_malloc_usable_size_r>
 8006330:	4284      	cmp	r4, r0
 8006332:	4607      	mov	r7, r0
 8006334:	d802      	bhi.n	800633c <_realloc_r+0x34>
 8006336:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800633a:	d812      	bhi.n	8006362 <_realloc_r+0x5a>
 800633c:	4621      	mov	r1, r4
 800633e:	4640      	mov	r0, r8
 8006340:	f7ff ff6e 	bl	8006220 <_malloc_r>
 8006344:	4605      	mov	r5, r0
 8006346:	2800      	cmp	r0, #0
 8006348:	d0ed      	beq.n	8006326 <_realloc_r+0x1e>
 800634a:	42bc      	cmp	r4, r7
 800634c:	4622      	mov	r2, r4
 800634e:	4631      	mov	r1, r6
 8006350:	bf28      	it	cs
 8006352:	463a      	movcs	r2, r7
 8006354:	f7ff fbac 	bl	8005ab0 <memcpy>
 8006358:	4631      	mov	r1, r6
 800635a:	4640      	mov	r0, r8
 800635c:	f7ff fef8 	bl	8006150 <_free_r>
 8006360:	e7e1      	b.n	8006326 <_realloc_r+0x1e>
 8006362:	4635      	mov	r5, r6
 8006364:	e7df      	b.n	8006326 <_realloc_r+0x1e>
	...

08006368 <_sbrk_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	2300      	movs	r3, #0
 800636c:	4d05      	ldr	r5, [pc, #20]	; (8006384 <_sbrk_r+0x1c>)
 800636e:	4604      	mov	r4, r0
 8006370:	4608      	mov	r0, r1
 8006372:	602b      	str	r3, [r5, #0]
 8006374:	f7fb ff44 	bl	8002200 <_sbrk>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_sbrk_r+0x1a>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_sbrk_r+0x1a>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	20000984 	.word	0x20000984

08006388 <__malloc_lock>:
 8006388:	4801      	ldr	r0, [pc, #4]	; (8006390 <__malloc_lock+0x8>)
 800638a:	f000 b811 	b.w	80063b0 <__retarget_lock_acquire_recursive>
 800638e:	bf00      	nop
 8006390:	20000988 	.word	0x20000988

08006394 <__malloc_unlock>:
 8006394:	4801      	ldr	r0, [pc, #4]	; (800639c <__malloc_unlock+0x8>)
 8006396:	f000 b80c 	b.w	80063b2 <__retarget_lock_release_recursive>
 800639a:	bf00      	nop
 800639c:	20000988 	.word	0x20000988

080063a0 <_malloc_usable_size_r>:
 80063a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a4:	1f18      	subs	r0, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfbc      	itt	lt
 80063aa:	580b      	ldrlt	r3, [r1, r0]
 80063ac:	18c0      	addlt	r0, r0, r3
 80063ae:	4770      	bx	lr

080063b0 <__retarget_lock_acquire_recursive>:
 80063b0:	4770      	bx	lr

080063b2 <__retarget_lock_release_recursive>:
 80063b2:	4770      	bx	lr

080063b4 <cos>:
 80063b4:	b530      	push	{r4, r5, lr}
 80063b6:	4a20      	ldr	r2, [pc, #128]	; (8006438 <cos+0x84>)
 80063b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063bc:	4293      	cmp	r3, r2
 80063be:	b087      	sub	sp, #28
 80063c0:	dc06      	bgt.n	80063d0 <cos+0x1c>
 80063c2:	2200      	movs	r2, #0
 80063c4:	2300      	movs	r3, #0
 80063c6:	b007      	add	sp, #28
 80063c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063cc:	f000 ba78 	b.w	80068c0 <__kernel_cos>
 80063d0:	4a1a      	ldr	r2, [pc, #104]	; (800643c <cos+0x88>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	dd05      	ble.n	80063e2 <cos+0x2e>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	f7f9 febd 	bl	8000158 <__aeabi_dsub>
 80063de:	b007      	add	sp, #28
 80063e0:	bd30      	pop	{r4, r5, pc}
 80063e2:	aa02      	add	r2, sp, #8
 80063e4:	f000 f874 	bl	80064d0 <__ieee754_rem_pio2>
 80063e8:	f000 0003 	and.w	r0, r0, #3
 80063ec:	2801      	cmp	r0, #1
 80063ee:	d009      	beq.n	8006404 <cos+0x50>
 80063f0:	2802      	cmp	r0, #2
 80063f2:	d011      	beq.n	8006418 <cos+0x64>
 80063f4:	b9b8      	cbnz	r0, 8006426 <cos+0x72>
 80063f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063fe:	f000 fa5f 	bl	80068c0 <__kernel_cos>
 8006402:	e7ec      	b.n	80063de <cos+0x2a>
 8006404:	9000      	str	r0, [sp, #0]
 8006406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800640a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800640e:	f000 fe57 	bl	80070c0 <__kernel_sin>
 8006412:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006416:	e7e2      	b.n	80063de <cos+0x2a>
 8006418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800641c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006420:	f000 fa4e 	bl	80068c0 <__kernel_cos>
 8006424:	e7f5      	b.n	8006412 <cos+0x5e>
 8006426:	2301      	movs	r3, #1
 8006428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006432:	f000 fe45 	bl	80070c0 <__kernel_sin>
 8006436:	e7d2      	b.n	80063de <cos+0x2a>
 8006438:	3fe921fb 	.word	0x3fe921fb
 800643c:	7fefffff 	.word	0x7fefffff

08006440 <sin>:
 8006440:	b530      	push	{r4, r5, lr}
 8006442:	4a20      	ldr	r2, [pc, #128]	; (80064c4 <sin+0x84>)
 8006444:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006448:	4293      	cmp	r3, r2
 800644a:	b087      	sub	sp, #28
 800644c:	dc06      	bgt.n	800645c <sin+0x1c>
 800644e:	2300      	movs	r3, #0
 8006450:	2200      	movs	r2, #0
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	f000 fe33 	bl	80070c0 <__kernel_sin>
 800645a:	e006      	b.n	800646a <sin+0x2a>
 800645c:	4a1a      	ldr	r2, [pc, #104]	; (80064c8 <sin+0x88>)
 800645e:	4293      	cmp	r3, r2
 8006460:	dd05      	ble.n	800646e <sin+0x2e>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	f7f9 fe77 	bl	8000158 <__aeabi_dsub>
 800646a:	b007      	add	sp, #28
 800646c:	bd30      	pop	{r4, r5, pc}
 800646e:	aa02      	add	r2, sp, #8
 8006470:	f000 f82e 	bl	80064d0 <__ieee754_rem_pio2>
 8006474:	f000 0003 	and.w	r0, r0, #3
 8006478:	2801      	cmp	r0, #1
 800647a:	d009      	beq.n	8006490 <sin+0x50>
 800647c:	2802      	cmp	r0, #2
 800647e:	d00e      	beq.n	800649e <sin+0x5e>
 8006480:	b9c0      	cbnz	r0, 80064b4 <sin+0x74>
 8006482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006486:	2301      	movs	r3, #1
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800648e:	e7e2      	b.n	8006456 <sin+0x16>
 8006490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006498:	f000 fa12 	bl	80068c0 <__kernel_cos>
 800649c:	e7e5      	b.n	800646a <sin+0x2a>
 800649e:	2301      	movs	r3, #1
 80064a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064aa:	f000 fe09 	bl	80070c0 <__kernel_sin>
 80064ae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80064b2:	e7da      	b.n	800646a <sin+0x2a>
 80064b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064bc:	f000 fa00 	bl	80068c0 <__kernel_cos>
 80064c0:	e7f5      	b.n	80064ae <sin+0x6e>
 80064c2:	bf00      	nop
 80064c4:	3fe921fb 	.word	0x3fe921fb
 80064c8:	7fefffff 	.word	0x7fefffff
 80064cc:	00000000 	.word	0x00000000

080064d0 <__ieee754_rem_pio2>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	4614      	mov	r4, r2
 80064d6:	4ac4      	ldr	r2, [pc, #784]	; (80067e8 <__ieee754_rem_pio2+0x318>)
 80064d8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80064dc:	b08d      	sub	sp, #52	; 0x34
 80064de:	4592      	cmp	sl, r2
 80064e0:	9104      	str	r1, [sp, #16]
 80064e2:	dc07      	bgt.n	80064f4 <__ieee754_rem_pio2+0x24>
 80064e4:	2200      	movs	r2, #0
 80064e6:	2300      	movs	r3, #0
 80064e8:	e9c4 0100 	strd	r0, r1, [r4]
 80064ec:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80064f0:	2500      	movs	r5, #0
 80064f2:	e024      	b.n	800653e <__ieee754_rem_pio2+0x6e>
 80064f4:	4abd      	ldr	r2, [pc, #756]	; (80067ec <__ieee754_rem_pio2+0x31c>)
 80064f6:	4592      	cmp	sl, r2
 80064f8:	dc72      	bgt.n	80065e0 <__ieee754_rem_pio2+0x110>
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	4dbc      	ldr	r5, [pc, #752]	; (80067f0 <__ieee754_rem_pio2+0x320>)
 80064fe:	2b00      	cmp	r3, #0
 8006500:	a3ab      	add	r3, pc, #684	; (adr r3, 80067b0 <__ieee754_rem_pio2+0x2e0>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	dd36      	ble.n	8006576 <__ieee754_rem_pio2+0xa6>
 8006508:	f7f9 fe26 	bl	8000158 <__aeabi_dsub>
 800650c:	45aa      	cmp	sl, r5
 800650e:	4606      	mov	r6, r0
 8006510:	460f      	mov	r7, r1
 8006512:	d018      	beq.n	8006546 <__ieee754_rem_pio2+0x76>
 8006514:	a3a8      	add	r3, pc, #672	; (adr r3, 80067b8 <__ieee754_rem_pio2+0x2e8>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f7f9 fe1d 	bl	8000158 <__aeabi_dsub>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4630      	mov	r0, r6
 8006524:	e9c4 2300 	strd	r2, r3, [r4]
 8006528:	4639      	mov	r1, r7
 800652a:	f7f9 fe15 	bl	8000158 <__aeabi_dsub>
 800652e:	a3a2      	add	r3, pc, #648	; (adr r3, 80067b8 <__ieee754_rem_pio2+0x2e8>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7f9 fe10 	bl	8000158 <__aeabi_dsub>
 8006538:	2501      	movs	r5, #1
 800653a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800653e:	4628      	mov	r0, r5
 8006540:	b00d      	add	sp, #52	; 0x34
 8006542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006546:	a39e      	add	r3, pc, #632	; (adr r3, 80067c0 <__ieee754_rem_pio2+0x2f0>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f7f9 fe04 	bl	8000158 <__aeabi_dsub>
 8006550:	a39d      	add	r3, pc, #628	; (adr r3, 80067c8 <__ieee754_rem_pio2+0x2f8>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	4606      	mov	r6, r0
 8006558:	460f      	mov	r7, r1
 800655a:	f7f9 fdfd 	bl	8000158 <__aeabi_dsub>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4630      	mov	r0, r6
 8006564:	e9c4 2300 	strd	r2, r3, [r4]
 8006568:	4639      	mov	r1, r7
 800656a:	f7f9 fdf5 	bl	8000158 <__aeabi_dsub>
 800656e:	a396      	add	r3, pc, #600	; (adr r3, 80067c8 <__ieee754_rem_pio2+0x2f8>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	e7de      	b.n	8006534 <__ieee754_rem_pio2+0x64>
 8006576:	f7f9 fdf1 	bl	800015c <__adddf3>
 800657a:	45aa      	cmp	sl, r5
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	d016      	beq.n	80065b0 <__ieee754_rem_pio2+0xe0>
 8006582:	a38d      	add	r3, pc, #564	; (adr r3, 80067b8 <__ieee754_rem_pio2+0x2e8>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 fde8 	bl	800015c <__adddf3>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4630      	mov	r0, r6
 8006592:	e9c4 2300 	strd	r2, r3, [r4]
 8006596:	4639      	mov	r1, r7
 8006598:	f7f9 fdde 	bl	8000158 <__aeabi_dsub>
 800659c:	a386      	add	r3, pc, #536	; (adr r3, 80067b8 <__ieee754_rem_pio2+0x2e8>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fddb 	bl	800015c <__adddf3>
 80065a6:	f04f 35ff 	mov.w	r5, #4294967295
 80065aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80065ae:	e7c6      	b.n	800653e <__ieee754_rem_pio2+0x6e>
 80065b0:	a383      	add	r3, pc, #524	; (adr r3, 80067c0 <__ieee754_rem_pio2+0x2f0>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7f9 fdd1 	bl	800015c <__adddf3>
 80065ba:	a383      	add	r3, pc, #524	; (adr r3, 80067c8 <__ieee754_rem_pio2+0x2f8>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	4606      	mov	r6, r0
 80065c2:	460f      	mov	r7, r1
 80065c4:	f7f9 fdca 	bl	800015c <__adddf3>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4630      	mov	r0, r6
 80065ce:	e9c4 2300 	strd	r2, r3, [r4]
 80065d2:	4639      	mov	r1, r7
 80065d4:	f7f9 fdc0 	bl	8000158 <__aeabi_dsub>
 80065d8:	a37b      	add	r3, pc, #492	; (adr r3, 80067c8 <__ieee754_rem_pio2+0x2f8>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	e7e0      	b.n	80065a2 <__ieee754_rem_pio2+0xd2>
 80065e0:	4a84      	ldr	r2, [pc, #528]	; (80067f4 <__ieee754_rem_pio2+0x324>)
 80065e2:	4592      	cmp	sl, r2
 80065e4:	f300 80d5 	bgt.w	8006792 <__ieee754_rem_pio2+0x2c2>
 80065e8:	f000 fe20 	bl	800722c <fabs>
 80065ec:	a378      	add	r3, pc, #480	; (adr r3, 80067d0 <__ieee754_rem_pio2+0x300>)
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	4606      	mov	r6, r0
 80065f4:	460f      	mov	r7, r1
 80065f6:	f7f9 ff67 	bl	80004c8 <__aeabi_dmul>
 80065fa:	2200      	movs	r2, #0
 80065fc:	4b7e      	ldr	r3, [pc, #504]	; (80067f8 <__ieee754_rem_pio2+0x328>)
 80065fe:	f7f9 fdad 	bl	800015c <__adddf3>
 8006602:	f7fa f9fb 	bl	80009fc <__aeabi_d2iz>
 8006606:	4605      	mov	r5, r0
 8006608:	f7f9 fef4 	bl	80003f4 <__aeabi_i2d>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006614:	a366      	add	r3, pc, #408	; (adr r3, 80067b0 <__ieee754_rem_pio2+0x2e0>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f7f9 ff55 	bl	80004c8 <__aeabi_dmul>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4630      	mov	r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	f7f9 fd97 	bl	8000158 <__aeabi_dsub>
 800662a:	a363      	add	r3, pc, #396	; (adr r3, 80067b8 <__ieee754_rem_pio2+0x2e8>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	4680      	mov	r8, r0
 8006632:	4689      	mov	r9, r1
 8006634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006638:	f7f9 ff46 	bl	80004c8 <__aeabi_dmul>
 800663c:	2d1f      	cmp	r5, #31
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	dc0e      	bgt.n	8006662 <__ieee754_rem_pio2+0x192>
 8006644:	4b6d      	ldr	r3, [pc, #436]	; (80067fc <__ieee754_rem_pio2+0x32c>)
 8006646:	1e6a      	subs	r2, r5, #1
 8006648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664c:	4553      	cmp	r3, sl
 800664e:	d008      	beq.n	8006662 <__ieee754_rem_pio2+0x192>
 8006650:	4632      	mov	r2, r6
 8006652:	463b      	mov	r3, r7
 8006654:	4640      	mov	r0, r8
 8006656:	4649      	mov	r1, r9
 8006658:	f7f9 fd7e 	bl	8000158 <__aeabi_dsub>
 800665c:	e9c4 0100 	strd	r0, r1, [r4]
 8006660:	e013      	b.n	800668a <__ieee754_rem_pio2+0x1ba>
 8006662:	463b      	mov	r3, r7
 8006664:	4632      	mov	r2, r6
 8006666:	4640      	mov	r0, r8
 8006668:	4649      	mov	r1, r9
 800666a:	f7f9 fd75 	bl	8000158 <__aeabi_dsub>
 800666e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8006672:	9305      	str	r3, [sp, #20]
 8006674:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006678:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800667c:	f1ba 0f10 	cmp.w	sl, #16
 8006680:	dc1f      	bgt.n	80066c2 <__ieee754_rem_pio2+0x1f2>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	e9c4 2300 	strd	r2, r3, [r4]
 800668a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800668e:	4640      	mov	r0, r8
 8006690:	4653      	mov	r3, sl
 8006692:	4649      	mov	r1, r9
 8006694:	f7f9 fd60 	bl	8000158 <__aeabi_dsub>
 8006698:	4632      	mov	r2, r6
 800669a:	463b      	mov	r3, r7
 800669c:	f7f9 fd5c 	bl	8000158 <__aeabi_dsub>
 80066a0:	460b      	mov	r3, r1
 80066a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066a6:	9904      	ldr	r1, [sp, #16]
 80066a8:	4602      	mov	r2, r0
 80066aa:	2900      	cmp	r1, #0
 80066ac:	f6bf af47 	bge.w	800653e <__ieee754_rem_pio2+0x6e>
 80066b0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80066b4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80066b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	60e3      	str	r3, [r4, #12]
 80066be:	426d      	negs	r5, r5
 80066c0:	e73d      	b.n	800653e <__ieee754_rem_pio2+0x6e>
 80066c2:	a33f      	add	r3, pc, #252	; (adr r3, 80067c0 <__ieee754_rem_pio2+0x2f0>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066cc:	f7f9 fefc 	bl	80004c8 <__aeabi_dmul>
 80066d0:	4606      	mov	r6, r0
 80066d2:	460f      	mov	r7, r1
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4640      	mov	r0, r8
 80066da:	4649      	mov	r1, r9
 80066dc:	f7f9 fd3c 	bl	8000158 <__aeabi_dsub>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4682      	mov	sl, r0
 80066e6:	468b      	mov	fp, r1
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	f7f9 fd34 	bl	8000158 <__aeabi_dsub>
 80066f0:	4632      	mov	r2, r6
 80066f2:	463b      	mov	r3, r7
 80066f4:	f7f9 fd30 	bl	8000158 <__aeabi_dsub>
 80066f8:	a333      	add	r3, pc, #204	; (adr r3, 80067c8 <__ieee754_rem_pio2+0x2f8>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	4606      	mov	r6, r0
 8006700:	460f      	mov	r7, r1
 8006702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006706:	f7f9 fedf 	bl	80004c8 <__aeabi_dmul>
 800670a:	4632      	mov	r2, r6
 800670c:	463b      	mov	r3, r7
 800670e:	f7f9 fd23 	bl	8000158 <__aeabi_dsub>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4606      	mov	r6, r0
 8006718:	460f      	mov	r7, r1
 800671a:	4650      	mov	r0, sl
 800671c:	4659      	mov	r1, fp
 800671e:	f7f9 fd1b 	bl	8000158 <__aeabi_dsub>
 8006722:	9a05      	ldr	r2, [sp, #20]
 8006724:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b31      	cmp	r3, #49	; 0x31
 800672c:	dc06      	bgt.n	800673c <__ieee754_rem_pio2+0x26c>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	46d0      	mov	r8, sl
 8006734:	46d9      	mov	r9, fp
 8006736:	e9c4 2300 	strd	r2, r3, [r4]
 800673a:	e7a6      	b.n	800668a <__ieee754_rem_pio2+0x1ba>
 800673c:	a326      	add	r3, pc, #152	; (adr r3, 80067d8 <__ieee754_rem_pio2+0x308>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006746:	f7f9 febf 	bl	80004c8 <__aeabi_dmul>
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4650      	mov	r0, sl
 8006754:	4659      	mov	r1, fp
 8006756:	f7f9 fcff 	bl	8000158 <__aeabi_dsub>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4680      	mov	r8, r0
 8006760:	4689      	mov	r9, r1
 8006762:	4650      	mov	r0, sl
 8006764:	4659      	mov	r1, fp
 8006766:	f7f9 fcf7 	bl	8000158 <__aeabi_dsub>
 800676a:	4632      	mov	r2, r6
 800676c:	463b      	mov	r3, r7
 800676e:	f7f9 fcf3 	bl	8000158 <__aeabi_dsub>
 8006772:	a31b      	add	r3, pc, #108	; (adr r3, 80067e0 <__ieee754_rem_pio2+0x310>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	4606      	mov	r6, r0
 800677a:	460f      	mov	r7, r1
 800677c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006780:	f7f9 fea2 	bl	80004c8 <__aeabi_dmul>
 8006784:	4632      	mov	r2, r6
 8006786:	463b      	mov	r3, r7
 8006788:	f7f9 fce6 	bl	8000158 <__aeabi_dsub>
 800678c:	4606      	mov	r6, r0
 800678e:	460f      	mov	r7, r1
 8006790:	e75e      	b.n	8006650 <__ieee754_rem_pio2+0x180>
 8006792:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <__ieee754_rem_pio2+0x330>)
 8006794:	4592      	cmp	sl, r2
 8006796:	dd35      	ble.n	8006804 <__ieee754_rem_pio2+0x334>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	f7f9 fcdc 	bl	8000158 <__aeabi_dsub>
 80067a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80067a4:	e9c4 0100 	strd	r0, r1, [r4]
 80067a8:	e6a2      	b.n	80064f0 <__ieee754_rem_pio2+0x20>
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w
 80067b0:	54400000 	.word	0x54400000
 80067b4:	3ff921fb 	.word	0x3ff921fb
 80067b8:	1a626331 	.word	0x1a626331
 80067bc:	3dd0b461 	.word	0x3dd0b461
 80067c0:	1a600000 	.word	0x1a600000
 80067c4:	3dd0b461 	.word	0x3dd0b461
 80067c8:	2e037073 	.word	0x2e037073
 80067cc:	3ba3198a 	.word	0x3ba3198a
 80067d0:	6dc9c883 	.word	0x6dc9c883
 80067d4:	3fe45f30 	.word	0x3fe45f30
 80067d8:	2e000000 	.word	0x2e000000
 80067dc:	3ba3198a 	.word	0x3ba3198a
 80067e0:	252049c1 	.word	0x252049c1
 80067e4:	397b839a 	.word	0x397b839a
 80067e8:	3fe921fb 	.word	0x3fe921fb
 80067ec:	4002d97b 	.word	0x4002d97b
 80067f0:	3ff921fb 	.word	0x3ff921fb
 80067f4:	413921fb 	.word	0x413921fb
 80067f8:	3fe00000 	.word	0x3fe00000
 80067fc:	0800827c 	.word	0x0800827c
 8006800:	7fefffff 	.word	0x7fefffff
 8006804:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006808:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800680c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006810:	460f      	mov	r7, r1
 8006812:	4606      	mov	r6, r0
 8006814:	f7fa f8f2 	bl	80009fc <__aeabi_d2iz>
 8006818:	f7f9 fdec 	bl	80003f4 <__aeabi_i2d>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4630      	mov	r0, r6
 8006822:	4639      	mov	r1, r7
 8006824:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006828:	f7f9 fc96 	bl	8000158 <__aeabi_dsub>
 800682c:	2200      	movs	r2, #0
 800682e:	4b22      	ldr	r3, [pc, #136]	; (80068b8 <__ieee754_rem_pio2+0x3e8>)
 8006830:	f7f9 fe4a 	bl	80004c8 <__aeabi_dmul>
 8006834:	460f      	mov	r7, r1
 8006836:	4606      	mov	r6, r0
 8006838:	f7fa f8e0 	bl	80009fc <__aeabi_d2iz>
 800683c:	f7f9 fdda 	bl	80003f4 <__aeabi_i2d>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4630      	mov	r0, r6
 8006846:	4639      	mov	r1, r7
 8006848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800684c:	f7f9 fc84 	bl	8000158 <__aeabi_dsub>
 8006850:	2200      	movs	r2, #0
 8006852:	4b19      	ldr	r3, [pc, #100]	; (80068b8 <__ieee754_rem_pio2+0x3e8>)
 8006854:	f7f9 fe38 	bl	80004c8 <__aeabi_dmul>
 8006858:	f04f 0803 	mov.w	r8, #3
 800685c:	2600      	movs	r6, #0
 800685e:	2700      	movs	r7, #0
 8006860:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006864:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8006868:	4632      	mov	r2, r6
 800686a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800686e:	463b      	mov	r3, r7
 8006870:	46c2      	mov	sl, r8
 8006872:	f108 38ff 	add.w	r8, r8, #4294967295
 8006876:	f7fa f88f 	bl	8000998 <__aeabi_dcmpeq>
 800687a:	2800      	cmp	r0, #0
 800687c:	d1f4      	bne.n	8006868 <__ieee754_rem_pio2+0x398>
 800687e:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <__ieee754_rem_pio2+0x3ec>)
 8006880:	462a      	mov	r2, r5
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	2302      	movs	r3, #2
 8006886:	4621      	mov	r1, r4
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	a806      	add	r0, sp, #24
 800688c:	4653      	mov	r3, sl
 800688e:	f000 f8d5 	bl	8006a3c <__kernel_rem_pio2>
 8006892:	9b04      	ldr	r3, [sp, #16]
 8006894:	4605      	mov	r5, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	f6bf ae51 	bge.w	800653e <__ieee754_rem_pio2+0x6e>
 800689c:	e9d4 2100 	ldrd	r2, r1, [r4]
 80068a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068a4:	e9c4 2300 	strd	r2, r3, [r4]
 80068a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80068ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80068b4:	e703      	b.n	80066be <__ieee754_rem_pio2+0x1ee>
 80068b6:	bf00      	nop
 80068b8:	41700000 	.word	0x41700000
 80068bc:	080082fc 	.word	0x080082fc

080068c0 <__kernel_cos>:
 80068c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80068c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80068cc:	4680      	mov	r8, r0
 80068ce:	460f      	mov	r7, r1
 80068d0:	e9cd 2300 	strd	r2, r3, [sp]
 80068d4:	da04      	bge.n	80068e0 <__kernel_cos+0x20>
 80068d6:	f7fa f891 	bl	80009fc <__aeabi_d2iz>
 80068da:	2800      	cmp	r0, #0
 80068dc:	f000 8086 	beq.w	80069ec <__kernel_cos+0x12c>
 80068e0:	4642      	mov	r2, r8
 80068e2:	463b      	mov	r3, r7
 80068e4:	4640      	mov	r0, r8
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7f9 fdee 	bl	80004c8 <__aeabi_dmul>
 80068ec:	2200      	movs	r2, #0
 80068ee:	4b4e      	ldr	r3, [pc, #312]	; (8006a28 <__kernel_cos+0x168>)
 80068f0:	4604      	mov	r4, r0
 80068f2:	460d      	mov	r5, r1
 80068f4:	f7f9 fde8 	bl	80004c8 <__aeabi_dmul>
 80068f8:	a33f      	add	r3, pc, #252	; (adr r3, 80069f8 <__kernel_cos+0x138>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	4682      	mov	sl, r0
 8006900:	468b      	mov	fp, r1
 8006902:	4620      	mov	r0, r4
 8006904:	4629      	mov	r1, r5
 8006906:	f7f9 fddf 	bl	80004c8 <__aeabi_dmul>
 800690a:	a33d      	add	r3, pc, #244	; (adr r3, 8006a00 <__kernel_cos+0x140>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f7f9 fc24 	bl	800015c <__adddf3>
 8006914:	4622      	mov	r2, r4
 8006916:	462b      	mov	r3, r5
 8006918:	f7f9 fdd6 	bl	80004c8 <__aeabi_dmul>
 800691c:	a33a      	add	r3, pc, #232	; (adr r3, 8006a08 <__kernel_cos+0x148>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f7f9 fc19 	bl	8000158 <__aeabi_dsub>
 8006926:	4622      	mov	r2, r4
 8006928:	462b      	mov	r3, r5
 800692a:	f7f9 fdcd 	bl	80004c8 <__aeabi_dmul>
 800692e:	a338      	add	r3, pc, #224	; (adr r3, 8006a10 <__kernel_cos+0x150>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fc12 	bl	800015c <__adddf3>
 8006938:	4622      	mov	r2, r4
 800693a:	462b      	mov	r3, r5
 800693c:	f7f9 fdc4 	bl	80004c8 <__aeabi_dmul>
 8006940:	a335      	add	r3, pc, #212	; (adr r3, 8006a18 <__kernel_cos+0x158>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 fc07 	bl	8000158 <__aeabi_dsub>
 800694a:	4622      	mov	r2, r4
 800694c:	462b      	mov	r3, r5
 800694e:	f7f9 fdbb 	bl	80004c8 <__aeabi_dmul>
 8006952:	a333      	add	r3, pc, #204	; (adr r3, 8006a20 <__kernel_cos+0x160>)
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f7f9 fc00 	bl	800015c <__adddf3>
 800695c:	4622      	mov	r2, r4
 800695e:	462b      	mov	r3, r5
 8006960:	f7f9 fdb2 	bl	80004c8 <__aeabi_dmul>
 8006964:	4622      	mov	r2, r4
 8006966:	462b      	mov	r3, r5
 8006968:	f7f9 fdae 	bl	80004c8 <__aeabi_dmul>
 800696c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006970:	4604      	mov	r4, r0
 8006972:	460d      	mov	r5, r1
 8006974:	4640      	mov	r0, r8
 8006976:	4639      	mov	r1, r7
 8006978:	f7f9 fda6 	bl	80004c8 <__aeabi_dmul>
 800697c:	460b      	mov	r3, r1
 800697e:	4602      	mov	r2, r0
 8006980:	4629      	mov	r1, r5
 8006982:	4620      	mov	r0, r4
 8006984:	f7f9 fbe8 	bl	8000158 <__aeabi_dsub>
 8006988:	4b28      	ldr	r3, [pc, #160]	; (8006a2c <__kernel_cos+0x16c>)
 800698a:	4680      	mov	r8, r0
 800698c:	429e      	cmp	r6, r3
 800698e:	4689      	mov	r9, r1
 8006990:	dc0e      	bgt.n	80069b0 <__kernel_cos+0xf0>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4650      	mov	r0, sl
 8006998:	4659      	mov	r1, fp
 800699a:	f7f9 fbdd 	bl	8000158 <__aeabi_dsub>
 800699e:	4602      	mov	r2, r0
 80069a0:	2000      	movs	r0, #0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4922      	ldr	r1, [pc, #136]	; (8006a30 <__kernel_cos+0x170>)
 80069a6:	f7f9 fbd7 	bl	8000158 <__aeabi_dsub>
 80069aa:	b003      	add	sp, #12
 80069ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b0:	2400      	movs	r4, #0
 80069b2:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <__kernel_cos+0x174>)
 80069b4:	4622      	mov	r2, r4
 80069b6:	429e      	cmp	r6, r3
 80069b8:	bfcc      	ite	gt
 80069ba:	4d1f      	ldrgt	r5, [pc, #124]	; (8006a38 <__kernel_cos+0x178>)
 80069bc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80069c0:	462b      	mov	r3, r5
 80069c2:	2000      	movs	r0, #0
 80069c4:	491a      	ldr	r1, [pc, #104]	; (8006a30 <__kernel_cos+0x170>)
 80069c6:	f7f9 fbc7 	bl	8000158 <__aeabi_dsub>
 80069ca:	4622      	mov	r2, r4
 80069cc:	4606      	mov	r6, r0
 80069ce:	460f      	mov	r7, r1
 80069d0:	462b      	mov	r3, r5
 80069d2:	4650      	mov	r0, sl
 80069d4:	4659      	mov	r1, fp
 80069d6:	f7f9 fbbf 	bl	8000158 <__aeabi_dsub>
 80069da:	4642      	mov	r2, r8
 80069dc:	464b      	mov	r3, r9
 80069de:	f7f9 fbbb 	bl	8000158 <__aeabi_dsub>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4630      	mov	r0, r6
 80069e8:	4639      	mov	r1, r7
 80069ea:	e7dc      	b.n	80069a6 <__kernel_cos+0xe6>
 80069ec:	2000      	movs	r0, #0
 80069ee:	4910      	ldr	r1, [pc, #64]	; (8006a30 <__kernel_cos+0x170>)
 80069f0:	e7db      	b.n	80069aa <__kernel_cos+0xea>
 80069f2:	bf00      	nop
 80069f4:	f3af 8000 	nop.w
 80069f8:	be8838d4 	.word	0xbe8838d4
 80069fc:	bda8fae9 	.word	0xbda8fae9
 8006a00:	bdb4b1c4 	.word	0xbdb4b1c4
 8006a04:	3e21ee9e 	.word	0x3e21ee9e
 8006a08:	809c52ad 	.word	0x809c52ad
 8006a0c:	3e927e4f 	.word	0x3e927e4f
 8006a10:	19cb1590 	.word	0x19cb1590
 8006a14:	3efa01a0 	.word	0x3efa01a0
 8006a18:	16c15177 	.word	0x16c15177
 8006a1c:	3f56c16c 	.word	0x3f56c16c
 8006a20:	5555554c 	.word	0x5555554c
 8006a24:	3fa55555 	.word	0x3fa55555
 8006a28:	3fe00000 	.word	0x3fe00000
 8006a2c:	3fd33332 	.word	0x3fd33332
 8006a30:	3ff00000 	.word	0x3ff00000
 8006a34:	3fe90000 	.word	0x3fe90000
 8006a38:	3fd20000 	.word	0x3fd20000

08006a3c <__kernel_rem_pio2>:
 8006a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006a44:	9308      	str	r3, [sp, #32]
 8006a46:	9106      	str	r1, [sp, #24]
 8006a48:	4bb6      	ldr	r3, [pc, #728]	; (8006d24 <__kernel_rem_pio2+0x2e8>)
 8006a4a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006a4c:	f112 0f14 	cmn.w	r2, #20
 8006a50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a54:	bfa8      	it	ge
 8006a56:	1ed4      	subge	r4, r2, #3
 8006a58:	9302      	str	r3, [sp, #8]
 8006a5a:	9b08      	ldr	r3, [sp, #32]
 8006a5c:	bfb8      	it	lt
 8006a5e:	2400      	movlt	r4, #0
 8006a60:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a64:	9307      	str	r3, [sp, #28]
 8006a66:	bfa4      	itt	ge
 8006a68:	2318      	movge	r3, #24
 8006a6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006a6e:	f06f 0317 	mvn.w	r3, #23
 8006a72:	fb04 3303 	mla	r3, r4, r3, r3
 8006a76:	eb03 0b02 	add.w	fp, r3, r2
 8006a7a:	9a07      	ldr	r2, [sp, #28]
 8006a7c:	9b02      	ldr	r3, [sp, #8]
 8006a7e:	1aa7      	subs	r7, r4, r2
 8006a80:	eb03 0802 	add.w	r8, r3, r2
 8006a84:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006a86:	2500      	movs	r5, #0
 8006a88:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9009      	str	r0, [sp, #36]	; 0x24
 8006a92:	ae20      	add	r6, sp, #128	; 0x80
 8006a94:	4545      	cmp	r5, r8
 8006a96:	dd14      	ble.n	8006ac2 <__kernel_rem_pio2+0x86>
 8006a98:	f04f 0800 	mov.w	r8, #0
 8006a9c:	9a08      	ldr	r2, [sp, #32]
 8006a9e:	ab20      	add	r3, sp, #128	; 0x80
 8006aa0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8006aa4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8006aa8:	9b02      	ldr	r3, [sp, #8]
 8006aaa:	4598      	cmp	r8, r3
 8006aac:	dc35      	bgt.n	8006b1a <__kernel_rem_pio2+0xde>
 8006aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f1a3 0908 	sub.w	r9, r3, #8
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	462f      	mov	r7, r5
 8006aba:	2600      	movs	r6, #0
 8006abc:	e9cd 2300 	strd	r2, r3, [sp]
 8006ac0:	e01f      	b.n	8006b02 <__kernel_rem_pio2+0xc6>
 8006ac2:	42ef      	cmn	r7, r5
 8006ac4:	d40b      	bmi.n	8006ade <__kernel_rem_pio2+0xa2>
 8006ac6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006aca:	e9cd 2300 	strd	r2, r3, [sp]
 8006ace:	f7f9 fc91 	bl	80003f4 <__aeabi_i2d>
 8006ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ad6:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006ada:	3501      	adds	r5, #1
 8006adc:	e7da      	b.n	8006a94 <__kernel_rem_pio2+0x58>
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	e7f8      	b.n	8006ad6 <__kernel_rem_pio2+0x9a>
 8006ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006aec:	f7f9 fcec 	bl	80004c8 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006af8:	f7f9 fb30 	bl	800015c <__adddf3>
 8006afc:	e9cd 0100 	strd	r0, r1, [sp]
 8006b00:	3601      	adds	r6, #1
 8006b02:	9b07      	ldr	r3, [sp, #28]
 8006b04:	3f08      	subs	r7, #8
 8006b06:	429e      	cmp	r6, r3
 8006b08:	ddec      	ble.n	8006ae4 <__kernel_rem_pio2+0xa8>
 8006b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b0e:	f108 0801 	add.w	r8, r8, #1
 8006b12:	e8ea 2302 	strd	r2, r3, [sl], #8
 8006b16:	3508      	adds	r5, #8
 8006b18:	e7c6      	b.n	8006aa8 <__kernel_rem_pio2+0x6c>
 8006b1a:	9b02      	ldr	r3, [sp, #8]
 8006b1c:	aa0c      	add	r2, sp, #48	; 0x30
 8006b1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b24:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006b26:	9e02      	ldr	r6, [sp, #8]
 8006b28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b2c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b2e:	ab98      	add	r3, sp, #608	; 0x260
 8006b30:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b34:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006b38:	ab70      	add	r3, sp, #448	; 0x1c0
 8006b3a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8006b3e:	46d0      	mov	r8, sl
 8006b40:	46b1      	mov	r9, r6
 8006b42:	af0c      	add	r7, sp, #48	; 0x30
 8006b44:	9700      	str	r7, [sp, #0]
 8006b46:	f1b9 0f00 	cmp.w	r9, #0
 8006b4a:	f1a8 0808 	sub.w	r8, r8, #8
 8006b4e:	dc71      	bgt.n	8006c34 <__kernel_rem_pio2+0x1f8>
 8006b50:	465a      	mov	r2, fp
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f000 fbef 	bl	8007338 <scalbn>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006b60:	4604      	mov	r4, r0
 8006b62:	460d      	mov	r5, r1
 8006b64:	f7f9 fcb0 	bl	80004c8 <__aeabi_dmul>
 8006b68:	f000 fb66 	bl	8007238 <floor>
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	4b6e      	ldr	r3, [pc, #440]	; (8006d28 <__kernel_rem_pio2+0x2ec>)
 8006b70:	f7f9 fcaa 	bl	80004c8 <__aeabi_dmul>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7f9 faec 	bl	8000158 <__aeabi_dsub>
 8006b80:	460d      	mov	r5, r1
 8006b82:	4604      	mov	r4, r0
 8006b84:	f7f9 ff3a 	bl	80009fc <__aeabi_d2iz>
 8006b88:	9004      	str	r0, [sp, #16]
 8006b8a:	f7f9 fc33 	bl	80003f4 <__aeabi_i2d>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 fadf 	bl	8000158 <__aeabi_dsub>
 8006b9a:	f1bb 0f00 	cmp.w	fp, #0
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	4689      	mov	r9, r1
 8006ba2:	dd70      	ble.n	8006c86 <__kernel_rem_pio2+0x24a>
 8006ba4:	1e72      	subs	r2, r6, #1
 8006ba6:	ab0c      	add	r3, sp, #48	; 0x30
 8006ba8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006bac:	9c04      	ldr	r4, [sp, #16]
 8006bae:	f1cb 0118 	rsb	r1, fp, #24
 8006bb2:	fa40 f301 	asr.w	r3, r0, r1
 8006bb6:	441c      	add	r4, r3
 8006bb8:	408b      	lsls	r3, r1
 8006bba:	1ac0      	subs	r0, r0, r3
 8006bbc:	ab0c      	add	r3, sp, #48	; 0x30
 8006bbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006bc2:	f1cb 0317 	rsb	r3, fp, #23
 8006bc6:	9404      	str	r4, [sp, #16]
 8006bc8:	fa40 f303 	asr.w	r3, r0, r3
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	9b00      	ldr	r3, [sp, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	dd66      	ble.n	8006ca2 <__kernel_rem_pio2+0x266>
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006bda:	4614      	mov	r4, r2
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	3301      	adds	r3, #1
 8006be0:	9304      	str	r3, [sp, #16]
 8006be2:	4296      	cmp	r6, r2
 8006be4:	f300 80ac 	bgt.w	8006d40 <__kernel_rem_pio2+0x304>
 8006be8:	f1bb 0f00 	cmp.w	fp, #0
 8006bec:	dd07      	ble.n	8006bfe <__kernel_rem_pio2+0x1c2>
 8006bee:	f1bb 0f01 	cmp.w	fp, #1
 8006bf2:	f000 80b4 	beq.w	8006d5e <__kernel_rem_pio2+0x322>
 8006bf6:	f1bb 0f02 	cmp.w	fp, #2
 8006bfa:	f000 80ba 	beq.w	8006d72 <__kernel_rem_pio2+0x336>
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d14e      	bne.n	8006ca2 <__kernel_rem_pio2+0x266>
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4948      	ldr	r1, [pc, #288]	; (8006d2c <__kernel_rem_pio2+0x2f0>)
 8006c0c:	f7f9 faa4 	bl	8000158 <__aeabi_dsub>
 8006c10:	4680      	mov	r8, r0
 8006c12:	4689      	mov	r9, r1
 8006c14:	2c00      	cmp	r4, #0
 8006c16:	d044      	beq.n	8006ca2 <__kernel_rem_pio2+0x266>
 8006c18:	465a      	mov	r2, fp
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	4943      	ldr	r1, [pc, #268]	; (8006d2c <__kernel_rem_pio2+0x2f0>)
 8006c1e:	f000 fb8b 	bl	8007338 <scalbn>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4640      	mov	r0, r8
 8006c28:	4649      	mov	r1, r9
 8006c2a:	f7f9 fa95 	bl	8000158 <__aeabi_dsub>
 8006c2e:	4680      	mov	r8, r0
 8006c30:	4689      	mov	r9, r1
 8006c32:	e036      	b.n	8006ca2 <__kernel_rem_pio2+0x266>
 8006c34:	2200      	movs	r2, #0
 8006c36:	4b3e      	ldr	r3, [pc, #248]	; (8006d30 <__kernel_rem_pio2+0x2f4>)
 8006c38:	4620      	mov	r0, r4
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	f7f9 fc44 	bl	80004c8 <__aeabi_dmul>
 8006c40:	f7f9 fedc 	bl	80009fc <__aeabi_d2iz>
 8006c44:	f7f9 fbd6 	bl	80003f4 <__aeabi_i2d>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c50:	2200      	movs	r2, #0
 8006c52:	4b38      	ldr	r3, [pc, #224]	; (8006d34 <__kernel_rem_pio2+0x2f8>)
 8006c54:	f7f9 fc38 	bl	80004c8 <__aeabi_dmul>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 fa7a 	bl	8000158 <__aeabi_dsub>
 8006c64:	f7f9 feca 	bl	80009fc <__aeabi_d2iz>
 8006c68:	9b00      	ldr	r3, [sp, #0]
 8006c6a:	f109 39ff 	add.w	r9, r9, #4294967295
 8006c6e:	f843 0b04 	str.w	r0, [r3], #4
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c78:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006c7c:	f7f9 fa6e 	bl	800015c <__adddf3>
 8006c80:	4604      	mov	r4, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	e75f      	b.n	8006b46 <__kernel_rem_pio2+0x10a>
 8006c86:	d105      	bne.n	8006c94 <__kernel_rem_pio2+0x258>
 8006c88:	1e73      	subs	r3, r6, #1
 8006c8a:	aa0c      	add	r2, sp, #48	; 0x30
 8006c8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c90:	15c3      	asrs	r3, r0, #23
 8006c92:	e79b      	b.n	8006bcc <__kernel_rem_pio2+0x190>
 8006c94:	2200      	movs	r2, #0
 8006c96:	4b28      	ldr	r3, [pc, #160]	; (8006d38 <__kernel_rem_pio2+0x2fc>)
 8006c98:	f7f9 fe9c 	bl	80009d4 <__aeabi_dcmpge>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d13e      	bne.n	8006d1e <__kernel_rem_pio2+0x2e2>
 8006ca0:	9000      	str	r0, [sp, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	4649      	mov	r1, r9
 8006caa:	f7f9 fe75 	bl	8000998 <__aeabi_dcmpeq>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f000 80b1 	beq.w	8006e16 <__kernel_rem_pio2+0x3da>
 8006cb4:	1e74      	subs	r4, r6, #1
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	2200      	movs	r2, #0
 8006cba:	9902      	ldr	r1, [sp, #8]
 8006cbc:	428b      	cmp	r3, r1
 8006cbe:	da5f      	bge.n	8006d80 <__kernel_rem_pio2+0x344>
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	d074      	beq.n	8006dae <__kernel_rem_pio2+0x372>
 8006cc4:	ab0c      	add	r3, sp, #48	; 0x30
 8006cc6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006cca:	f1ab 0b18 	sub.w	fp, fp, #24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 809f 	beq.w	8006e12 <__kernel_rem_pio2+0x3d6>
 8006cd4:	465a      	mov	r2, fp
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	4914      	ldr	r1, [pc, #80]	; (8006d2c <__kernel_rem_pio2+0x2f0>)
 8006cda:	f000 fb2d 	bl	8007338 <scalbn>
 8006cde:	46a2      	mov	sl, r4
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	460f      	mov	r7, r1
 8006ce4:	f04f 0800 	mov.w	r8, #0
 8006ce8:	ab70      	add	r3, sp, #448	; 0x1c0
 8006cea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8006d30 <__kernel_rem_pio2+0x2f4>
 8006cee:	00e5      	lsls	r5, r4, #3
 8006cf0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006cf4:	f1ba 0f00 	cmp.w	sl, #0
 8006cf8:	f280 80c3 	bge.w	8006e82 <__kernel_rem_pio2+0x446>
 8006cfc:	4626      	mov	r6, r4
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	f2c0 80f5 	blt.w	8006eee <__kernel_rem_pio2+0x4b2>
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <__kernel_rem_pio2+0x300>)
 8006d06:	f04f 0a00 	mov.w	sl, #0
 8006d0a:	9307      	str	r3, [sp, #28]
 8006d0c:	ab70      	add	r3, sp, #448	; 0x1c0
 8006d0e:	f04f 0b00 	mov.w	fp, #0
 8006d12:	f04f 0800 	mov.w	r8, #0
 8006d16:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006d1a:	1ba7      	subs	r7, r4, r6
 8006d1c:	e0db      	b.n	8006ed6 <__kernel_rem_pio2+0x49a>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	e757      	b.n	8006bd4 <__kernel_rem_pio2+0x198>
 8006d24:	08008448 	.word	0x08008448
 8006d28:	40200000 	.word	0x40200000
 8006d2c:	3ff00000 	.word	0x3ff00000
 8006d30:	3e700000 	.word	0x3e700000
 8006d34:	41700000 	.word	0x41700000
 8006d38:	3fe00000 	.word	0x3fe00000
 8006d3c:	08008408 	.word	0x08008408
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	b944      	cbnz	r4, 8006d56 <__kernel_rem_pio2+0x31a>
 8006d44:	b11b      	cbz	r3, 8006d4e <__kernel_rem_pio2+0x312>
 8006d46:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	461c      	mov	r4, r3
 8006d50:	3201      	adds	r2, #1
 8006d52:	3704      	adds	r7, #4
 8006d54:	e745      	b.n	8006be2 <__kernel_rem_pio2+0x1a6>
 8006d56:	1acb      	subs	r3, r1, r3
 8006d58:	603b      	str	r3, [r7, #0]
 8006d5a:	4623      	mov	r3, r4
 8006d5c:	e7f7      	b.n	8006d4e <__kernel_rem_pio2+0x312>
 8006d5e:	1e72      	subs	r2, r6, #1
 8006d60:	ab0c      	add	r3, sp, #48	; 0x30
 8006d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006d6a:	a90c      	add	r1, sp, #48	; 0x30
 8006d6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d70:	e745      	b.n	8006bfe <__kernel_rem_pio2+0x1c2>
 8006d72:	1e72      	subs	r2, r6, #1
 8006d74:	ab0c      	add	r3, sp, #48	; 0x30
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006d7e:	e7f4      	b.n	8006d6a <__kernel_rem_pio2+0x32e>
 8006d80:	a90c      	add	r1, sp, #48	; 0x30
 8006d82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	e796      	b.n	8006cba <__kernel_rem_pio2+0x27e>
 8006d8c:	3401      	adds	r4, #1
 8006d8e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	d0fa      	beq.n	8006d8c <__kernel_rem_pio2+0x350>
 8006d96:	9b08      	ldr	r3, [sp, #32]
 8006d98:	f106 0801 	add.w	r8, r6, #1
 8006d9c:	18f5      	adds	r5, r6, r3
 8006d9e:	ab20      	add	r3, sp, #128	; 0x80
 8006da0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006da4:	4434      	add	r4, r6
 8006da6:	4544      	cmp	r4, r8
 8006da8:	da04      	bge.n	8006db4 <__kernel_rem_pio2+0x378>
 8006daa:	4626      	mov	r6, r4
 8006dac:	e6bf      	b.n	8006b2e <__kernel_rem_pio2+0xf2>
 8006dae:	2401      	movs	r4, #1
 8006db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db2:	e7ec      	b.n	8006d8e <__kernel_rem_pio2+0x352>
 8006db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db6:	f04f 0900 	mov.w	r9, #0
 8006dba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006dbe:	f7f9 fb19 	bl	80003f4 <__aeabi_i2d>
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	2700      	movs	r7, #0
 8006dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8006dcc:	3b08      	subs	r3, #8
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	9504      	str	r5, [sp, #16]
 8006dd2:	9b07      	ldr	r3, [sp, #28]
 8006dd4:	4599      	cmp	r9, r3
 8006dd6:	dd05      	ble.n	8006de4 <__kernel_rem_pio2+0x3a8>
 8006dd8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8006ddc:	f108 0801 	add.w	r8, r8, #1
 8006de0:	3508      	adds	r5, #8
 8006de2:	e7e0      	b.n	8006da6 <__kernel_rem_pio2+0x36a>
 8006de4:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006de8:	9900      	ldr	r1, [sp, #0]
 8006dea:	f109 0901 	add.w	r9, r9, #1
 8006dee:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006df2:	9100      	str	r1, [sp, #0]
 8006df4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8006df8:	f8cd c010 	str.w	ip, [sp, #16]
 8006dfc:	f7f9 fb64 	bl	80004c8 <__aeabi_dmul>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4630      	mov	r0, r6
 8006e06:	4639      	mov	r1, r7
 8006e08:	f7f9 f9a8 	bl	800015c <__adddf3>
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	460f      	mov	r7, r1
 8006e10:	e7df      	b.n	8006dd2 <__kernel_rem_pio2+0x396>
 8006e12:	3c01      	subs	r4, #1
 8006e14:	e756      	b.n	8006cc4 <__kernel_rem_pio2+0x288>
 8006e16:	f1cb 0200 	rsb	r2, fp, #0
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	f000 fa8b 	bl	8007338 <scalbn>
 8006e22:	2200      	movs	r2, #0
 8006e24:	4ba4      	ldr	r3, [pc, #656]	; (80070b8 <__kernel_rem_pio2+0x67c>)
 8006e26:	4604      	mov	r4, r0
 8006e28:	460d      	mov	r5, r1
 8006e2a:	f7f9 fdd3 	bl	80009d4 <__aeabi_dcmpge>
 8006e2e:	b1f8      	cbz	r0, 8006e70 <__kernel_rem_pio2+0x434>
 8006e30:	2200      	movs	r2, #0
 8006e32:	4ba2      	ldr	r3, [pc, #648]	; (80070bc <__kernel_rem_pio2+0x680>)
 8006e34:	4620      	mov	r0, r4
 8006e36:	4629      	mov	r1, r5
 8006e38:	f7f9 fb46 	bl	80004c8 <__aeabi_dmul>
 8006e3c:	f7f9 fdde 	bl	80009fc <__aeabi_d2iz>
 8006e40:	4607      	mov	r7, r0
 8006e42:	f7f9 fad7 	bl	80003f4 <__aeabi_i2d>
 8006e46:	2200      	movs	r2, #0
 8006e48:	4b9b      	ldr	r3, [pc, #620]	; (80070b8 <__kernel_rem_pio2+0x67c>)
 8006e4a:	f7f9 fb3d 	bl	80004c8 <__aeabi_dmul>
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4602      	mov	r2, r0
 8006e52:	4629      	mov	r1, r5
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7f9 f97f 	bl	8000158 <__aeabi_dsub>
 8006e5a:	f7f9 fdcf 	bl	80009fc <__aeabi_d2iz>
 8006e5e:	1c74      	adds	r4, r6, #1
 8006e60:	ab0c      	add	r3, sp, #48	; 0x30
 8006e62:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006e66:	f10b 0b18 	add.w	fp, fp, #24
 8006e6a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8006e6e:	e731      	b.n	8006cd4 <__kernel_rem_pio2+0x298>
 8006e70:	4620      	mov	r0, r4
 8006e72:	4629      	mov	r1, r5
 8006e74:	f7f9 fdc2 	bl	80009fc <__aeabi_d2iz>
 8006e78:	ab0c      	add	r3, sp, #48	; 0x30
 8006e7a:	4634      	mov	r4, r6
 8006e7c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006e80:	e728      	b.n	8006cd4 <__kernel_rem_pio2+0x298>
 8006e82:	ab0c      	add	r3, sp, #48	; 0x30
 8006e84:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006e88:	f7f9 fab4 	bl	80003f4 <__aeabi_i2d>
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	463b      	mov	r3, r7
 8006e90:	f7f9 fb1a 	bl	80004c8 <__aeabi_dmul>
 8006e94:	4642      	mov	r2, r8
 8006e96:	e86b 0102 	strd	r0, r1, [fp], #-8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	f7f9 fb12 	bl	80004c8 <__aeabi_dmul>
 8006ea4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	460f      	mov	r7, r1
 8006eac:	e722      	b.n	8006cf4 <__kernel_rem_pio2+0x2b8>
 8006eae:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006eb2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006eb6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8006eba:	f8cd c01c 	str.w	ip, [sp, #28]
 8006ebe:	f7f9 fb03 	bl	80004c8 <__aeabi_dmul>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	4659      	mov	r1, fp
 8006eca:	f7f9 f947 	bl	800015c <__adddf3>
 8006ece:	4682      	mov	sl, r0
 8006ed0:	468b      	mov	fp, r1
 8006ed2:	f108 0801 	add.w	r8, r8, #1
 8006ed6:	9b02      	ldr	r3, [sp, #8]
 8006ed8:	4598      	cmp	r8, r3
 8006eda:	dc01      	bgt.n	8006ee0 <__kernel_rem_pio2+0x4a4>
 8006edc:	45b8      	cmp	r8, r7
 8006ede:	dde6      	ble.n	8006eae <__kernel_rem_pio2+0x472>
 8006ee0:	ab48      	add	r3, sp, #288	; 0x120
 8006ee2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006ee6:	e9c7 ab00 	strd	sl, fp, [r7]
 8006eea:	3e01      	subs	r6, #1
 8006eec:	e707      	b.n	8006cfe <__kernel_rem_pio2+0x2c2>
 8006eee:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	dc09      	bgt.n	8006f08 <__kernel_rem_pio2+0x4cc>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dc32      	bgt.n	8006f5e <__kernel_rem_pio2+0x522>
 8006ef8:	d05a      	beq.n	8006fb0 <__kernel_rem_pio2+0x574>
 8006efa:	9b04      	ldr	r3, [sp, #16]
 8006efc:	f003 0007 	and.w	r0, r3, #7
 8006f00:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f08:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d1f5      	bne.n	8006efa <__kernel_rem_pio2+0x4be>
 8006f0e:	ab48      	add	r3, sp, #288	; 0x120
 8006f10:	441d      	add	r5, r3
 8006f12:	46aa      	mov	sl, r5
 8006f14:	46a3      	mov	fp, r4
 8006f16:	f1bb 0f00 	cmp.w	fp, #0
 8006f1a:	dc76      	bgt.n	800700a <__kernel_rem_pio2+0x5ce>
 8006f1c:	46aa      	mov	sl, r5
 8006f1e:	46a3      	mov	fp, r4
 8006f20:	f1bb 0f01 	cmp.w	fp, #1
 8006f24:	f300 8090 	bgt.w	8007048 <__kernel_rem_pio2+0x60c>
 8006f28:	2700      	movs	r7, #0
 8006f2a:	463e      	mov	r6, r7
 8006f2c:	2c01      	cmp	r4, #1
 8006f2e:	f300 80aa 	bgt.w	8007086 <__kernel_rem_pio2+0x64a>
 8006f32:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8006f36:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8006f3a:	9b00      	ldr	r3, [sp, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f040 80ac 	bne.w	800709a <__kernel_rem_pio2+0x65e>
 8006f42:	4603      	mov	r3, r0
 8006f44:	462a      	mov	r2, r5
 8006f46:	9806      	ldr	r0, [sp, #24]
 8006f48:	e9c0 2300 	strd	r2, r3, [r0]
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	460b      	mov	r3, r1
 8006f50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006f54:	463a      	mov	r2, r7
 8006f56:	4633      	mov	r3, r6
 8006f58:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006f5c:	e7cd      	b.n	8006efa <__kernel_rem_pio2+0x4be>
 8006f5e:	2000      	movs	r0, #0
 8006f60:	46a0      	mov	r8, r4
 8006f62:	4601      	mov	r1, r0
 8006f64:	ab48      	add	r3, sp, #288	; 0x120
 8006f66:	441d      	add	r5, r3
 8006f68:	f1b8 0f00 	cmp.w	r8, #0
 8006f6c:	da3a      	bge.n	8006fe4 <__kernel_rem_pio2+0x5a8>
 8006f6e:	9b00      	ldr	r3, [sp, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d03e      	beq.n	8006ff2 <__kernel_rem_pio2+0x5b6>
 8006f74:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006f78:	4602      	mov	r2, r0
 8006f7a:	462b      	mov	r3, r5
 8006f7c:	9d06      	ldr	r5, [sp, #24]
 8006f7e:	2601      	movs	r6, #1
 8006f80:	e9c5 2300 	strd	r2, r3, [r5]
 8006f84:	460b      	mov	r3, r1
 8006f86:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006f8a:	f7f9 f8e5 	bl	8000158 <__aeabi_dsub>
 8006f8e:	4684      	mov	ip, r0
 8006f90:	460f      	mov	r7, r1
 8006f92:	ad48      	add	r5, sp, #288	; 0x120
 8006f94:	42b4      	cmp	r4, r6
 8006f96:	f105 0508 	add.w	r5, r5, #8
 8006f9a:	da2c      	bge.n	8006ff6 <__kernel_rem_pio2+0x5ba>
 8006f9c:	9b00      	ldr	r3, [sp, #0]
 8006f9e:	b10b      	cbz	r3, 8006fa4 <__kernel_rem_pio2+0x568>
 8006fa0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006fa4:	4662      	mov	r2, ip
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	9906      	ldr	r1, [sp, #24]
 8006faa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006fae:	e7a4      	b.n	8006efa <__kernel_rem_pio2+0x4be>
 8006fb0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8006fb2:	ab48      	add	r3, sp, #288	; 0x120
 8006fb4:	4637      	mov	r7, r6
 8006fb6:	441d      	add	r5, r3
 8006fb8:	2c00      	cmp	r4, #0
 8006fba:	da09      	bge.n	8006fd0 <__kernel_rem_pio2+0x594>
 8006fbc:	9b00      	ldr	r3, [sp, #0]
 8006fbe:	b10b      	cbz	r3, 8006fc4 <__kernel_rem_pio2+0x588>
 8006fc0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	9906      	ldr	r1, [sp, #24]
 8006fca:	e9c1 2300 	strd	r2, r3, [r1]
 8006fce:	e794      	b.n	8006efa <__kernel_rem_pio2+0x4be>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	f7f9 f8c0 	bl	800015c <__adddf3>
 8006fdc:	3c01      	subs	r4, #1
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460f      	mov	r7, r1
 8006fe2:	e7e9      	b.n	8006fb8 <__kernel_rem_pio2+0x57c>
 8006fe4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006fe8:	f7f9 f8b8 	bl	800015c <__adddf3>
 8006fec:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ff0:	e7ba      	b.n	8006f68 <__kernel_rem_pio2+0x52c>
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	e7c0      	b.n	8006f78 <__kernel_rem_pio2+0x53c>
 8006ff6:	4660      	mov	r0, ip
 8006ff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ffc:	4639      	mov	r1, r7
 8006ffe:	f7f9 f8ad 	bl	800015c <__adddf3>
 8007002:	3601      	adds	r6, #1
 8007004:	4684      	mov	ip, r0
 8007006:	460f      	mov	r7, r1
 8007008:	e7c4      	b.n	8006f94 <__kernel_rem_pio2+0x558>
 800700a:	e9da 6700 	ldrd	r6, r7, [sl]
 800700e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8007012:	4632      	mov	r2, r6
 8007014:	463b      	mov	r3, r7
 8007016:	4640      	mov	r0, r8
 8007018:	4649      	mov	r1, r9
 800701a:	f7f9 f89f 	bl	800015c <__adddf3>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007026:	4640      	mov	r0, r8
 8007028:	4649      	mov	r1, r9
 800702a:	f7f9 f895 	bl	8000158 <__aeabi_dsub>
 800702e:	4632      	mov	r2, r6
 8007030:	463b      	mov	r3, r7
 8007032:	f7f9 f893 	bl	800015c <__adddf3>
 8007036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800703a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800703e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007042:	e9ca 2300 	strd	r2, r3, [sl]
 8007046:	e766      	b.n	8006f16 <__kernel_rem_pio2+0x4da>
 8007048:	e9da 8900 	ldrd	r8, r9, [sl]
 800704c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8007050:	4642      	mov	r2, r8
 8007052:	464b      	mov	r3, r9
 8007054:	4630      	mov	r0, r6
 8007056:	4639      	mov	r1, r7
 8007058:	f7f9 f880 	bl	800015c <__adddf3>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007064:	4630      	mov	r0, r6
 8007066:	4639      	mov	r1, r7
 8007068:	f7f9 f876 	bl	8000158 <__aeabi_dsub>
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	f7f9 f874 	bl	800015c <__adddf3>
 8007074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007078:	e86a 0102 	strd	r0, r1, [sl], #-8
 800707c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007080:	e9ca 2300 	strd	r2, r3, [sl]
 8007084:	e74c      	b.n	8006f20 <__kernel_rem_pio2+0x4e4>
 8007086:	4638      	mov	r0, r7
 8007088:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800708c:	4631      	mov	r1, r6
 800708e:	f7f9 f865 	bl	800015c <__adddf3>
 8007092:	3c01      	subs	r4, #1
 8007094:	4607      	mov	r7, r0
 8007096:	460e      	mov	r6, r1
 8007098:	e748      	b.n	8006f2c <__kernel_rem_pio2+0x4f0>
 800709a:	9b06      	ldr	r3, [sp, #24]
 800709c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80070a0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80070a4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80070a8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80070ac:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80070b0:	601d      	str	r5, [r3, #0]
 80070b2:	615e      	str	r6, [r3, #20]
 80070b4:	e721      	b.n	8006efa <__kernel_rem_pio2+0x4be>
 80070b6:	bf00      	nop
 80070b8:	41700000 	.word	0x41700000
 80070bc:	3e700000 	.word	0x3e700000

080070c0 <__kernel_sin>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	e9cd 2300 	strd	r2, r3, [sp]
 80070ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80070d2:	4682      	mov	sl, r0
 80070d4:	460c      	mov	r4, r1
 80070d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80070d8:	da03      	bge.n	80070e2 <__kernel_sin+0x22>
 80070da:	f7f9 fc8f 	bl	80009fc <__aeabi_d2iz>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d050      	beq.n	8007184 <__kernel_sin+0xc4>
 80070e2:	4652      	mov	r2, sl
 80070e4:	4623      	mov	r3, r4
 80070e6:	4650      	mov	r0, sl
 80070e8:	4621      	mov	r1, r4
 80070ea:	f7f9 f9ed 	bl	80004c8 <__aeabi_dmul>
 80070ee:	4606      	mov	r6, r0
 80070f0:	460f      	mov	r7, r1
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4650      	mov	r0, sl
 80070f8:	4621      	mov	r1, r4
 80070fa:	f7f9 f9e5 	bl	80004c8 <__aeabi_dmul>
 80070fe:	a33e      	add	r3, pc, #248	; (adr r3, 80071f8 <__kernel_sin+0x138>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	4680      	mov	r8, r0
 8007106:	4689      	mov	r9, r1
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	f7f9 f9dc 	bl	80004c8 <__aeabi_dmul>
 8007110:	a33b      	add	r3, pc, #236	; (adr r3, 8007200 <__kernel_sin+0x140>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 f81f 	bl	8000158 <__aeabi_dsub>
 800711a:	4632      	mov	r2, r6
 800711c:	463b      	mov	r3, r7
 800711e:	f7f9 f9d3 	bl	80004c8 <__aeabi_dmul>
 8007122:	a339      	add	r3, pc, #228	; (adr r3, 8007208 <__kernel_sin+0x148>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	f7f9 f818 	bl	800015c <__adddf3>
 800712c:	4632      	mov	r2, r6
 800712e:	463b      	mov	r3, r7
 8007130:	f7f9 f9ca 	bl	80004c8 <__aeabi_dmul>
 8007134:	a336      	add	r3, pc, #216	; (adr r3, 8007210 <__kernel_sin+0x150>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 f80d 	bl	8000158 <__aeabi_dsub>
 800713e:	4632      	mov	r2, r6
 8007140:	463b      	mov	r3, r7
 8007142:	f7f9 f9c1 	bl	80004c8 <__aeabi_dmul>
 8007146:	a334      	add	r3, pc, #208	; (adr r3, 8007218 <__kernel_sin+0x158>)
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f7f9 f806 	bl	800015c <__adddf3>
 8007150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007154:	b9dd      	cbnz	r5, 800718e <__kernel_sin+0xce>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4630      	mov	r0, r6
 800715c:	4639      	mov	r1, r7
 800715e:	f7f9 f9b3 	bl	80004c8 <__aeabi_dmul>
 8007162:	a32f      	add	r3, pc, #188	; (adr r3, 8007220 <__kernel_sin+0x160>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f7f8 fff6 	bl	8000158 <__aeabi_dsub>
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	f7f9 f9aa 	bl	80004c8 <__aeabi_dmul>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4650      	mov	r0, sl
 800717a:	4621      	mov	r1, r4
 800717c:	f7f8 ffee 	bl	800015c <__adddf3>
 8007180:	4682      	mov	sl, r0
 8007182:	460c      	mov	r4, r1
 8007184:	4650      	mov	r0, sl
 8007186:	4621      	mov	r1, r4
 8007188:	b006      	add	sp, #24
 800718a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718e:	2200      	movs	r2, #0
 8007190:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007194:	4b24      	ldr	r3, [pc, #144]	; (8007228 <__kernel_sin+0x168>)
 8007196:	f7f9 f997 	bl	80004c8 <__aeabi_dmul>
 800719a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800719e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071a2:	4640      	mov	r0, r8
 80071a4:	4649      	mov	r1, r9
 80071a6:	f7f9 f98f 	bl	80004c8 <__aeabi_dmul>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071b2:	f7f8 ffd1 	bl	8000158 <__aeabi_dsub>
 80071b6:	4632      	mov	r2, r6
 80071b8:	463b      	mov	r3, r7
 80071ba:	f7f9 f985 	bl	80004c8 <__aeabi_dmul>
 80071be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071c2:	f7f8 ffc9 	bl	8000158 <__aeabi_dsub>
 80071c6:	a316      	add	r3, pc, #88	; (adr r3, 8007220 <__kernel_sin+0x160>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	4606      	mov	r6, r0
 80071ce:	460f      	mov	r7, r1
 80071d0:	4640      	mov	r0, r8
 80071d2:	4649      	mov	r1, r9
 80071d4:	f7f9 f978 	bl	80004c8 <__aeabi_dmul>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f8 ffbc 	bl	800015c <__adddf3>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4650      	mov	r0, sl
 80071ea:	4621      	mov	r1, r4
 80071ec:	f7f8 ffb4 	bl	8000158 <__aeabi_dsub>
 80071f0:	e7c6      	b.n	8007180 <__kernel_sin+0xc0>
 80071f2:	bf00      	nop
 80071f4:	f3af 8000 	nop.w
 80071f8:	5acfd57c 	.word	0x5acfd57c
 80071fc:	3de5d93a 	.word	0x3de5d93a
 8007200:	8a2b9ceb 	.word	0x8a2b9ceb
 8007204:	3e5ae5e6 	.word	0x3e5ae5e6
 8007208:	57b1fe7d 	.word	0x57b1fe7d
 800720c:	3ec71de3 	.word	0x3ec71de3
 8007210:	19c161d5 	.word	0x19c161d5
 8007214:	3f2a01a0 	.word	0x3f2a01a0
 8007218:	1110f8a6 	.word	0x1110f8a6
 800721c:	3f811111 	.word	0x3f811111
 8007220:	55555549 	.word	0x55555549
 8007224:	3fc55555 	.word	0x3fc55555
 8007228:	3fe00000 	.word	0x3fe00000

0800722c <fabs>:
 800722c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007230:	4770      	bx	lr
 8007232:	0000      	movs	r0, r0
 8007234:	0000      	movs	r0, r0
	...

08007238 <floor>:
 8007238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800723c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007240:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8007244:	2e13      	cmp	r6, #19
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4607      	mov	r7, r0
 800724c:	460c      	mov	r4, r1
 800724e:	4605      	mov	r5, r0
 8007250:	dc33      	bgt.n	80072ba <floor+0x82>
 8007252:	2e00      	cmp	r6, #0
 8007254:	da14      	bge.n	8007280 <floor+0x48>
 8007256:	a334      	add	r3, pc, #208	; (adr r3, 8007328 <floor+0xf0>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f7f8 ff7e 	bl	800015c <__adddf3>
 8007260:	2200      	movs	r2, #0
 8007262:	2300      	movs	r3, #0
 8007264:	f7f9 fbc0 	bl	80009e8 <__aeabi_dcmpgt>
 8007268:	b138      	cbz	r0, 800727a <floor+0x42>
 800726a:	2c00      	cmp	r4, #0
 800726c:	da58      	bge.n	8007320 <floor+0xe8>
 800726e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007272:	431d      	orrs	r5, r3
 8007274:	d001      	beq.n	800727a <floor+0x42>
 8007276:	2500      	movs	r5, #0
 8007278:	4c2d      	ldr	r4, [pc, #180]	; (8007330 <floor+0xf8>)
 800727a:	4623      	mov	r3, r4
 800727c:	462f      	mov	r7, r5
 800727e:	e025      	b.n	80072cc <floor+0x94>
 8007280:	4a2c      	ldr	r2, [pc, #176]	; (8007334 <floor+0xfc>)
 8007282:	fa42 f806 	asr.w	r8, r2, r6
 8007286:	ea01 0208 	and.w	r2, r1, r8
 800728a:	4302      	orrs	r2, r0
 800728c:	d01e      	beq.n	80072cc <floor+0x94>
 800728e:	a326      	add	r3, pc, #152	; (adr r3, 8007328 <floor+0xf0>)
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f7f8 ff62 	bl	800015c <__adddf3>
 8007298:	2200      	movs	r2, #0
 800729a:	2300      	movs	r3, #0
 800729c:	f7f9 fba4 	bl	80009e8 <__aeabi_dcmpgt>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d0ea      	beq.n	800727a <floor+0x42>
 80072a4:	2c00      	cmp	r4, #0
 80072a6:	bfbe      	ittt	lt
 80072a8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80072ac:	fa43 f606 	asrlt.w	r6, r3, r6
 80072b0:	19a4      	addlt	r4, r4, r6
 80072b2:	2500      	movs	r5, #0
 80072b4:	ea24 0408 	bic.w	r4, r4, r8
 80072b8:	e7df      	b.n	800727a <floor+0x42>
 80072ba:	2e33      	cmp	r6, #51	; 0x33
 80072bc:	dd0a      	ble.n	80072d4 <floor+0x9c>
 80072be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80072c2:	d103      	bne.n	80072cc <floor+0x94>
 80072c4:	f7f8 ff4a 	bl	800015c <__adddf3>
 80072c8:	4607      	mov	r7, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4638      	mov	r0, r7
 80072ce:	4619      	mov	r1, r3
 80072d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d4:	f04f 32ff 	mov.w	r2, #4294967295
 80072d8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80072dc:	fa22 f808 	lsr.w	r8, r2, r8
 80072e0:	ea18 0f00 	tst.w	r8, r0
 80072e4:	d0f2      	beq.n	80072cc <floor+0x94>
 80072e6:	a310      	add	r3, pc, #64	; (adr r3, 8007328 <floor+0xf0>)
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f7f8 ff36 	bl	800015c <__adddf3>
 80072f0:	2200      	movs	r2, #0
 80072f2:	2300      	movs	r3, #0
 80072f4:	f7f9 fb78 	bl	80009e8 <__aeabi_dcmpgt>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d0be      	beq.n	800727a <floor+0x42>
 80072fc:	2c00      	cmp	r4, #0
 80072fe:	da02      	bge.n	8007306 <floor+0xce>
 8007300:	2e14      	cmp	r6, #20
 8007302:	d103      	bne.n	800730c <floor+0xd4>
 8007304:	3401      	adds	r4, #1
 8007306:	ea25 0508 	bic.w	r5, r5, r8
 800730a:	e7b6      	b.n	800727a <floor+0x42>
 800730c:	2301      	movs	r3, #1
 800730e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007312:	fa03 f606 	lsl.w	r6, r3, r6
 8007316:	4435      	add	r5, r6
 8007318:	42bd      	cmp	r5, r7
 800731a:	bf38      	it	cc
 800731c:	18e4      	addcc	r4, r4, r3
 800731e:	e7f2      	b.n	8007306 <floor+0xce>
 8007320:	2500      	movs	r5, #0
 8007322:	462c      	mov	r4, r5
 8007324:	e7a9      	b.n	800727a <floor+0x42>
 8007326:	bf00      	nop
 8007328:	8800759c 	.word	0x8800759c
 800732c:	7e37e43c 	.word	0x7e37e43c
 8007330:	bff00000 	.word	0xbff00000
 8007334:	000fffff 	.word	0x000fffff

08007338 <scalbn>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800733e:	4604      	mov	r4, r0
 8007340:	460d      	mov	r5, r1
 8007342:	4617      	mov	r7, r2
 8007344:	460b      	mov	r3, r1
 8007346:	b996      	cbnz	r6, 800736e <scalbn+0x36>
 8007348:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800734c:	4303      	orrs	r3, r0
 800734e:	d039      	beq.n	80073c4 <scalbn+0x8c>
 8007350:	4b33      	ldr	r3, [pc, #204]	; (8007420 <scalbn+0xe8>)
 8007352:	2200      	movs	r2, #0
 8007354:	f7f9 f8b8 	bl	80004c8 <__aeabi_dmul>
 8007358:	4b32      	ldr	r3, [pc, #200]	; (8007424 <scalbn+0xec>)
 800735a:	4604      	mov	r4, r0
 800735c:	429f      	cmp	r7, r3
 800735e:	460d      	mov	r5, r1
 8007360:	da0f      	bge.n	8007382 <scalbn+0x4a>
 8007362:	a32b      	add	r3, pc, #172	; (adr r3, 8007410 <scalbn+0xd8>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f9 f8ae 	bl	80004c8 <__aeabi_dmul>
 800736c:	e006      	b.n	800737c <scalbn+0x44>
 800736e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007372:	4296      	cmp	r6, r2
 8007374:	d10a      	bne.n	800738c <scalbn+0x54>
 8007376:	4602      	mov	r2, r0
 8007378:	f7f8 fef0 	bl	800015c <__adddf3>
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	e020      	b.n	80073c4 <scalbn+0x8c>
 8007382:	460b      	mov	r3, r1
 8007384:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007388:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800738c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007390:	19b9      	adds	r1, r7, r6
 8007392:	4291      	cmp	r1, r2
 8007394:	dd0e      	ble.n	80073b4 <scalbn+0x7c>
 8007396:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800739a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800739e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80073a2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80073a6:	4820      	ldr	r0, [pc, #128]	; (8007428 <scalbn+0xf0>)
 80073a8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80073ac:	a31a      	add	r3, pc, #104	; (adr r3, 8007418 <scalbn+0xe0>)
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	e7d9      	b.n	8007368 <scalbn+0x30>
 80073b4:	2900      	cmp	r1, #0
 80073b6:	dd08      	ble.n	80073ca <scalbn+0x92>
 80073b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80073ce:	da12      	bge.n	80073f6 <scalbn+0xbe>
 80073d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80073d4:	429f      	cmp	r7, r3
 80073d6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80073da:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80073de:	dcdc      	bgt.n	800739a <scalbn+0x62>
 80073e0:	a30b      	add	r3, pc, #44	; (adr r3, 8007410 <scalbn+0xd8>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80073ea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80073ee:	480f      	ldr	r0, [pc, #60]	; (800742c <scalbn+0xf4>)
 80073f0:	f041 011f 	orr.w	r1, r1, #31
 80073f4:	e7b8      	b.n	8007368 <scalbn+0x30>
 80073f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073fa:	3136      	adds	r1, #54	; 0x36
 80073fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007400:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007404:	4620      	mov	r0, r4
 8007406:	4629      	mov	r1, r5
 8007408:	2200      	movs	r2, #0
 800740a:	4b09      	ldr	r3, [pc, #36]	; (8007430 <scalbn+0xf8>)
 800740c:	e7ac      	b.n	8007368 <scalbn+0x30>
 800740e:	bf00      	nop
 8007410:	c2f8f359 	.word	0xc2f8f359
 8007414:	01a56e1f 	.word	0x01a56e1f
 8007418:	8800759c 	.word	0x8800759c
 800741c:	7e37e43c 	.word	0x7e37e43c
 8007420:	43500000 	.word	0x43500000
 8007424:	ffff3cb0 	.word	0xffff3cb0
 8007428:	8800759c 	.word	0x8800759c
 800742c:	c2f8f359 	.word	0xc2f8f359
 8007430:	3c900000 	.word	0x3c900000

08007434 <_init>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr

08007440 <_fini>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	bf00      	nop
 8007444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007446:	bc08      	pop	{r3}
 8007448:	469e      	mov	lr, r3
 800744a:	4770      	bx	lr
